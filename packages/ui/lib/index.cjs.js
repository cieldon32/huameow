'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var require$$0 = require('react-dom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === 'undefined') {
    return;
  }
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$D = ":root{--md-sys-state-hover-state-layer-opacity:0.08;--md-sys-state-focus-state-layer-opacity:0.12;--md-sys-state-pressed-state-layer-opacity:0.12;--md-sys-state-drag-state-layer-opacity:0.16;--md-sys-shape-corner-full:9999px}";
styleInject(css_248z$D);

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _toPrimitive$1(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive$1(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This file is automatically generated. Do not modify it.
/**
 * Utility methods for mathematical operations.
 */
/**
 * The signum function.
 *
 * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0
 */
function signum(num) {
  if (num < 0) {
    return -1;
  } else if (num === 0) {
    return 0;
  } else {
    return 1;
  }
}
/**
 * The linear interpolation function.
 *
 * @return start if amount = 0 and stop if amount = 1
 */
function lerp(start, stop, amount) {
  return (1.0 - amount) * start + amount * stop;
}
/**
 * Clamps an integer between two integers.
 *
 * @return input when min <= input <= max, and either min or max
 * otherwise.
 */
function clampInt(min, max, input) {
  if (input < min) {
    return min;
  } else if (input > max) {
    return max;
  }
  return input;
}
/**
 * Clamps an integer between two floating-point numbers.
 *
 * @return input when min <= input <= max, and either min or max
 * otherwise.
 */
function clampDouble(min, max, input) {
  if (input < min) {
    return min;
  } else if (input > max) {
    return max;
  }
  return input;
}
/**
 * Sanitizes a degree measure as an integer.
 *
 * @return a degree measure between 0 (inclusive) and 360
 * (exclusive).
 */
function sanitizeDegreesInt(degrees) {
  degrees = degrees % 360;
  if (degrees < 0) {
    degrees = degrees + 360;
  }
  return degrees;
}
/**
 * Sanitizes a degree measure as a floating-point number.
 *
 * @return a degree measure between 0.0 (inclusive) and 360.0
 * (exclusive).
 */
function sanitizeDegreesDouble(degrees) {
  degrees = degrees % 360.0;
  if (degrees < 0) {
    degrees = degrees + 360.0;
  }
  return degrees;
}
/**
 * Sign of direction change needed to travel from one angle to
 * another.
 *
 * For angles that are 180 degrees apart from each other, both
 * directions have the same travel distance, so either direction is
 * shortest. The value 1.0 is returned in this case.
 *
 * @param from The angle travel starts from, in degrees.
 * @param to The angle travel ends at, in degrees.
 * @return -1 if decreasing from leads to the shortest travel
 * distance, 1 if increasing from leads to the shortest travel
 * distance.
 */
function rotationDirection(from, to) {
  var increasingDifference = sanitizeDegreesDouble(to - from);
  return increasingDifference <= 180.0 ? 1.0 : -1.0;
}
/**
 * Distance of two points on a circle, represented using degrees.
 */
function differenceDegrees(a, b) {
  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);
}
/**
 * Multiplies a 1x3 row vector with a 3x3 matrix.
 */
function matrixMultiply(row, matrix) {
  var a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];
  var b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];
  var c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];
  return [a, b, c];
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Color science utilities.
 *
 * Utility methods for color science constants and color space
 * conversions that aren't HCT or CAM16.
 */
var SRGB_TO_XYZ = [[0.41233895, 0.35762064, 0.18051042], [0.2126, 0.7152, 0.0722], [0.01932141, 0.11916382, 0.95034478]];
var XYZ_TO_SRGB = [[3.2413774792388685, -1.5376652402851851, -0.49885366846268053], [-0.9691452513005321, 1.8758853451067872, 0.04156585616912061], [0.05562093689691305, -0.20395524564742123, 1.0571799111220335]];
var WHITE_POINT_D65 = [95.047, 100.0, 108.883];
/**
 * Converts a color from RGB components to ARGB format.
 */
function argbFromRgb(red, green, blue) {
  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;
}
/**
 * Converts a color from linear RGB components to ARGB format.
 */
function argbFromLinrgb(linrgb) {
  var r = delinearized(linrgb[0]);
  var g = delinearized(linrgb[1]);
  var b = delinearized(linrgb[2]);
  return argbFromRgb(r, g, b);
}
/**
 * Returns the red component of a color in ARGB format.
 */
function redFromArgb(argb) {
  return argb >> 16 & 255;
}
/**
 * Returns the green component of a color in ARGB format.
 */
function greenFromArgb(argb) {
  return argb >> 8 & 255;
}
/**
 * Returns the blue component of a color in ARGB format.
 */
function blueFromArgb(argb) {
  return argb & 255;
}
/**
 * Converts a color from ARGB to XYZ.
 */
function argbFromXyz(x, y, z) {
  var matrix = XYZ_TO_SRGB;
  var linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;
  var linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;
  var linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;
  var r = delinearized(linearR);
  var g = delinearized(linearG);
  var b = delinearized(linearB);
  return argbFromRgb(r, g, b);
}
/**
 * Converts a color from XYZ to ARGB.
 */
function xyzFromArgb(argb) {
  var r = linearized(redFromArgb(argb));
  var g = linearized(greenFromArgb(argb));
  var b = linearized(blueFromArgb(argb));
  return matrixMultiply([r, g, b], SRGB_TO_XYZ);
}
/**
 * Converts an L* value to an ARGB representation.
 *
 * @param lstar L* in L*a*b*
 * @return ARGB representation of grayscale color with lightness
 * matching L*
 */
function argbFromLstar(lstar) {
  var y = yFromLstar(lstar);
  var component = delinearized(y);
  return argbFromRgb(component, component, component);
}
/**
 * Computes the L* value of a color in ARGB representation.
 *
 * @param argb ARGB representation of a color
 * @return L*, from L*a*b*, coordinate of the color
 */
function lstarFromArgb(argb) {
  var y = xyzFromArgb(argb)[1];
  return 116.0 * labF(y / 100.0) - 16.0;
}
/**
 * Converts an L* value to a Y value.
 *
 * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.
 *
 * L* measures perceptual luminance, a linear scale. Y in XYZ
 * measures relative luminance, a logarithmic scale.
 *
 * @param lstar L* in L*a*b*
 * @return Y in XYZ
 */
function yFromLstar(lstar) {
  return 100.0 * labInvf((lstar + 16.0) / 116.0);
}
/**
 * Converts a Y value to an L* value.
 *
 * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.
 *
 * L* measures perceptual luminance, a linear scale. Y in XYZ
 * measures relative luminance, a logarithmic scale.
 *
 * @param y Y in XYZ
 * @return L* in L*a*b*
 */
function lstarFromY(y) {
  return labF(y / 100.0) * 116.0 - 16.0;
}
/**
 * Linearizes an RGB component.
 *
 * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B
 * channel
 * @return 0.0 <= output <= 100.0, color channel converted to
 * linear RGB space
 */
function linearized(rgbComponent) {
  var normalized = rgbComponent / 255.0;
  if (normalized <= 0.040449936) {
    return normalized / 12.92 * 100.0;
  } else {
    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;
  }
}
/**
 * Delinearizes an RGB component.
 *
 * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
 * linear R/G/B channel
 * @return 0 <= output <= 255, color channel converted to regular
 * RGB space
 */
function delinearized(rgbComponent) {
  var normalized = rgbComponent / 100.0;
  var delinearized = 0.0;
  if (normalized <= 0.0031308) {
    delinearized = normalized * 12.92;
  } else {
    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;
  }
  return clampInt(0, 255, Math.round(delinearized * 255.0));
}
/**
 * Returns the standard white point; white on a sunny day.
 *
 * @return The white point
 */
function whitePointD65() {
  return WHITE_POINT_D65;
}
function labF(t) {
  var e = 216.0 / 24389.0;
  var kappa = 24389.0 / 27.0;
  if (t > e) {
    return Math.pow(t, 1.0 / 3.0);
  } else {
    return (kappa * t + 16) / 116;
  }
}
function labInvf(ft) {
  var e = 216.0 / 24389.0;
  var kappa = 24389.0 / 27.0;
  var ft3 = ft * ft * ft;
  if (ft3 > e) {
    return ft3;
  } else {
    return (116 * ft - 16) / kappa;
  }
}

var _global = {exports: {}};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global$e = _global.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
// eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global$e; // eslint-disable-line no-undef

var _core = {exports: {}};

var core$4 = _core.exports = {
  version: '2.6.12'
};
if (typeof __e == 'number') __e = core$4; // eslint-disable-line no-undef

var _objectDp = {};

var _isObject$1 = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var isObject$b = _isObject$1;
var _anObject = function (it) {
  if (!isObject$b(it)) throw TypeError(it + ' is not an object!');
  return it;
};

var _fails = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function () {
  return Object.defineProperty({}, 'a', {
    get: function () {
      return 7;
    }
  }).a != 7;
});

var _domCreate;
var hasRequired_domCreate;

function require_domCreate () {
	if (hasRequired_domCreate) return _domCreate;
	hasRequired_domCreate = 1;
	var isObject = _isObject$1;
	var document = _global.exports.document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	_domCreate = function (it) {
	  return is ? document.createElement(it) : {};
	};
	return _domCreate;
}

var _ie8DomDefine = !_descriptors && !_fails(function () {
  return Object.defineProperty(require_domCreate()('div'), 'a', {
    get: function () {
      return 7;
    }
  }).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject$a = _isObject$1;
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function (it, S) {
  if (!isObject$a(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject$a(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject$a(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject$a(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

var anObject$d = _anObject;
var IE8_DOM_DEFINE = _ie8DomDefine;
var toPrimitive$3 = _toPrimitive;
var dP$8 = Object.defineProperty;
_objectDp.f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject$d(O);
  P = toPrimitive$3(P, true);
  anObject$d(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP$8(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

var _propertyDesc = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var dP$7 = _objectDp;
var createDesc$2 = _propertyDesc;
var _hide = _descriptors ? function (object, key, value) {
  return dP$7.f(object, key, createDesc$2(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var _redefine = {exports: {}};

var hasOwnProperty = {}.hasOwnProperty;
var _has = function (it, key) {
  return hasOwnProperty.call(it, key);
};

var id$1 = 0;
var px = Math.random();
var _uid = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
};

var _shared = {exports: {}};

var _library = false;

var core$3 = _core.exports;
var global$d = _global.exports;
var SHARED = '__core-js_shared__';
var store$1 = global$d[SHARED] || (global$d[SHARED] = {});
(_shared.exports = function (key, value) {
  return store$1[key] || (store$1[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core$3.version,
  mode: 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

var _functionToString = _shared.exports('native-function-to-string', Function.toString);

var global$c = _global.exports;
var hide$4 = _hide;
var has$6 = _has;
var SRC = _uid('src');
var $toString$2 = _functionToString;
var TO_STRING$2 = 'toString';
var TPL = ('' + $toString$2).split(TO_STRING$2);
_core.exports.inspectSource = function (it) {
  return $toString$2.call(it);
};
(_redefine.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has$6(val, 'name') || hide$4(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has$6(val, SRC) || hide$4(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global$c) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide$4(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide$4(O, key, val);
  }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING$2, function toString() {
  return typeof this == 'function' && this[SRC] || $toString$2.call(this);
});

var _aFunction = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

// optional / simple context binding
var aFunction$4 = _aFunction;
var _ctx = function (fn, that, length) {
  aFunction$4(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function /* ...args */
  () {
    return fn.apply(that, arguments);
  };
};

var global$b = _global.exports;
var core$2 = _core.exports;
var hide$3 = _hide;
var redefine$6 = _redefine.exports;
var ctx$6 = _ctx;
var PROTOTYPE$2 = 'prototype';
var $export$j = function (type, name, source) {
  var IS_FORCED = type & $export$j.F;
  var IS_GLOBAL = type & $export$j.G;
  var IS_STATIC = type & $export$j.S;
  var IS_PROTO = type & $export$j.P;
  var IS_BIND = type & $export$j.B;
  var target = IS_GLOBAL ? global$b : IS_STATIC ? global$b[name] || (global$b[name] = {}) : (global$b[name] || {})[PROTOTYPE$2];
  var exports = IS_GLOBAL ? core$2 : core$2[name] || (core$2[name] = {});
  var expProto = exports[PROTOTYPE$2] || (exports[PROTOTYPE$2] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx$6(out, global$b) : IS_PROTO && typeof out == 'function' ? ctx$6(Function.call, out) : out;
    // extend global
    if (target) redefine$6(target, key, out, type & $export$j.U);
    // export
    if (exports[key] != out) hide$3(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global$b.core = core$2;
// type bitmap
$export$j.F = 1; // forced
$export$j.G = 2; // global
$export$j.S = 4; // static
$export$j.P = 8; // proto
$export$j.B = 16; // bind
$export$j.W = 32; // wrap
$export$j.U = 64; // safe
$export$j.R = 128; // real proto method for `library`
var _export = $export$j;

// 20.2.2.28 Math.sign(x)
var _mathSign = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

// 20.2.2.9 Math.cbrt(x)
var $export$i = _export;
var sign = _mathSign;
$export$i($export$i.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/**
 * In traditional color spaces, a color can be identified solely by the
 * observer's measurement of the color. Color appearance models such as CAM16
 * also use information about the environment where the color was
 * observed, known as the viewing conditions.
 *
 * For example, white under the traditional assumption of a midday sun white
 * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
 * hue 203, chroma 3, lightness 100)
 *
 * This class caches intermediate values of the CAM16 conversion process that
 * depend only on viewing conditions, enabling speed ups.
 */
var ViewingConditions = /*#__PURE__*/function () {
  /**
   * Parameters are intermediate values of the CAM16 conversion process. Their
   * names are shorthand for technical color science terminology, this class
   * would not benefit from documenting them individually. A brief overview
   * is available in the CAM16 specification, and a complete overview requires
   * a color science textbook, such as Fairchild's Color Appearance Models.
   */
  function ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {
    _classCallCheck(this, ViewingConditions);
    this.n = n;
    this.aw = aw;
    this.nbb = nbb;
    this.ncb = ncb;
    this.c = c;
    this.nc = nc;
    this.rgbD = rgbD;
    this.fl = fl;
    this.fLRoot = fLRoot;
    this.z = z;
  }
  _createClass(ViewingConditions, null, [{
    key: "make",
    value:
    /**
     * Create ViewingConditions from a simple, physically relevant, set of
     * parameters.
     *
     * @param whitePoint White point, measured in the XYZ color space.
     *     default = D65, or sunny day afternoon
     * @param adaptingLuminance The luminance of the adapting field. Informally,
     *     how bright it is in the room where the color is viewed. Can be
     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,
     *     or 200 lux.
     * @param backgroundLstar The lightness of the area surrounding the color.
     *     measured by L* in L*a*b*. default = 50.0
     * @param surround A general description of the lighting surrounding the
     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a
     *     dimly light room, like watching TV at home at night. 2.0 means there
     *     is no difference between the lighting on the color and around it.
     *     default = 2.0
     * @param discountingIlluminant Whether the eye accounts for the tint of the
     *     ambient lighting, such as knowing an apple is still red in green light.
     *     default = false, the eye does not perform this process on
     *       self-luminous objects like displays.
     */
    function make() {
      var whitePoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : whitePointD65();
      var adaptingLuminance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200.0 / Math.PI * yFromLstar(50.0) / 100.0;
      var backgroundLstar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50.0;
      var surround = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2.0;
      var discountingIlluminant = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var xyz = whitePoint;
      var rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;
      var gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;
      var bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;
      var f = 0.8 + surround / 10.0;
      var c = f >= 0.9 ? lerp(0.59, 0.69, (f - 0.9) * 10.0) : lerp(0.525, 0.59, (f - 0.8) * 10.0);
      var d = discountingIlluminant ? 1.0 : f * (1.0 - 1.0 / 3.6 * Math.exp((-adaptingLuminance - 42.0) / 92.0));
      d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;
      var nc = f;
      var rgbD = [d * (100.0 / rW) + 1.0 - d, d * (100.0 / gW) + 1.0 - d, d * (100.0 / bW) + 1.0 - d];
      var k = 1.0 / (5.0 * adaptingLuminance + 1.0);
      var k4 = k * k * k * k;
      var k4F = 1.0 - k4;
      var fl = k4 * adaptingLuminance + 0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);
      var n = yFromLstar(backgroundLstar) / whitePoint[1];
      var z = 1.48 + Math.sqrt(n);
      var nbb = 0.725 / Math.pow(n, 0.2);
      var ncb = nbb;
      var rgbAFactors = [Math.pow(fl * rgbD[0] * rW / 100.0, 0.42), Math.pow(fl * rgbD[1] * gW / 100.0, 0.42), Math.pow(fl * rgbD[2] * bW / 100.0, 0.42)];
      var rgbA = [400.0 * rgbAFactors[0] / (rgbAFactors[0] + 27.13), 400.0 * rgbAFactors[1] / (rgbAFactors[1] + 27.13), 400.0 * rgbAFactors[2] / (rgbAFactors[2] + 27.13)];
      var aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;
      return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);
    }
  }]);
  return ViewingConditions;
}();
/** sRGB-like viewing conditions.  */
_defineProperty(ViewingConditions, "DEFAULT", ViewingConditions.make());

/**
 * CAM16, a color appearance model. Colors are not just defined by their hex
 * code, but rather, a hex code and viewing conditions.
 *
 * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,
 * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
 * specification, and should be used when measuring distances between colors.
 *
 * In traditional color spaces, a color can be identified solely by the
 * observer's measurement of the color. Color appearance models such as CAM16
 * also use information about the environment where the color was
 * observed, known as the viewing conditions.
 *
 * For example, white under the traditional assumption of a midday sun white
 * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
 * hue 203, chroma 3, lightness 100)
 */
var Cam16 = /*#__PURE__*/function () {
  /**
   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in
   * the following combinations:
   *      -  {j or q} and {c, m, or s} and hue
   *      - jstar, astar, bstar
   * Prefer using a static method that constructs from 3 of those dimensions.
   * This constructor is intended for those methods to use to return all
   * possible dimensions.
   *
   * @param hue
   * @param chroma informally, colorfulness / color intensity. like saturation
   *     in HSL, except perceptually accurate.
   * @param j lightness
   * @param q brightness; ratio of lightness to white point's lightness
   * @param m colorfulness
   * @param s saturation; ratio of chroma to white point's chroma
   * @param jstar CAM16-UCS J coordinate
   * @param astar CAM16-UCS a coordinate
   * @param bstar CAM16-UCS b coordinate
   */
  function Cam16(hue, chroma, j, q, m, s, jstar, astar, bstar) {
    _classCallCheck(this, Cam16);
    this.hue = hue;
    this.chroma = chroma;
    this.j = j;
    this.q = q;
    this.m = m;
    this.s = s;
    this.jstar = jstar;
    this.astar = astar;
    this.bstar = bstar;
  }
  /**
   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,
   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
   * specification, and is used to measure distances between colors.
   */
  _createClass(Cam16, [{
    key: "distance",
    value: function distance(other) {
      var dJ = this.jstar - other.jstar;
      var dA = this.astar - other.astar;
      var dB = this.bstar - other.bstar;
      var dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);
      var dE = 1.41 * Math.pow(dEPrime, 0.63);
      return dE;
    }
    /**
     * @param argb ARGB representation of a color.
     * @return CAM16 color, assuming the color was viewed in default viewing
     *     conditions.
     */
  }, {
    key: "toInt",
    value:
    /**
     *  @return ARGB representation of color, assuming the color was viewed in
     *     default viewing conditions, which are near-identical to the default
     *     viewing conditions for sRGB.
     */
    function toInt() {
      return this.viewed(ViewingConditions.DEFAULT);
    }
    /**
     * @param viewingConditions Information about the environment where the color
     *     will be viewed.
     * @return ARGB representation of color
     */
  }, {
    key: "viewed",
    value: function viewed(viewingConditions) {
      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);
      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);
      var hRad = this.hue * Math.PI / 180.0;
      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);
      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);
      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;
      var p2 = ac / viewingConditions.nbb;
      var hSin = Math.sin(hRad);
      var hCos = Math.cos(hRad);
      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);
      var a = gamma * hCos;
      var b = gamma * hSin;
      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;
      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;
      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;
      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));
      var rC = signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);
      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));
      var gC = signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);
      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));
      var bC = signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);
      var rF = rC / viewingConditions.rgbD[0];
      var gF = gC / viewingConditions.rgbD[1];
      var bF = bC / viewingConditions.rgbD[2];
      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;
      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;
      var z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;
      var argb = argbFromXyz(x, y, z);
      return argb;
    }
    /// Given color expressed in XYZ and viewed in [viewingConditions], convert to
    /// CAM16.
  }, {
    key: "xyzInViewingConditions",
    value:
    /// XYZ representation of CAM16 seen in [viewingConditions].
    function xyzInViewingConditions(viewingConditions) {
      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);
      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);
      var hRad = this.hue * Math.PI / 180.0;
      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);
      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);
      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;
      var p2 = ac / viewingConditions.nbb;
      var hSin = Math.sin(hRad);
      var hCos = Math.cos(hRad);
      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);
      var a = gamma * hCos;
      var b = gamma * hSin;
      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;
      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;
      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;
      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));
      var rC = signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);
      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));
      var gC = signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);
      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));
      var bC = signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);
      var rF = rC / viewingConditions.rgbD[0];
      var gF = gC / viewingConditions.rgbD[1];
      var bF = bC / viewingConditions.rgbD[2];
      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;
      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;
      var z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;
      return [x, y, z];
    }
  }], [{
    key: "fromInt",
    value: function fromInt(argb) {
      return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);
    }
    /**
     * @param argb ARGB representation of a color.
     * @param viewingConditions Information about the environment where the color
     *     was observed.
     * @return CAM16 color.
     */
  }, {
    key: "fromIntInViewingConditions",
    value: function fromIntInViewingConditions(argb, viewingConditions) {
      var red = (argb & 0x00ff0000) >> 16;
      var green = (argb & 0x0000ff00) >> 8;
      var blue = argb & 0x000000ff;
      var redL = linearized(red);
      var greenL = linearized(green);
      var blueL = linearized(blue);
      var x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;
      var y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;
      var z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;
      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;
      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;
      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;
      var rD = viewingConditions.rgbD[0] * rC;
      var gD = viewingConditions.rgbD[1] * gC;
      var bD = viewingConditions.rgbD[2] * bC;
      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);
      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);
      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);
      var rA = signum(rD) * 400.0 * rAF / (rAF + 27.13);
      var gA = signum(gD) * 400.0 * gAF / (gAF + 27.13);
      var bA = signum(bD) * 400.0 * bAF / (bAF + 27.13);
      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;
      var b = (rA + gA - 2.0 * bA) / 9.0;
      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;
      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;
      var atan2 = Math.atan2(b, a);
      var atanDegrees = atan2 * 180.0 / Math.PI;
      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360.0 : atanDegrees;
      var hueRadians = hue * Math.PI / 180.0;
      var ac = p2 * viewingConditions.nbb;
      var j = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);
      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;
      var huePrime = hue < 20.14 ? hue + 360 : hue;
      var eHue = 0.25 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);
      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;
      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);
      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
      var c = alpha * Math.sqrt(j / 100.0);
      var m = c * viewingConditions.fLRoot;
      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));
      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);
      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);
      var astar = mstar * Math.cos(hueRadians);
      var bstar = mstar * Math.sin(hueRadians);
      return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);
    }
    /**
     * @param j CAM16 lightness
     * @param c CAM16 chroma
     * @param h CAM16 hue
     */
  }, {
    key: "fromJch",
    value: function fromJch(j, c, h) {
      return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);
    }
    /**
     * @param j CAM16 lightness
     * @param c CAM16 chroma
     * @param h CAM16 hue
     * @param viewingConditions Information about the environment where the color
     *     was observed.
     */
  }, {
    key: "fromJchInViewingConditions",
    value: function fromJchInViewingConditions(j, c, h, viewingConditions) {
      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;
      var m = c * viewingConditions.fLRoot;
      var alpha = c / Math.sqrt(j / 100.0);
      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));
      var hueRadians = h * Math.PI / 180.0;
      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);
      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);
      var astar = mstar * Math.cos(hueRadians);
      var bstar = mstar * Math.sin(hueRadians);
      return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);
    }
    /**
     * @param jstar CAM16-UCS lightness.
     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
     *     coordinate on the Y axis.
     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
     *     coordinate on the X axis.
     */
  }, {
    key: "fromUcs",
    value: function fromUcs(jstar, astar, bstar) {
      return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);
    }
    /**
     * @param jstar CAM16-UCS lightness.
     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
     *     coordinate on the Y axis.
     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
     *     coordinate on the X axis.
     * @param viewingConditions Information about the environment where the color
     *     was observed.
     */
  }, {
    key: "fromUcsInViewingConditions",
    value: function fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {
      var a = astar;
      var b = bstar;
      var m = Math.sqrt(a * a + b * b);
      var M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;
      var c = M / viewingConditions.fLRoot;
      var h = Math.atan2(b, a) * (180.0 / Math.PI);
      if (h < 0.0) {
        h += 360.0;
      }
      var j = jstar / (1 - (jstar - 100) * 0.007);
      return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);
    }
  }, {
    key: "fromXyzInViewingConditions",
    value: function fromXyzInViewingConditions(x, y, z, viewingConditions) {
      // Transform XYZ to 'cone'/'rgb' responses
      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;
      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;
      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;
      // Discount illuminant
      var rD = viewingConditions.rgbD[0] * rC;
      var gD = viewingConditions.rgbD[1] * gC;
      var bD = viewingConditions.rgbD[2] * bC;
      // chromatic adaptation
      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);
      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);
      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);
      var rA = signum(rD) * 400.0 * rAF / (rAF + 27.13);
      var gA = signum(gD) * 400.0 * gAF / (gAF + 27.13);
      var bA = signum(bD) * 400.0 * bAF / (bAF + 27.13);
      // redness-greenness
      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;
      // yellowness-blueness
      var b = (rA + gA - 2.0 * bA) / 9.0;
      // auxiliary components
      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;
      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;
      // hue
      var atan2 = Math.atan2(b, a);
      var atanDegrees = atan2 * 180.0 / Math.PI;
      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360 : atanDegrees;
      var hueRadians = hue * Math.PI / 180.0;
      // achromatic response to color
      var ac = p2 * viewingConditions.nbb;
      // CAM16 lightness and brightness
      var J = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);
      var Q = 4.0 / viewingConditions.c * Math.sqrt(J / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;
      var huePrime = hue < 20.14 ? hue + 360 : hue;
      var eHue = 1.0 / 4.0 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);
      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;
      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);
      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
      // CAM16 chroma, colorfulness, chroma
      var C = alpha * Math.sqrt(J / 100.0);
      var M = C * viewingConditions.fLRoot;
      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));
      // CAM16-UCS components
      var jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);
      var mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;
      var astar = mstar * Math.cos(hueRadians);
      var bstar = mstar * Math.sin(hueRadians);
      return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);
    }
  }]);
  return Cam16;
}();

// material_color_utilities is designed to have a consistent API across
// platforms and modular components that can be moved around easily. Using a
// class as a namespace facilitates this.
//
// tslint:disable:class-as-namespace
/**
 * A class that solves the HCT equation.
 */
var HctSolver = /*#__PURE__*/function () {
  function HctSolver() {
    _classCallCheck(this, HctSolver);
  }
  _createClass(HctSolver, null, [{
    key: "sanitizeRadians",
    value:
    /**
     * Sanitizes a small enough angle in radians.
     *
     * @param angle An angle in radians; must not deviate too much
     * from 0.
     * @return A coterminal angle between 0 and 2pi.
     */
    function sanitizeRadians(angle) {
      return (angle + Math.PI * 8) % (Math.PI * 2);
    }
    /**
     * Delinearizes an RGB component, returning a floating-point
     * number.
     *
     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
     * linear R/G/B channel
     * @return 0.0 <= output <= 255.0, color channel converted to
     * regular RGB space
     */
  }, {
    key: "trueDelinearized",
    value: function trueDelinearized(rgbComponent) {
      var normalized = rgbComponent / 100.0;
      var delinearized = 0.0;
      if (normalized <= 0.0031308) {
        delinearized = normalized * 12.92;
      } else {
        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;
      }
      return delinearized * 255.0;
    }
  }, {
    key: "chromaticAdaptation",
    value: function chromaticAdaptation(component) {
      var af = Math.pow(Math.abs(component), 0.42);
      return signum(component) * 400.0 * af / (af + 27.13);
    }
    /**
     * Returns the hue of a linear RGB color in CAM16.
     *
     * @param linrgb The linear RGB coordinates of a color.
     * @return The hue of the color in CAM16, in radians.
     */
  }, {
    key: "hueOf",
    value: function hueOf(linrgb) {
      var scaledDiscount = matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);
      var rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);
      var gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);
      var bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);
      // redness-greenness
      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;
      // yellowness-blueness
      var b = (rA + gA - 2.0 * bA) / 9.0;
      return Math.atan2(b, a);
    }
  }, {
    key: "areInCyclicOrder",
    value: function areInCyclicOrder(a, b, c) {
      var deltaAB = HctSolver.sanitizeRadians(b - a);
      var deltaAC = HctSolver.sanitizeRadians(c - a);
      return deltaAB < deltaAC;
    }
    /**
     * Solves the lerp equation.
     *
     * @param source The starting number.
     * @param mid The number in the middle.
     * @param target The ending number.
     * @return A number t such that lerp(source, target, t) = mid.
     */
  }, {
    key: "intercept",
    value: function intercept(source, mid, target) {
      return (mid - source) / (target - source);
    }
  }, {
    key: "lerpPoint",
    value: function lerpPoint(source, t, target) {
      return [source[0] + (target[0] - source[0]) * t, source[1] + (target[1] - source[1]) * t, source[2] + (target[2] - source[2]) * t];
    }
    /**
     * Intersects a segment with a plane.
     *
     * @param source The coordinates of point A.
     * @param coordinate The R-, G-, or B-coordinate of the plane.
     * @param target The coordinates of point B.
     * @param axis The axis the plane is perpendicular with. (0: R, 1:
     * G, 2: B)
     * @return The intersection point of the segment AB with the plane
     * R=coordinate, G=coordinate, or B=coordinate
     */
  }, {
    key: "setCoordinate",
    value: function setCoordinate(source, coordinate, target, axis) {
      var t = HctSolver.intercept(source[axis], coordinate, target[axis]);
      return HctSolver.lerpPoint(source, t, target);
    }
  }, {
    key: "isBounded",
    value: function isBounded(x) {
      return 0.0 <= x && x <= 100.0;
    }
    /**
     * Returns the nth possible vertex of the polygonal intersection.
     *
     * @param y The Y value of the plane.
     * @param n The zero-based index of the point. 0 <= n <= 11.
     * @return The nth possible vertex of the polygonal intersection
     * of the y plane and the RGB cube, in linear RGB coordinates, if
     * it exists. If this possible vertex lies outside of the cube,
     * [-1.0, -1.0, -1.0] is returned.
     */
  }, {
    key: "nthVertex",
    value: function nthVertex(y, n) {
      var kR = HctSolver.Y_FROM_LINRGB[0];
      var kG = HctSolver.Y_FROM_LINRGB[1];
      var kB = HctSolver.Y_FROM_LINRGB[2];
      var coordA = n % 4 <= 1 ? 0.0 : 100.0;
      var coordB = n % 2 === 0 ? 0.0 : 100.0;
      if (n < 4) {
        var g = coordA;
        var b = coordB;
        var r = (y - g * kG - b * kB) / kR;
        if (HctSolver.isBounded(r)) {
          return [r, g, b];
        } else {
          return [-1.0, -1.0, -1.0];
        }
      } else if (n < 8) {
        var _b = coordA;
        var _r = coordB;
        var _g = (y - _r * kR - _b * kB) / kG;
        if (HctSolver.isBounded(_g)) {
          return [_r, _g, _b];
        } else {
          return [-1.0, -1.0, -1.0];
        }
      } else {
        var _r2 = coordA;
        var _g2 = coordB;
        var _b2 = (y - _r2 * kR - _g2 * kG) / kB;
        if (HctSolver.isBounded(_b2)) {
          return [_r2, _g2, _b2];
        } else {
          return [-1.0, -1.0, -1.0];
        }
      }
    }
    /**
     * Finds the segment containing the desired color.
     *
     * @param y The Y value of the color.
     * @param targetHue The hue of the color.
     * @return A list of two sets of linear RGB coordinates, each
     * corresponding to an endpoint of the segment containing the
     * desired color.
     */
  }, {
    key: "bisectToSegment",
    value: function bisectToSegment(y, targetHue) {
      var left = [-1.0, -1.0, -1.0];
      var right = left;
      var leftHue = 0.0;
      var rightHue = 0.0;
      var initialized = false;
      var uncut = true;
      for (var n = 0; n < 12; n++) {
        var mid = HctSolver.nthVertex(y, n);
        if (mid[0] < 0) {
          continue;
        }
        var midHue = HctSolver.hueOf(mid);
        if (!initialized) {
          left = mid;
          right = mid;
          leftHue = midHue;
          rightHue = midHue;
          initialized = true;
          continue;
        }
        if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {
          uncut = false;
          if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
            right = mid;
            rightHue = midHue;
          } else {
            left = mid;
            leftHue = midHue;
          }
        }
      }
      return [left, right];
    }
  }, {
    key: "midpoint",
    value: function midpoint(a, b) {
      return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2, (a[2] + b[2]) / 2];
    }
  }, {
    key: "criticalPlaneBelow",
    value: function criticalPlaneBelow(x) {
      return Math.floor(x - 0.5);
    }
  }, {
    key: "criticalPlaneAbove",
    value: function criticalPlaneAbove(x) {
      return Math.ceil(x - 0.5);
    }
    /**
     * Finds a color with the given Y and hue on the boundary of the
     * cube.
     *
     * @param y The Y value of the color.
     * @param targetHue The hue of the color.
     * @return The desired color, in linear RGB coordinates.
     */
  }, {
    key: "bisectToLimit",
    value: function bisectToLimit(y, targetHue) {
      var segment = HctSolver.bisectToSegment(y, targetHue);
      var left = segment[0];
      var leftHue = HctSolver.hueOf(left);
      var right = segment[1];
      for (var axis = 0; axis < 3; axis++) {
        if (left[axis] !== right[axis]) {
          var lPlane = -1;
          var rPlane = 255;
          if (left[axis] < right[axis]) {
            lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));
            rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));
          } else {
            lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));
            rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));
          }
          for (var i = 0; i < 8; i++) {
            if (Math.abs(rPlane - lPlane) <= 1) {
              break;
            } else {
              var mPlane = Math.floor((lPlane + rPlane) / 2.0);
              var midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];
              var mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);
              var midHue = HctSolver.hueOf(mid);
              if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
                right = mid;
                rPlane = mPlane;
              } else {
                left = mid;
                leftHue = midHue;
                lPlane = mPlane;
              }
            }
          }
        }
      }
      return HctSolver.midpoint(left, right);
    }
  }, {
    key: "inverseChromaticAdaptation",
    value: function inverseChromaticAdaptation(adapted) {
      var adaptedAbs = Math.abs(adapted);
      var base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));
      return signum(adapted) * Math.pow(base, 1.0 / 0.42);
    }
    /**
     * Finds a color with the given hue, chroma, and Y.
     *
     * @param hueRadians The desired hue in radians.
     * @param chroma The desired chroma.
     * @param y The desired Y.
     * @return The desired color as a hexadecimal integer, if found; 0
     * otherwise.
     */
  }, {
    key: "findResultByJ",
    value: function findResultByJ(hueRadians, chroma, y) {
      // Initial estimate of j.
      var j = Math.sqrt(y) * 11.0;
      // ===========================================================
      // Operations inlined from Cam16 to avoid repeated calculation
      // ===========================================================
      var viewingConditions = ViewingConditions.DEFAULT;
      var tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
      var eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);
      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;
      var hSin = Math.sin(hueRadians);
      var hCos = Math.cos(hueRadians);
      for (var iterationRound = 0; iterationRound < 5; iterationRound++) {
        // ===========================================================
        // Operations inlined from Cam16 to avoid repeated calculation
        // ===========================================================
        var jNormalized = j / 100.0;
        var alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);
        var t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);
        var ac = viewingConditions.aw * Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);
        var p2 = ac / viewingConditions.nbb;
        var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);
        var a = gamma * hCos;
        var b = gamma * hSin;
        var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;
        var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;
        var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;
        var rCScaled = HctSolver.inverseChromaticAdaptation(rA);
        var gCScaled = HctSolver.inverseChromaticAdaptation(gA);
        var bCScaled = HctSolver.inverseChromaticAdaptation(bA);
        var linrgb = matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);
        // ===========================================================
        // Operations inlined from Cam16 to avoid repeated calculation
        // ===========================================================
        if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {
          return 0;
        }
        var kR = HctSolver.Y_FROM_LINRGB[0];
        var kG = HctSolver.Y_FROM_LINRGB[1];
        var kB = HctSolver.Y_FROM_LINRGB[2];
        var fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];
        if (fnj <= 0) {
          return 0;
        }
        if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {
          if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {
            return 0;
          }
          return argbFromLinrgb(linrgb);
        }
        // Iterates with Newton method,
        // Using 2 * fn(j) / j as the approximation of fn'(j)
        j = j - (fnj - y) * j / (2 * fnj);
      }
      return 0;
    }
    /**
     * Finds an sRGB color with the given hue, chroma, and L*, if
     * possible.
     *
     * @param hueDegrees The desired hue, in degrees.
     * @param chroma The desired chroma.
     * @param lstar The desired L*.
     * @return A hexadecimal representing the sRGB color. The color
     * has sufficiently close hue, chroma, and L* to the desired
     * values, if possible; otherwise, the hue and L* will be
     * sufficiently close, and chroma will be maximized.
     */
  }, {
    key: "solveToInt",
    value: function solveToInt(hueDegrees, chroma, lstar) {
      if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {
        return argbFromLstar(lstar);
      }
      hueDegrees = sanitizeDegreesDouble(hueDegrees);
      var hueRadians = hueDegrees / 180 * Math.PI;
      var y = yFromLstar(lstar);
      var exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);
      if (exactAnswer !== 0) {
        return exactAnswer;
      }
      var linrgb = HctSolver.bisectToLimit(y, hueRadians);
      return argbFromLinrgb(linrgb);
    }
    /**
     * Finds an sRGB color with the given hue, chroma, and L*, if
     * possible.
     *
     * @param hueDegrees The desired hue, in degrees.
     * @param chroma The desired chroma.
     * @param lstar The desired L*.
     * @return An CAM16 object representing the sRGB color. The color
     * has sufficiently close hue, chroma, and L* to the desired
     * values, if possible; otherwise, the hue and L* will be
     * sufficiently close, and chroma will be maximized.
     */
  }, {
    key: "solveToCam",
    value: function solveToCam(hueDegrees, chroma, lstar) {
      return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));
    }
  }]);
  return HctSolver;
}();
_defineProperty(HctSolver, "SCALED_DISCOUNT_FROM_LINRGB", [[0.001200833568784504, 0.002389694492170889, 0.0002795742885861124], [0.0005891086651375999, 0.0029785502573438758, 0.0003270666104008398], [0.00010146692491640572, 0.0005364214359186694, 0.0032979401770712076]]);
_defineProperty(HctSolver, "LINRGB_FROM_SCALED_DISCOUNT", [[1373.2198709594231, -1100.4251190754821, -7.278681089101213], [-271.815969077903, 559.6580465940733, -32.46047482791194], [1.9622899599665666, -57.173814538844006, 308.7233197812385]]);
_defineProperty(HctSolver, "Y_FROM_LINRGB", [0.2126, 0.7152, 0.0722]);
_defineProperty(HctSolver, "CRITICAL_PLANES", [0.015176349177441876, 0.045529047532325624, 0.07588174588720938, 0.10623444424209313, 0.13658714259697685, 0.16693984095186062, 0.19729253930674434, 0.2276452376616281, 0.2579979360165119, 0.28835063437139563, 0.3188300904430532, 0.350925934958123, 0.3848314933096426, 0.42057480301049466, 0.458183274052838, 0.4976837250274023, 0.5391024159806381, 0.5824650784040898, 0.6277969426914107, 0.6751227633498623, 0.7244668422128921, 0.775853049866786, 0.829304845476233, 0.8848452951698498, 0.942497089126609, 1.0022825574869039, 1.0642236851973577, 1.1283421258858297, 1.1946592148522128, 1.2631959812511864, 1.3339731595349034, 1.407011200216447, 1.4823302800086415, 1.5599503113873272, 1.6398909516233677, 1.7221716113234105, 1.8068114625156377, 1.8938294463134073, 1.9832442801866852, 2.075074464868551, 2.1693382909216234, 2.2660538449872063, 2.36523901573795, 2.4669114995532007, 2.5710888059345764, 2.6777882626779785, 2.7870270208169257, 2.898822059350997, 3.0131901897720907, 3.1301480604002863, 3.2497121605402226, 3.3718988244681087, 3.4967242352587946, 3.624204428461639, 3.754355295633311, 3.887192587735158, 4.022731918402185, 4.160988767090289, 4.301978482107941, 4.445716283538092, 4.592217266055746, 4.741496401646282, 4.893568542229298, 5.048448422192488, 5.20615066083972, 5.3666897647573375, 5.5300801301023865, 5.696336044816294, 5.865471690767354, 6.037501145825082, 6.212438385869475, 6.390297286737924, 6.571091626112461, 6.7548350853498045, 6.941541251256611, 7.131223617812143, 7.323895587840543, 7.5195704746346665, 7.7182615035334345, 7.919981813454504, 8.124744458384042, 8.332562408825165, 8.543448553206703, 8.757415699253682, 8.974476575321063, 9.194643831691977, 9.417930041841839, 9.644347703669503, 9.873909240696694, 10.106627003236781, 10.342513269534024, 10.58158024687427, 10.8238400726681, 11.069304815507364, 11.317986476196008, 11.569896988756009, 11.825048221409341, 12.083451977536606, 12.345119996613247, 12.610063955123938, 12.878295467455942, 13.149826086772048, 13.42466730586372, 13.702830557985108, 13.984327217668513, 14.269168601521828, 14.55736596900856, 14.848930523210871, 15.143873411576273, 15.44220572664832, 15.743938506781891, 16.04908273684337, 16.35764934889634, 16.66964922287304, 16.985093187232053, 17.30399201960269, 17.62635644741625, 17.95219714852476, 18.281524751807332, 18.614349837764564, 18.95068293910138, 19.290534541298456, 19.633915083172692, 19.98083495742689, 20.331304511189067, 20.685334046541502, 21.042933821039977, 21.404114048223256, 21.76888489811322, 22.137256497705877, 22.50923893145328, 22.884842241736916, 23.264076429332462, 23.6469514538663, 24.033477234264016, 24.42366364919083, 24.817520537484558, 25.21505769858089, 25.61628489293138, 26.021211842414342, 26.429848230738664, 26.842203703840827, 27.258287870275353, 27.678110301598522, 28.10168053274597, 28.529008062403893, 28.96010235337422, 29.39497283293396, 29.83362889318845, 30.276079891419332, 30.722335150426627, 31.172403958865512, 31.62629557157785, 32.08401920991837, 32.54558406207592, 33.010999283389665, 33.4802739966603, 33.953417292456834, 34.430438229418264, 34.911345834551085, 35.39614910352207, 35.88485700094671, 36.37747846067349, 36.87402238606382, 37.37449765026789, 37.87891309649659, 38.38727753828926, 38.89959975977785, 39.41588851594697, 39.93615253289054, 40.460400508064545, 40.98864111053629, 41.520882981230194, 42.05713473317016, 42.597404951718396, 43.141702194811224, 43.6900349931913, 44.24241185063697, 44.798841244188324, 45.35933162437017, 45.92389141541209, 46.49252901546552, 47.065252796817916, 47.64207110610409, 48.22299226451468, 48.808024568002054, 49.3971762874833, 49.9904556690408, 50.587870934119984, 51.189430279724725, 51.79514187861014, 52.40501387947288, 53.0190544071392, 53.637271562750364, 54.259673423945976, 54.88626804504493, 55.517063457223934, 56.15206766869424, 56.79128866487574, 57.43473440856916, 58.08241284012621, 58.734331877617365, 59.39049941699807, 60.05092333227251, 60.715611475655585, 61.38457167773311, 62.057811747619894, 62.7353394731159, 63.417162620860914, 64.10328893648692, 64.79372614476921, 65.48848194977529, 66.18756403501224, 66.89098006357258, 67.59873767827808, 68.31084450182222, 69.02730813691093, 69.74813616640164, 70.47333615344107, 71.20291564160104, 71.93688215501312, 72.67524319850172, 73.41800625771542, 74.16517879925733, 74.9167682708136, 75.67278210128072, 76.43322770089146, 77.1981124613393, 77.96744375590167, 78.74122893956174, 79.51947534912904, 80.30219030335869, 81.08938110306934, 81.88105503125999, 82.67721935322541, 83.4778813166706, 84.28304815182372, 85.09272707154808, 85.90692527145302, 86.72564993000343, 87.54890820862819, 88.3767072518277, 89.2090541872801, 90.04595612594655, 90.88742016217518, 91.73345337380438, 92.58406282226491, 93.43925555268066, 94.29903859396902, 95.16341895893969, 96.03240364439274, 96.9059996312159, 97.78421388448044, 98.6670533535366, 99.55452497210776]);

/**
 * HCT, hue, chroma, and tone. A color system that provides a perceptually
 * accurate color measurement system that can also accurately render what colors
 * will appear as in different lighting environments.
 */
var Hct = /*#__PURE__*/function () {
  function Hct(argb) {
    _classCallCheck(this, Hct);
    this.argb = argb;
    var cam = Cam16.fromInt(argb);
    this.internalHue = cam.hue;
    this.internalChroma = cam.chroma;
    this.internalTone = lstarFromArgb(argb);
    this.argb = argb;
  }
  _createClass(Hct, [{
    key: "toInt",
    value: function toInt() {
      return this.argb;
    }
    /**
     * A number, in degrees, representing ex. red, orange, yellow, etc.
     * Ranges from 0 <= hue < 360.
     */
  }, {
    key: "hue",
    get: function get() {
      return this.internalHue;
    }
    /**
     * @param newHue 0 <= newHue < 360; invalid values are corrected.
     * Chroma may decrease because chroma has a different maximum for any given
     * hue and tone.
     */,
    set: function set(newHue) {
      this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));
    }
  }, {
    key: "chroma",
    get: function get() {
      return this.internalChroma;
    }
    /**
     * @param newChroma 0 <= newChroma < ?
     * Chroma may decrease because chroma has a different maximum for any given
     * hue and tone.
     */,
    set: function set(newChroma) {
      this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));
    }
    /** Lightness. Ranges from 0 to 100. */
  }, {
    key: "tone",
    get: function get() {
      return this.internalTone;
    }
    /**
     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.
     * Chroma may decrease because chroma has a different maximum for any given
     * hue and tone.
     */,
    set: function set(newTone) {
      this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));
    }
  }, {
    key: "setInternalState",
    value: function setInternalState(argb) {
      var cam = Cam16.fromInt(argb);
      this.internalHue = cam.hue;
      this.internalChroma = cam.chroma;
      this.internalTone = lstarFromArgb(argb);
      this.argb = argb;
    }
    /**
     * Translates a color into different [ViewingConditions].
     *
     * Colors change appearance. They look different with lights on versus off,
     * the same color, as in hex code, on white looks different when on black.
     * This is called color relativity, most famously explicated by Josef Albers
     * in Interaction of Color.
     *
     * In color science, color appearance models can account for this and
     * calculate the appearance of a color in different settings. HCT is based on
     * CAM16, a color appearance model, and uses it to make these calculations.
     *
     * See [ViewingConditions.make] for parameters affecting color appearance.
     */
  }, {
    key: "inViewingConditions",
    value: function inViewingConditions(vc) {
      // 1. Use CAM16 to find XYZ coordinates of color in specified VC.
      var cam = Cam16.fromInt(this.toInt());
      var viewedInVc = cam.xyzInViewingConditions(vc);
      // 2. Create CAM16 of those XYZ coordinates in default VC.
      var recastInVc = Cam16.fromXyzInViewingConditions(viewedInVc[0], viewedInVc[1], viewedInVc[2], ViewingConditions.make());
      // 3. Create HCT from:
      // - CAM16 using default VC with XYZ coordinates in specified VC.
      // - L* converted from Y in XYZ coordinates in specified VC.
      var recastHct = Hct.from(recastInVc.hue, recastInVc.chroma, lstarFromY(viewedInVc[1]));
      return recastHct;
    }
  }], [{
    key: "from",
    value:
    /**
     * @param hue 0 <= hue < 360; invalid values are corrected.
     * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color
     *     returned may be lower than the requested chroma. Chroma has a different
     *     maximum for any given hue and tone.
     * @param tone 0 <= tone <= 100; invalid values are corrected.
     * @return HCT representation of a color in default viewing conditions.
     */

    function from(hue, chroma, tone) {
      return new Hct(HctSolver.solveToInt(hue, chroma, tone));
    }
    /**
     * @param argb ARGB representation of a color.
     * @return HCT representation of a color in default viewing conditions
     */
  }, {
    key: "fromInt",
    value: function fromInt(argb) {
      return new Hct(argb);
    }
  }]);
  return Hct;
}();

// material_color_utilities is designed to have a consistent API across
// platforms and modular components that can be moved around easily. Using a
// class as a namespace facilitates this.
//
// tslint:disable:class-as-namespace
/**
 * Functions for blending in HCT and CAM16.
 */
var Blend = /*#__PURE__*/function () {
  function Blend() {
    _classCallCheck(this, Blend);
  }
  _createClass(Blend, null, [{
    key: "harmonize",
    value:
    /**
     * Blend the design color's HCT hue towards the key color's HCT
     * hue, in a way that leaves the original color recognizable and
     * recognizably shifted towards the key color.
     *
     * @param designColor ARGB representation of an arbitrary color.
     * @param sourceColor ARGB representation of the main theme color.
     * @return The design color with a hue shifted towards the
     * system's color, a slightly warmer/cooler variant of the design
     * color's hue.
     */
    function harmonize(designColor, sourceColor) {
      var fromHct = Hct.fromInt(designColor);
      var toHct = Hct.fromInt(sourceColor);
      var differenceDegrees$1 = differenceDegrees(fromHct.hue, toHct.hue);
      var rotationDegrees = Math.min(differenceDegrees$1 * 0.5, 15.0);
      var outputHue = sanitizeDegreesDouble(fromHct.hue + rotationDegrees * rotationDirection(fromHct.hue, toHct.hue));
      return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();
    }
    /**
     * Blends hue from one color into another. The chroma and tone of
     * the original color are maintained.
     *
     * @param from ARGB representation of color
     * @param to ARGB representation of color
     * @param amount how much blending to perform; 0.0 >= and <= 1.0
     * @return from, with a hue blended towards to. Chroma and tone
     * are constant.
     */
  }, {
    key: "hctHue",
    value: function hctHue(from, to, amount) {
      var ucs = Blend.cam16Ucs(from, to, amount);
      var ucsCam = Cam16.fromInt(ucs);
      var fromCam = Cam16.fromInt(from);
      var blended = Hct.from(ucsCam.hue, fromCam.chroma, lstarFromArgb(from));
      return blended.toInt();
    }
    /**
     * Blend in CAM16-UCS space.
     *
     * @param from ARGB representation of color
     * @param to ARGB representation of color
     * @param amount how much blending to perform; 0.0 >= and <= 1.0
     * @return from, blended towards to. Hue, chroma, and tone will
     * change.
     */
  }, {
    key: "cam16Ucs",
    value: function cam16Ucs(from, to, amount) {
      var fromCam = Cam16.fromInt(from);
      var toCam = Cam16.fromInt(to);
      var fromJ = fromCam.jstar;
      var fromA = fromCam.astar;
      var fromB = fromCam.bstar;
      var toJ = toCam.jstar;
      var toA = toCam.astar;
      var toB = toCam.bstar;
      var jstar = fromJ + (toJ - fromJ) * amount;
      var astar = fromA + (toA - fromA) * amount;
      var bstar = fromB + (toB - fromB) * amount;
      return Cam16.fromUcs(jstar, astar, bstar).toInt();
    }
  }]);
  return Blend;
}();

/**
 * Utility methods for calculating contrast given two colors, or calculating a
 * color given one color and a contrast ratio.
 *
 * Contrast ratio is calculated using XYZ's Y. When linearized to match human
 * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the
 * lightness of a color.
 *
 * Methods refer to tone, T in the the HCT color space.
 * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color
 * space.
 */
var Contrast = /*#__PURE__*/function () {
  function Contrast() {
    _classCallCheck(this, Contrast);
  }
  _createClass(Contrast, null, [{
    key: "ratioOfTones",
    value:
    /**
     * Returns a contrast ratio, which ranges from 1 to 21.
     *
     * @param toneA Tone between 0 and 100. Values outside will be clamped.
     * @param toneB Tone between 0 and 100. Values outside will be clamped.
     */
    function ratioOfTones(toneA, toneB) {
      toneA = clampDouble(0.0, 100.0, toneA);
      toneB = clampDouble(0.0, 100.0, toneB);
      return Contrast.ratioOfYs(yFromLstar(toneA), yFromLstar(toneB));
    }
  }, {
    key: "ratioOfYs",
    value: function ratioOfYs(y1, y2) {
      var lighter = y1 > y2 ? y1 : y2;
      var darker = lighter === y2 ? y1 : y2;
      return (lighter + 5.0) / (darker + 5.0);
    }
    /**
     * Returns a tone >= tone parameter that ensures ratio parameter.
     * Return value is between 0 and 100.
     * Returns -1 if ratio cannot be achieved with tone parameter.
     *
     * @param tone Tone return value must contrast with.
     * Range is 0 to 100. Invalid values will result in -1 being returned.
     * @param ratio Contrast ratio of return value and tone.
     * Range is 1 to 21, invalid values have undefined behavior.
     */
  }, {
    key: "lighter",
    value: function lighter(tone, ratio) {
      if (tone < 0.0 || tone > 100.0) {
        return -1.0;
      }
      var darkY = yFromLstar(tone);
      var lightY = ratio * (darkY + 5.0) - 5.0;
      var realContrast = Contrast.ratioOfYs(lightY, darkY);
      var delta = Math.abs(realContrast - ratio);
      if (realContrast < ratio && delta > 0.04) {
        return -1;
      }
      // Ensure gamut mapping, which requires a 'range' on tone, will still result
      // the correct ratio by darkening slightly.
      var returnValue = lstarFromY(lightY) + 0.4;
      if (returnValue < 0 || returnValue > 100) {
        return -1;
      }
      return returnValue;
    }
    /**
     * Returns a tone <= tone parameter that ensures ratio parameter.
     * Return value is between 0 and 100.
     * Returns -1 if ratio cannot be achieved with tone parameter.
     *
     * @param tone Tone return value must contrast with.
     * Range is 0 to 100. Invalid values will result in -1 being returned.
     * @param ratio Contrast ratio of return value and tone.
     * Range is 1 to 21, invalid values have undefined behavior.
     */
  }, {
    key: "darker",
    value: function darker(tone, ratio) {
      if (tone < 0.0 || tone > 100.0) {
        return -1.0;
      }
      var lightY = yFromLstar(tone);
      var darkY = (lightY + 5.0) / ratio - 5.0;
      var realContrast = Contrast.ratioOfYs(lightY, darkY);
      var delta = Math.abs(realContrast - ratio);
      if (realContrast < ratio && delta > 0.04) {
        return -1;
      }
      // Ensure gamut mapping, which requires a 'range' on tone, will still result
      // the correct ratio by darkening slightly.
      var returnValue = lstarFromY(darkY) - 0.4;
      if (returnValue < 0 || returnValue > 100) {
        return -1;
      }
      return returnValue;
    }
    /**
     * Returns a tone >= tone parameter that ensures ratio parameter.
     * Return value is between 0 and 100.
     * Returns 100 if ratio cannot be achieved with tone parameter.
     *
     * This method is unsafe because the returned value is guaranteed to be in
     * bounds for tone, i.e. between 0 and 100. However, that value may not reach
     * the ratio with tone. For example, there is no color lighter than T100.
     *
     * @param tone Tone return value must contrast with.
     * Range is 0 to 100. Invalid values will result in 100 being returned.
     * @param ratio Desired contrast ratio of return value and tone parameter.
     * Range is 1 to 21, invalid values have undefined behavior.
     */
  }, {
    key: "lighterUnsafe",
    value: function lighterUnsafe(tone, ratio) {
      var lighterSafe = Contrast.lighter(tone, ratio);
      return lighterSafe < 0.0 ? 100.0 : lighterSafe;
    }
    /**
     * Returns a tone >= tone parameter that ensures ratio parameter.
     * Return value is between 0 and 100.
     * Returns 100 if ratio cannot be achieved with tone parameter.
     *
     * This method is unsafe because the returned value is guaranteed to be in
     * bounds for tone, i.e. between 0 and 100. However, that value may not reach
     * the [ratio with [tone]. For example, there is no color darker than T0.
     *
     * @param tone Tone return value must contrast with.
     * Range is 0 to 100. Invalid values will result in 0 being returned.
     * @param ratio Desired contrast ratio of return value and tone parameter.
     * Range is 1 to 21, invalid values have undefined behavior.
     */
  }, {
    key: "darkerUnsafe",
    value: function darkerUnsafe(tone, ratio) {
      var darkerSafe = Contrast.darker(tone, ratio);
      return darkerSafe < 0.0 ? 0.0 : darkerSafe;
    }
  }]);
  return Contrast;
}();

// material_color_utilities is designed to have a consistent API across
// platforms and modular components that can be moved around easily. Using a
// class as a namespace facilitates this.
//
// tslint:disable:class-as-namespace
/**
 * Check and/or fix universally disliked colors.
 * Color science studies of color preference indicate universal distaste for
 * dark yellow-greens, and also show this is correlated to distate for
 * biological waste and rotting food.
 *
 * See Palmer and Schloss, 2010 or Schloss and Palmer's Chapter 21 in Handbook
 * of Color Psychology (2015).
 */
var DislikeAnalyzer = /*#__PURE__*/function () {
  function DislikeAnalyzer() {
    _classCallCheck(this, DislikeAnalyzer);
  }
  _createClass(DislikeAnalyzer, null, [{
    key: "isDisliked",
    value:
    /**
     * Returns true if a color is disliked.
     *
     * @param hct A color to be judged.
     * @return Whether the color is disliked.
     *
     * Disliked is defined as a dark yellow-green that is not neutral.
     */
    function isDisliked(hct) {
      var huePasses = Math.round(hct.hue) >= 90.0 && Math.round(hct.hue) <= 111.0;
      var chromaPasses = Math.round(hct.chroma) > 16.0;
      var tonePasses = Math.round(hct.tone) < 65.0;
      return huePasses && chromaPasses && tonePasses;
    }
    /**
     * If a color is disliked, lighten it to make it likable.
     *
     * @param hct A color to be judged.
     * @return A new color if the original color is disliked, or the original
     *   color if it is acceptable.
     */
  }, {
    key: "fixIfDisliked",
    value: function fixIfDisliked(hct) {
      if (DislikeAnalyzer.isDisliked(hct)) {
        return Hct.from(hct.hue, hct.chroma, 70.0);
      }
      return hct;
    }
  }]);
  return DislikeAnalyzer;
}();

var toString$1 = {}.toString;
var _cof = function (it) {
  return toString$1.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof$5 = _cof;
// eslint-disable-next-line no-prototype-builtins
var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof$5(it) == 'String' ? it.split('') : Object(it);
};

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject$1 = _iobject;
var defined$6 = _defined;
var _toIobject = function (it) {
  return IObject$1(defined$6(it));
};

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor$1 = Math.floor;
var _toInteger = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor$1 : ceil)(it);
};

// 7.1.15 ToLength
var toInteger$3 = _toInteger;
var min$2 = Math.min;
var _toLength = function (it) {
  return it > 0 ? min$2(toInteger$3(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var toInteger$2 = _toInteger;
var max$1 = Math.max;
var min$1 = Math.min;
var _toAbsoluteIndex = function (index, length) {
  index = toInteger$2(index);
  return index < 0 ? max$1(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes
var toIObject$5 = _toIobject;
var toLength$7 = _toLength;
var toAbsoluteIndex$1 = _toAbsoluteIndex;
var _arrayIncludes = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject$5($this);
    var length = toLength$7(O.length);
    var index = toAbsoluteIndex$1(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    }
    return !IS_INCLUDES && -1;
  };
};

var shared$1 = _shared.exports('keys');
var uid$2 = _uid;
var _sharedKey = function (key) {
  return shared$1[key] || (shared$1[key] = uid$2(key));
};

var has$5 = _has;
var toIObject$4 = _toIobject;
var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO$2 = _sharedKey('IE_PROTO');
var _objectKeysInternal = function (object, names) {
  var O = toIObject$4(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO$2) has$5(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has$5(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys$3 = _objectKeysInternal;
var enumBugKeys$1 = _enumBugKeys;
var _objectKeys = Object.keys || function keys(O) {
  return $keys$3(O, enumBugKeys$1);
};

var dP$6 = _objectDp;
var anObject$c = _anObject;
var getKeys$3 = _objectKeys;
var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$c(O);
  var keys = getKeys$3(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP$6.f(O, P = keys[i++], Properties[P]);
  return O;
};

var _html;
var hasRequired_html;

function require_html () {
	if (hasRequired_html) return _html;
	hasRequired_html = 1;
	var document = _global.exports.document;
	_html = document && document.documentElement;
	return _html;
}

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject$b = _anObject;
var dPs = _objectDps;
var enumBugKeys = _enumBugKeys;
var IE_PROTO$1 = _sharedKey('IE_PROTO');
var Empty = function () {/* empty */};
var PROTOTYPE$1 = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require_domCreate()('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require_html().appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE$1][enumBugKeys[i]];
  return createDict();
};
var _objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = anObject$b(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

var redefine$5 = _redefine.exports;
var _redefineAll = function (target, src, safe) {
  for (var key in src) redefine$5(target, key, src[key], safe);
  return target;
};

var _anInstance = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }
  return it;
};

var _forOf = {exports: {}};

// call something on iterator step with safe closing on error
var anObject$a = _anObject;
var _iterCall = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject$a(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject$a(ret.call(iterator));
    throw e;
  }
};

var _iterators = {};

var _wks = {exports: {}};

var store = _shared.exports('wks');
var uid$1 = _uid;
var Symbol$1 = _global.exports.Symbol;
var USE_SYMBOL = typeof Symbol$1 == 'function';
var $exports = _wks.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && Symbol$1[name] || (USE_SYMBOL ? Symbol$1 : uid$1)('Symbol.' + name));
};
$exports.store = store;

// check on default Array iterator
var Iterators$4 = _iterators;
var ITERATOR$4 = _wks.exports('iterator');
var ArrayProto$1 = Array.prototype;
var _isArrayIter = function (it) {
  return it !== undefined && (Iterators$4.Array === it || ArrayProto$1[ITERATOR$4] === it);
};

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof$4 = _cof;
var TAG$1 = _wks.exports('toStringTag');
// ES3 wrong here
var ARG = cof$4(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) {/* empty */}
};
var _classof = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
  // builtinTag case
  : ARG ? cof$4(O)
  // ES3 arguments fallback
  : (B = cof$4(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

var classof$3 = _classof;
var ITERATOR$3 = _wks.exports('iterator');
var Iterators$3 = _iterators;
var core_getIteratorMethod = _core.exports.getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR$3] || it['@@iterator'] || Iterators$3[classof$3(it)];
};

var ctx$5 = _ctx;
var call$1 = _iterCall;
var isArrayIter$1 = _isArrayIter;
var anObject$9 = _anObject;
var toLength$6 = _toLength;
var getIterFn$1 = core_getIteratorMethod;
var BREAK = {};
var RETURN = {};
var exports$1 = _forOf.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn$1(iterable);
  var f = ctx$5(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter$1(iterFn)) for (length = toLength$6(iterable.length); length > index; index++) {
    result = entries ? f(anObject$9(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call$1(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports$1.BREAK = BREAK;
exports$1.RETURN = RETURN;

var def = _objectDp.f;
var has$4 = _has;
var TAG = _wks.exports('toStringTag');
var _setToStringTag = function (it, tag, stat) {
  if (it && !has$4(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
    configurable: true,
    value: tag
  });
};

var create$1 = _objectCreate;
var descriptor = _propertyDesc;
var setToStringTag$3 = _setToStringTag;
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks.exports('iterator'), function () {
  return this;
});
var _iterCreate = function (Constructor, NAME, next) {
  Constructor.prototype = create$1(IteratorPrototype, {
    next: descriptor(1, next)
  });
  setToStringTag$3(Constructor, NAME + ' Iterator');
};

// 7.1.13 ToObject(argument)
var defined$5 = _defined;
var _toObject = function (it) {
  return Object(defined$5(it));
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has$3 = _has;
var toObject$7 = _toObject;
var IE_PROTO = _sharedKey('IE_PROTO');
var ObjectProto$1 = Object.prototype;
var _objectGpo = Object.getPrototypeOf || function (O) {
  O = toObject$7(O);
  if (has$3(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }
  return O instanceof Object ? ObjectProto$1 : null;
};

var $export$h = _export;
var redefine$4 = _redefine.exports;
var hide$2 = _hide;
var Iterators$2 = _iterators;
var $iterCreate = _iterCreate;
var setToStringTag$2 = _setToStringTag;
var getPrototypeOf = _objectGpo;
var ITERATOR$2 = _wks.exports('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';
var returnThis = function () {
  return this;
};
var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }
    return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR$2] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag$2(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (typeof IteratorPrototype[ITERATOR$2] != 'function') hide$2(IteratorPrototype, ITERATOR$2, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if ((BUGGY || VALUES_BUG || !proto[ITERATOR$2])) {
    hide$2(proto, ITERATOR$2, $default);
  }
  // Plug for library
  Iterators$2[NAME] = $default;
  Iterators$2[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine$4(proto, key, methods[key]);
    } else $export$h($export$h.P + $export$h.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

var _iterStep = function (done, value) {
  return {
    value: value,
    done: !!done
  };
};

var global$a = _global.exports;
var dP$5 = _objectDp;
var DESCRIPTORS$4 = _descriptors;
var SPECIES$3 = _wks.exports('species');
var _setSpecies = function (KEY) {
  var C = global$a[KEY];
  if (DESCRIPTORS$4 && C && !C[SPECIES$3]) dP$5.f(C, SPECIES$3, {
    configurable: true,
    get: function () {
      return this;
    }
  });
};

var _meta = {exports: {}};

var META$1 = _uid('meta');
var isObject$9 = _isObject$1;
var has$2 = _has;
var setDesc = _objectDp.f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !_fails(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META$1, {
    value: {
      i: 'O' + ++id,
      // object ID
      w: {} // weak collections IDs
    }
  });
};

var fastKey$1 = function (it, create) {
  // return primitive with prefix
  if (!isObject$9(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has$2(it, META$1)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
    // return object ID
  }
  return it[META$1].i;
};
var getWeak = function (it, create) {
  if (!has$2(it, META$1)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
    // return hash weak collections IDs
  }
  return it[META$1].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta$1.NEED && isExtensible(it) && !has$2(it, META$1)) setMeta(it);
  return it;
};
var meta$1 = _meta.exports = {
  KEY: META$1,
  NEED: false,
  fastKey: fastKey$1,
  getWeak: getWeak,
  onFreeze: onFreeze
};

var isObject$8 = _isObject$1;
var _validateCollection = function (it, TYPE) {
  if (!isObject$8(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

var dP$4 = _objectDp.f;
var create = _objectCreate;
var redefineAll$1 = _redefineAll;
var ctx$4 = _ctx;
var anInstance$2 = _anInstance;
var forOf$2 = _forOf.exports;
var $iterDefine = _iterDefine;
var step$1 = _iterStep;
var setSpecies = _setSpecies;
var DESCRIPTORS$3 = _descriptors;
var fastKey = _meta.exports.fastKey;
var validate$3 = _validateCollection;
var SIZE = DESCRIPTORS$3 ? '_s' : 'size';
var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};
var _collectionStrong = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance$2(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = create(null); // index
      that._f = undefined; // first entry
      that._l = undefined; // last entry
      that[SIZE] = 0; // size
      if (iterable != undefined) forOf$2(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll$1(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate$3(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate$3(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }
        return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate$3(this, NAME);
        var f = ctx$4(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate$3(this, NAME), key);
      }
    });
    if (DESCRIPTORS$3) dP$4(C.prototype, 'size', {
      get: function () {
        return validate$3(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
      // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true),
        // <- index
        k: key,
        // <- key
        v: value,
        // <- value
        p: prev = that._l,
        // <- previous entry
        n: undefined,
        // <- next entry
        r: false // <- removed
      };

      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    }
    return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate$3(iterated, NAME); // target
      this._k = kind; // kind
      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step$1(1);
      }
      // return step by kind
      if (kind == 'keys') return step$1(0, entry.k);
      if (kind == 'values') return step$1(0, entry.v);
      return step$1(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

var ITERATOR$1 = _wks.exports('iterator');
var SAFE_CLOSING = false;
try {
  var riter = [7][ITERATOR$1]();
  riter['return'] = function () {
    SAFE_CLOSING = true;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {/* empty */}
var _iterDetect = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR$1]();
    iter.next = function () {
      return {
        done: safe = true
      };
    };
    arr[ITERATOR$1] = function () {
      return iter;
    };
    exec(arr);
  } catch (e) {/* empty */}
  return safe;
};

var _objectGopd = {};

var _objectPie = {};

var hasRequired_objectPie;

function require_objectPie () {
	if (hasRequired_objectPie) return _objectPie;
	hasRequired_objectPie = 1;
	_objectPie.f = {}.propertyIsEnumerable;
	return _objectPie;
}

var hasRequired_objectGopd;

function require_objectGopd () {
	if (hasRequired_objectGopd) return _objectGopd;
	hasRequired_objectGopd = 1;
	var pIE = require_objectPie();
	var createDesc = _propertyDesc;
	var toIObject = _toIobject;
	var toPrimitive = _toPrimitive;
	var has = _has;
	var IE8_DOM_DEFINE = _ie8DomDefine;
	var gOPD = Object.getOwnPropertyDescriptor;
	_objectGopd.f = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};
	return _objectGopd;
}

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject$7 = _isObject$1;
var anObject$8 = _anObject;
var check = function (O, proto) {
  anObject$8(O);
  if (!isObject$7(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
var _setProto = {
  set: Object.setPrototypeOf || ('__proto__' in {} ?
  // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = _ctx(Function.call, require_objectGopd().f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }
    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

var isObject$6 = _isObject$1;
var setPrototypeOf = _setProto.set;
var _inheritIfRequired = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject$6(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }
  return that;
};

var global$9 = _global.exports;
var $export$g = _export;
var redefine$3 = _redefine.exports;
var redefineAll = _redefineAll;
var meta = _meta.exports;
var forOf$1 = _forOf.exports;
var anInstance$1 = _anInstance;
var isObject$5 = _isObject$1;
var fails$7 = _fails;
var $iterDetect = _iterDetect;
var setToStringTag$1 = _setToStringTag;
var inheritIfRequired$2 = _inheritIfRequired;
var _collection = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global$9[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine$3(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject$5(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject$5(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject$5(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);
      return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);
      return this;
    });
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails$7(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails$7(function () {
      instance.has(1);
    });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails$7(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance$1(target, C, NAME);
        var that = inheritIfRequired$2(new Base(), target, C);
        if (iterable != undefined) forOf$1(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }
  setToStringTag$1(C, NAME);
  O[NAME] = C;
  $export$g($export$g.G + $export$g.W + $export$g.F * (C != Base), O);
  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
  return C;
};

var strong$1 = _collectionStrong;
var validate$2 = _validateCollection;
var MAP = 'Map';

// 23.1 Map Objects
_collection(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong$1.getEntry(validate$2(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong$1.def(validate$2(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong$1, true);

var toInteger$1 = _toInteger;
var defined$4 = _defined;
// true  -> String#at
// false -> String#codePointAt
var _stringAt = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined$4(that));
    var i = toInteger$1(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

var $at = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return {
    value: undefined,
    done: true
  };
  point = $at(O, index);
  this._i += point.length;
  return {
    value: point,
    done: false
  };
});

// 19.1.3.6 Object.prototype.toString()
var classof$2 = _classof;
var test$1 = {};
test$1[_wks.exports('toStringTag')] = 'z';
if (test$1 + '' != '[object z]') {
  _redefine.exports(Object.prototype, 'toString', function toString() {
    return '[object ' + classof$2(this) + ']';
  }, true);
}

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _wks.exports('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
var _addToUnscopables = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

var addToUnscopables = _addToUnscopables;
var step = _iterStep;
var Iterators$1 = _iterators;
var toIObject$3 = _toIobject;

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
  this._t = toIObject$3(iterated); // target
  this._i = 0; // next index
  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators$1.Arguments = Iterators$1.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

var $iterators = es6_array_iterator;
var getKeys$2 = _objectKeys;
var redefine$2 = _redefine.exports;
var global$8 = _global.exports;
var hide$1 = _hide;
var Iterators = _iterators;
var wks$2 = _wks.exports;
var ITERATOR = wks$2('iterator');
var TO_STRING_TAG = wks$2('toStringTag');
var ArrayValues = Iterators.Array;
var DOMIterables = {
  CSSRuleList: true,
  // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true,
  // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true,
  // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};
for (var collections = getKeys$2(DOMIterables), i$2 = 0; i$2 < collections.length; i$2++) {
  var NAME$1 = collections[i$2];
  var explicit = DOMIterables[NAME$1];
  var Collection = global$8[NAME$1];
  var proto$2 = Collection && Collection.prototype;
  var key$1;
  if (proto$2) {
    if (!proto$2[ITERATOR]) hide$1(proto$2, ITERATOR, ArrayValues);
    if (!proto$2[TO_STRING_TAG]) hide$1(proto$2, TO_STRING_TAG, NAME$1);
    Iterators[NAME$1] = ArrayValues;
    if (explicit) for (key$1 in $iterators) if (!proto$2[key$1]) redefine$2(proto$2, key$1, $iterators[key$1], true);
  }
}

/**
 * A color that adjusts itself based on UI state provided by DynamicScheme.
 *
 * Colors without backgrounds do not change tone when contrast changes. Colors
 * with backgrounds become closer to their background as contrast lowers, and
 * further when contrast increases.
 *
 * Prefer static constructors. They require either a hexcode, a palette and
 * tone, or a hue and chroma. Optionally, they can provide a background
 * DynamicColor.
 */
var DynamicColor = /*#__PURE__*/function () {
  /**
   * The base constructor for DynamicColor.
   *
   * _Strongly_ prefer using one of the convenience constructors. This class is
   * arguably too flexible to ensure it can support any scenario. Functional
   * arguments allow  overriding without risks that come with subclasses.
   *
   * For example, the default behavior of adjust tone at max contrast
   * to be at a 7.0 ratio with its background is principled and
   * matches accessibility guidance. That does not mean it's the desired
   * approach for _every_ design system, and every color pairing,
   * always, in every case.
   *
   * @param hue given DynamicScheme, return the hue in HCT of the output
   * color.
   * @param chroma given DynamicScheme, return chroma in HCT of the output
   * color.
   * @param tone given DynamicScheme, return tone in HCT of the output color.
   * This tone is used for standard contrast.
   * @param toneMinContrast given DynamicScheme, return tone in HCT this color
   * should be at minimum contrast. See toneMinContrastDefault for the default
   * behavior, and strongly consider using it unless you have strong opinions
   * on color and accessibility. The convenience constructors use it.
   * @param toneMaxContrast given DynamicScheme, return tone in HCT this color
   * should be at maximum contrast. See toneMaxContrastDefault for the default
   * behavior, and strongly consider using it unless you have strong opinions
   * on color and accessibility. The convenience constructors use it.
   * @param background given DynamicScheme, return the DynamicColor that is
   * the background of this DynamicColor. When this is provided,
   * automated adjustments to lower and raise contrast are made.
   * @param toneDeltaConstraint given DynamicScheme, return a
   * ToneDeltaConstraint that describes a requirement that this
   * DynamicColor must always have some difference in tone from another
   * DynamicColor.
   *
   * Unlikely to be useful unless a design system has some distortions
   * where colors that don't have a background/foreground relationship
   * don't want to have a formal relationship or a principled value for their
   * tone distance based on common contrast / tone delta values, yet, want
   * tone distance.
   */
  function DynamicColor(hue, chroma, tone, toneMinContrast, toneMaxContrast, background, toneDeltaConstraint) {
    _classCallCheck(this, DynamicColor);
    _defineProperty(this, "hctCache", new Map());
    this.hue = hue;
    this.chroma = chroma;
    this.tone = tone;
    this.toneMinContrast = toneMinContrast;
    this.toneMaxContrast = toneMaxContrast;
    this.background = background;
    this.toneDeltaConstraint = toneDeltaConstraint;
  }
  /**
   * Return a ARGB integer (i.e. a hex code).
   *
   * @param scheme Defines the conditions of the user interface, for example,
   * whether or not it is dark mode or light mode, and what the desired
   * contrast level is.
   */
  _createClass(DynamicColor, [{
    key: "getArgb",
    value: function getArgb(scheme) {
      return this.getHct(scheme).toInt();
    }
    /**
     * Return a color, expressed in the HCT color space, that this
     * DynamicColor is under the conditions in scheme.
     *
     * @param scheme Defines the conditions of the user interface, for example,
     * whether or not it is dark mode or light mode, and what the desired
     * contrast level is.
     */
  }, {
    key: "getHct",
    value: function getHct(scheme) {
      var cachedAnswer = this.hctCache.get(scheme);
      if (cachedAnswer != null) {
        return cachedAnswer;
      }
      var answer = Hct.from(this.hue(scheme), this.chroma(scheme), this.getTone(scheme));
      if (this.hctCache.size > 4) {
        this.hctCache.clear();
      }
      this.hctCache.set(scheme, answer);
      return answer;
    }
    /**
     * Return a tone, T in the HCT color space, that this DynamicColor is under
     * the conditions in scheme.
     *
     * @param scheme Defines the conditions of the user interface, for example,
     * whether or not it is dark mode or light mode, and what the desired
     * contrast level is.
     */
  }, {
    key: "getTone",
    value: function getTone(scheme) {
      var _this$background;
      var answer = this.tone(scheme);
      var decreasingContrast = scheme.contrastLevel < 0.0;
      if (scheme.contrastLevel !== 0.0) {
        var startTone = this.tone(scheme);
        var endTone = decreasingContrast ? this.toneMinContrast(scheme) : this.toneMaxContrast(scheme);
        var delta = (endTone - startTone) * Math.abs(scheme.contrastLevel);
        answer = delta + startTone;
      }
      var bg = (_this$background = this.background) === null || _this$background === void 0 ? void 0 : _this$background.call(this, scheme);
      var standardRatio;
      var _minRatio;
      var _maxRatio;
      if (bg != null) {
        var _bg$background;
        var bgHasBg = (bg === null || bg === void 0 ? void 0 : (_bg$background = bg.background) === null || _bg$background === void 0 ? void 0 : _bg$background.call(bg, scheme)) != null;
        standardRatio = Contrast.ratioOfTones(this.tone(scheme), bg.tone(scheme));
        if (decreasingContrast) {
          var minContrastRatio = Contrast.ratioOfTones(this.toneMinContrast(scheme), bg.toneMinContrast(scheme));
          _minRatio = bgHasBg ? minContrastRatio : null;
          _maxRatio = standardRatio;
        } else {
          var maxContrastRatio = Contrast.ratioOfTones(this.toneMaxContrast(scheme), bg.toneMaxContrast(scheme));
          _minRatio = bgHasBg ? Math.min(maxContrastRatio, standardRatio) : null;
          _maxRatio = bgHasBg ? Math.max(maxContrastRatio, standardRatio) : null;
        }
      }
      answer = DynamicColor.calculateDynamicTone({
        scheme: scheme,
        toneStandard: this.tone,
        toneToJudge: function toneToJudge(c) {
          return c.getTone(scheme);
        },
        desiredTone: function desiredTone(_s, _t) {
          return answer;
        },
        background: bg != null ? function (_s) {
          return bg;
        } : undefined,
        toneDeltaConstraint: this.toneDeltaConstraint,
        minRatio: function minRatio(_s) {
          var _minRatio2;
          return (_minRatio2 = _minRatio) !== null && _minRatio2 !== void 0 ? _minRatio2 : 1.0;
        },
        maxRatio: function maxRatio(_s) {
          var _maxRatio2;
          return (_maxRatio2 = _maxRatio) !== null && _maxRatio2 !== void 0 ? _maxRatio2 : 21.0;
        }
      });
      return answer;
    }
    /**
     * Enforce a ToneDeltaConstraint between two DynamicColors.
     *
     * @param tone The desired tone of the color.
     * @param toneStandard The tone of the color at standard contrast.
     * @param scheme Defines the conditions of the user interface, for example,
     * whether or not it is dark mode or light mode, and what the desired
     * contrast level is.
     * @param constraintProvider Given a DynamicScheme, return a
     * ToneDeltaConstraint or null.
     * @param toneToDistanceFrom Given a DynamicColor, return a tone that the
     * ToneDeltaConstraint should enforce a delta from.
     */
  }], [{
    key: "fromPalette",
    value:
    /**
     * Create a DynamicColor defined by a TonalPalette and HCT tone.
     *
     * @param args Functions with DynamicScheme as input. Must provide a palette
     * and tone. May provide a background DynamicColor and ToneDeltaConstraint.
     */
    function fromPalette(args) {
      return new DynamicColor(function (scheme) {
        return args.palette(scheme).hue;
      }, function (scheme) {
        return args.palette(scheme).chroma;
      }, args.tone, function (scheme) {
        return DynamicColor.toneMinContrastDefault({
          tone: args.tone,
          scheme: scheme,
          background: args.background,
          toneDeltaConstraint: args.toneDeltaConstraint
        });
      }, function (scheme) {
        return DynamicColor.toneMaxContrastDefault({
          tone: args.tone,
          scheme: scheme,
          background: args.background,
          toneDeltaConstraint: args.toneDeltaConstraint
        });
      }, args.background, args.toneDeltaConstraint);
    }
    /**
     * Create a DynamicColor defined by a HCT hue, chroma, and tone.
     *
     * @param args Functions with DynamicScheme as input. Must provide hue,
     * chroma, and tone. May provide background DynamicColor and
     * ToneDeltaConstraint.
     */
  }, {
    key: "fromHueAndChroma",
    value: function fromHueAndChroma(args) {
      return new DynamicColor(args.hue, args.chroma, args.tone, function (scheme) {
        return DynamicColor.toneMinContrastDefault({
          tone: args.tone,
          scheme: scheme,
          background: args.background,
          toneDeltaConstraint: args.toneDeltaConstraint
        });
      }, function (scheme) {
        return DynamicColor.toneMaxContrastDefault({
          tone: args.tone,
          scheme: scheme,
          background: args.background,
          toneDeltaConstraint: args.toneDeltaConstraint
        });
      }, args.background, args.toneDeltaConstraint);
    }
    /**
     * Create a DynamicColor from a ARGB color (hex code).
     *
     * @param args Functions with DynamicScheme as input. Must provide ARGB (hex
     * code). May provide tone that overrides hex code's, background DynamicColor,
     * and ToneDeltaConstraint.
     */
  }, {
    key: "fromArgb",
    value: function fromArgb(args) {
      return new DynamicColor(function (scheme) {
        var hct = Hct.fromInt(args.argb(scheme));
        return hct.hue;
      }, function (scheme) {
        var hct = Hct.fromInt(args.argb(scheme));
        return hct.chroma;
      }, function (scheme) {
        var _args$tone, _args$tone2;
        return (_args$tone = (_args$tone2 = args.tone) === null || _args$tone2 === void 0 ? void 0 : _args$tone2.call(args, scheme)) !== null && _args$tone !== void 0 ? _args$tone : Hct.fromInt(args.argb(scheme)).tone;
      }, function (scheme) {
        return DynamicColor.toneMinContrastDefault({
          tone: function tone(scheme) {
            var _args$tone3, _args$tone4;
            return (_args$tone3 = (_args$tone4 = args.tone) === null || _args$tone4 === void 0 ? void 0 : _args$tone4.call(args, scheme)) !== null && _args$tone3 !== void 0 ? _args$tone3 : Hct.fromInt(args.argb(scheme)).tone;
          },
          scheme: scheme,
          background: args.background,
          toneDeltaConstraint: args.toneDeltaConstraint
        });
      }, function (scheme) {
        return DynamicColor.toneMaxContrastDefault({
          tone: function tone(scheme) {
            var _args$tone5, _args$tone6;
            return (_args$tone5 = (_args$tone6 = args.tone) === null || _args$tone6 === void 0 ? void 0 : _args$tone6.call(args, scheme)) !== null && _args$tone5 !== void 0 ? _args$tone5 : Hct.fromInt(args.argb(scheme)).tone;
          },
          scheme: scheme,
          background: args.background,
          toneDeltaConstraint: args.toneDeltaConstraint
        });
      }, args.background, args.toneDeltaConstraint);
    }
  }, {
    key: "ensureToneDelta",
    value: function ensureToneDelta(tone, toneStandard, scheme, constraintProvider, toneToDistanceFrom) {
      var constraint = constraintProvider ? constraintProvider(scheme) : null;
      if (constraint == null || toneToDistanceFrom == null) {
        return tone;
      }
      var requiredDelta = constraint.delta;
      var keepAwayTone = toneToDistanceFrom(constraint.keepAway);
      var delta = Math.abs(tone - keepAwayTone);
      if (delta > requiredDelta) {
        return tone;
      }
      switch (constraint.keepAwayPolarity) {
        case 'darker':
          return clampDouble(0.0, 100.0, keepAwayTone + requiredDelta);
        case 'lighter':
          return clampDouble(0.0, 100.0, keepAwayTone - requiredDelta);
        case 'no-preference':
          var keepAwayToneStandard = constraint.keepAway.tone(scheme);
          var preferLighten = toneStandard > keepAwayToneStandard;
          var alterAmount = Math.abs(delta - requiredDelta);
          var lighten = preferLighten ? tone + alterAmount <= 100.0 : tone < alterAmount;
          return lighten ? tone + alterAmount : tone - alterAmount;
        default:
          return tone;
      }
    }
    /**
     * Given a background tone, find a foreground tone, while ensuring they reach
     * a contrast ratio that is as close to [ratio] as possible.
     *
     * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it
     *     falls outside that range.
     * @param ratio The contrast ratio desired between bgTone and the return
     *     value.
     */
  }, {
    key: "foregroundTone",
    value: function foregroundTone(bgTone, ratio) {
      var lighterTone = Contrast.lighterUnsafe(bgTone, ratio);
      var darkerTone = Contrast.darkerUnsafe(bgTone, ratio);
      var lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);
      var darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);
      var preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);
      if (preferLighter) {
        // This handles an edge case where the initial contrast ratio is high
        // (ex. 13.0), and the ratio passed to the function is that high
        // ratio, and both the lighter and darker ratio fails to pass that
        // ratio.
        //
        // This was observed with Tonal Spot's On Primary Container turning
        // black momentarily between high and max contrast in light mode. PC's
        // standard tone was T90, OPC's was T10, it was light mode, and the
        // contrast value was 0.6568521221032331.
        var negligibleDifference = Math.abs(lighterRatio - darkerRatio) < 0.1 && lighterRatio < ratio && darkerRatio < ratio;
        return lighterRatio >= ratio || lighterRatio >= darkerRatio || negligibleDifference ? lighterTone : darkerTone;
      } else {
        return darkerRatio >= ratio || darkerRatio >= lighterRatio ? darkerTone : lighterTone;
      }
    }
    /**
     * Core method for calculating a tone for under dynamic contrast.
     *
     * It calculates tone while enforcing these properties:
     * #1. Desired contrast ratio is reached.
     * #2. Darken to enable light foregrounds on midtones.
     * #3. Enforce tone delta constraint, if needed.
     */
  }, {
    key: "calculateDynamicTone",
    value: function calculateDynamicTone(args) {
      var _minRatio3, _maxRatio3, _bgDynamic$background;
      var background = args.background;
      var scheme = args.scheme;
      var toneStandard = args.toneStandard;
      var toneToJudge = args.toneToJudge;
      var desiredTone = args.desiredTone;
      var minRatio = args.minRatio;
      var maxRatio = args.maxRatio;
      var toneDeltaConstraint = args.toneDeltaConstraint;
      // Start with the tone with no adjustment for contrast.
      // If there is no background, don't perform any adjustment, return
      // immediately.
      var toneStd = toneStandard(scheme);
      var answer = toneStd;
      var bgDynamic = background === null || background === void 0 ? void 0 : background(scheme);
      if (bgDynamic == null) {
        return answer;
      }
      var bgToneStd = bgDynamic.tone(scheme);
      var stdRatio = Contrast.ratioOfTones(toneStd, bgToneStd);
      // If there is a background, determine its tone.
      // Then, calculate tone that ensures the desired contrast ratio is met.
      var bgTone = toneToJudge(bgDynamic);
      var myDesiredTone = desiredTone(stdRatio, bgTone);
      var currentRatio = Contrast.ratioOfTones(bgTone, myDesiredTone);
      var desiredRatio = clampDouble((_minRatio3 = minRatio === null || minRatio === void 0 ? void 0 : minRatio(stdRatio)) !== null && _minRatio3 !== void 0 ? _minRatio3 : 1.0, (_maxRatio3 = maxRatio === null || maxRatio === void 0 ? void 0 : maxRatio(stdRatio)) !== null && _maxRatio3 !== void 0 ? _maxRatio3 : 21.0, currentRatio);
      if (desiredRatio === currentRatio) {
        answer = myDesiredTone;
      } else {
        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);
      }
      // If the background has no background, adjust calculated tone to ensure it
      // is dark enough to have a light foreground.
      if (((_bgDynamic$background = bgDynamic.background) === null || _bgDynamic$background === void 0 ? void 0 : _bgDynamic$background.call(bgDynamic, scheme)) == null) {
        answer = DynamicColor.enableLightForeground(answer);
      }
      // If there is a tone delta constraint, enforce it.
      answer = DynamicColor.ensureToneDelta(answer, toneStd, scheme, toneDeltaConstraint, function (c) {
        return toneToJudge(c);
      });
      return answer;
    }
    /**
     * Default algorithm for calculating the tone of a color at maximum contrast.
     *
     * If the color's background has a background, reach contrast 7.0.
     * If it doesn't, maintain the original contrast ratio.
     */
  }, {
    key: "toneMaxContrastDefault",
    value: function toneMaxContrastDefault(args) {
      return DynamicColor.calculateDynamicTone({
        scheme: args.scheme,
        toneStandard: args.tone,
        toneToJudge: function toneToJudge(c) {
          return c.toneMaxContrast(args.scheme);
        },
        desiredTone: function desiredTone(stdRatio, bgTone) {
          var _args$background, _args$background$call, _args$background$call2;
          var backgroundHasBackground = ((_args$background = args.background) === null || _args$background === void 0 ? void 0 : (_args$background$call = _args$background.call(args, args.scheme)) === null || _args$background$call === void 0 ? void 0 : (_args$background$call2 = _args$background$call.background) === null || _args$background$call2 === void 0 ? void 0 : _args$background$call2.call(_args$background$call, args.scheme)) != null;
          if (backgroundHasBackground) {
            return DynamicColor.foregroundTone(bgTone, 7.0);
          } else {
            return DynamicColor.foregroundTone(bgTone, Math.max(7.0, stdRatio));
          }
        },
        background: args.background,
        toneDeltaConstraint: args.toneDeltaConstraint
      });
    }
    /**
     * Default algorithm for calculating the tone of a color at minimum contrast.
     *
     * If the original contrast ratio was >= 7.0, reach contrast 4.5.
     * If the original contrast ratio was >= 3.0, reach contrast 3.0.
     * If the original contrast ratio was < 3.0, reach that ratio.
     */
  }, {
    key: "toneMinContrastDefault",
    value: function toneMinContrastDefault(args) {
      return DynamicColor.calculateDynamicTone({
        scheme: args.scheme,
        toneStandard: args.tone,
        toneToJudge: function toneToJudge(c) {
          return c.toneMinContrast(args.scheme);
        },
        desiredTone: function desiredTone(stdRatio, bgTone) {
          var answer = args.tone(args.scheme);
          if (stdRatio >= 7.0) {
            answer = DynamicColor.foregroundTone(bgTone, 4.5);
          } else if (stdRatio >= 3.0) {
            answer = DynamicColor.foregroundTone(bgTone, 3.0);
          } else {
            var _args$background2, _args$background2$cal, _args$background2$cal2;
            var backgroundHasBackground = ((_args$background2 = args.background) === null || _args$background2 === void 0 ? void 0 : (_args$background2$cal = _args$background2.call(args, args.scheme)) === null || _args$background2$cal === void 0 ? void 0 : (_args$background2$cal2 = _args$background2$cal.background) === null || _args$background2$cal2 === void 0 ? void 0 : _args$background2$cal2.call(_args$background2$cal, args.scheme)) != null;
            if (backgroundHasBackground) {
              answer = DynamicColor.foregroundTone(bgTone, stdRatio);
            }
          }
          return answer;
        },
        background: args.background,
        toneDeltaConstraint: args.toneDeltaConstraint,
        minRatio: function minRatio(_standardRatio) {
          return 1.0;
        },
        maxRatio: function maxRatio(standardRatio) {
          return standardRatio;
        }
      });
    }
    /**
     * Returns whether [tone] prefers a light foreground.
     *
     * People prefer white foregrounds on ~T60-70. Observed over time, and also
     * by Andrew Somers during research for APCA.
     *
     * T60 used as to create the smallest discontinuity possible when skipping
     * down to T49 in order to ensure light foregrounds.
     * Since `tertiaryContainer` in dark monochrome scheme requires a tone of
     * 60, it should not be adjusted. Therefore, 60 is excluded here.
     */
  }, {
    key: "tonePrefersLightForeground",
    value: function tonePrefersLightForeground(tone) {
      return Math.round(tone) < 60.0;
    }
    /**
     * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter
     * color.
     */
  }, {
    key: "toneAllowsLightForeground",
    value: function toneAllowsLightForeground(tone) {
      return Math.round(tone) <= 49.0;
    }
    /**
     * Adjust a tone such that white has 4.5 contrast, if the tone is
     * reasonably close to supporting it.
     */
  }, {
    key: "enableLightForeground",
    value: function enableLightForeground(tone) {
      if (DynamicColor.tonePrefersLightForeground(tone) && !DynamicColor.toneAllowsLightForeground(tone)) {
        return 49.0;
      }
      return tone;
    }
  }]);
  return DynamicColor;
}();

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Set of themes supported by Dynamic Color.
 * Instantiate the corresponding subclass, ex. SchemeTonalSpot, to create
 * colors corresponding to the theme.
 */
var Variant;
(function (Variant) {
  Variant[Variant["MONOCHROME"] = 0] = "MONOCHROME";
  Variant[Variant["NEUTRAL"] = 1] = "NEUTRAL";
  Variant[Variant["TONAL_SPOT"] = 2] = "TONAL_SPOT";
  Variant[Variant["VIBRANT"] = 3] = "VIBRANT";
  Variant[Variant["EXPRESSIVE"] = 4] = "EXPRESSIVE";
  Variant[Variant["FIDELITY"] = 5] = "FIDELITY";
  Variant[Variant["CONTENT"] = 6] = "CONTENT";
})(Variant || (Variant = {}));

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Documents a constraint between two DynamicColors, in which their tones must
 * have a certain distance from each other.
 *
 * Prefer a DynamicColor with a background, this is for special cases when
 * designers want tonal distance, literally contrast, between two colors that
 * don't have a background / foreground relationship or a contrast guarantee.
 */
var ToneDeltaConstraint = /*#__PURE__*/_createClass(
/**
 * Documents a constraint in tone distance between two DynamicColors.
 *
 * @param delta Required difference between tones. Absolute value, negative
 * values have undefined behavior.
 * @param keepAway DynamicColor whose tone must be delta from the DynamicColor
 * constructed with this instance.
 * @param keepAwayPolarity The polarity of keepAway as compared to the
 * DynamicColor this constraint is attached to.
 */
function ToneDeltaConstraint(delta, keepAway, keepAwayPolarity) {
  _classCallCheck(this, ToneDeltaConstraint);
  this.delta = delta;
  this.keepAway = keepAway;
  this.keepAwayPolarity = keepAwayPolarity;
});

function isFidelity(scheme) {
  return scheme.variant === Variant.FIDELITY || scheme.variant === Variant.CONTENT;
}
function isMonochrome(scheme) {
  return scheme.variant === Variant.MONOCHROME;
}
function findDesiredChromaByTone(hue, chroma, tone, byDecreasingTone) {
  var answer = tone;
  var closestToChroma = Hct.from(hue, chroma, tone);
  if (closestToChroma.chroma < chroma) {
    var chromaPeak = closestToChroma.chroma;
    while (closestToChroma.chroma < chroma) {
      answer += byDecreasingTone ? -1.0 : 1.0;
      var potentialSolution = Hct.from(hue, chroma, answer);
      if (chromaPeak > potentialSolution.chroma) {
        break;
      }
      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {
        break;
      }
      var potentialDelta = Math.abs(potentialSolution.chroma - chroma);
      var currentDelta = Math.abs(closestToChroma.chroma - chroma);
      if (potentialDelta < currentDelta) {
        closestToChroma = potentialSolution;
      }
      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);
    }
  }
  return answer;
}
function viewingConditionsForAlbers(scheme) {
  return ViewingConditions.make( /*whitePoint=*/undefined, /*adaptingLuminance=*/undefined, /*backgroundLstar=*/scheme.isDark ? 30 : 80, /*surround=*/undefined, /*discountingIlluminant=*/undefined);
}
function performAlbers(prealbers, scheme) {
  var albersd = prealbers.inViewingConditions(viewingConditionsForAlbers(scheme));
  if (DynamicColor.tonePrefersLightForeground(prealbers.tone) && !DynamicColor.toneAllowsLightForeground(albersd.tone)) {
    return DynamicColor.enableLightForeground(prealbers.tone);
  } else {
    return DynamicColor.enableLightForeground(albersd.tone);
  }
}
/**
 * DynamicColors for the colors in the Material Design system.
 */
// Material Color Utilities namespaces the various utilities it provides.
// tslint:disable-next-line:class-as-namespace
var MaterialDynamicColors = /*#__PURE__*/function () {
  function MaterialDynamicColors() {
    _classCallCheck(this, MaterialDynamicColors);
  }
  _createClass(MaterialDynamicColors, null, [{
    key: "highestSurface",
    value: function highestSurface(s) {
      return s.isDark ? MaterialDynamicColors.surfaceBright : MaterialDynamicColors.surfaceDim;
    }
  }]);
  return MaterialDynamicColors;
}();
_defineProperty(MaterialDynamicColors, "contentAccentToneDelta", 15.0);
_defineProperty(MaterialDynamicColors, "background", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 6 : 98;
  }
}));
_defineProperty(MaterialDynamicColors, "onBackground", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 90 : 10;
  },
  background: function background(_s) {
    return MaterialDynamicColors.background;
  }
}));
_defineProperty(MaterialDynamicColors, "surface", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 6 : 98;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceDim", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 6 : 87;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceBright", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 24 : 98;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceContainerLowest", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 4 : 100;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceContainerLow", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 10 : 96;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 12 : 94;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceContainerHigh", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 17 : 92;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceContainerHighest", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 22 : 90;
  }
}));
_defineProperty(MaterialDynamicColors, "onSurface", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 90 : 10;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceVariant", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralVariantPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 30 : 90;
  }
}));
_defineProperty(MaterialDynamicColors, "onSurfaceVariant", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralVariantPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 80 : 30;
  },
  background: function background(_s) {
    return MaterialDynamicColors.surfaceVariant;
  }
}));
_defineProperty(MaterialDynamicColors, "inverseSurface", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 90 : 20;
  }
}));
_defineProperty(MaterialDynamicColors, "inverseOnSurface", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 20 : 95;
  },
  background: function background(_s) {
    return MaterialDynamicColors.inverseSurface;
  }
}));
_defineProperty(MaterialDynamicColors, "outline", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralVariantPalette;
  },
  tone: function tone(_s) {
    return 50;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "outlineVariant", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralVariantPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 30 : 80;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "shadow", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(_s) {
    return 0;
  }
}));
_defineProperty(MaterialDynamicColors, "scrim", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.neutralPalette;
  },
  tone: function tone(_s) {
    return 0;
  }
}));
_defineProperty(MaterialDynamicColors, "surfaceTintColor", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 80 : 40;
  }
}));
_defineProperty(MaterialDynamicColors, "primary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 100 : 0;
    }
    return s.isDark ? 80 : 40;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  },
  toneDeltaConstraint: function toneDeltaConstraint(s) {
    return new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.primaryContainer, s.isDark ? 'darker' : 'lighter');
  }
}));
_defineProperty(MaterialDynamicColors, "onPrimary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 10 : 90;
    }
    return s.isDark ? 20 : 100;
  },
  background: function background(_s) {
    return MaterialDynamicColors.primary;
  }
}));
_defineProperty(MaterialDynamicColors, "primaryContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 85 : 25;
    }
    if (!isFidelity(s)) {
      return s.isDark ? 30 : 90;
    }
    return performAlbers(s.sourceColorHct, s);
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onPrimaryContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 0 : 100;
    }
    if (!isFidelity(s)) {
      return s.isDark ? 90 : 10;
    }
    return DynamicColor.foregroundTone(MaterialDynamicColors.primaryContainer.tone(s), 4.5);
  },
  background: function background(_s) {
    return MaterialDynamicColors.primaryContainer;
  }
}));
_defineProperty(MaterialDynamicColors, "inversePrimary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 40 : 80;
  },
  background: function background(_s) {
    return MaterialDynamicColors.inverseSurface;
  }
}));
_defineProperty(MaterialDynamicColors, "inverseOnPrimary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 100 : 20;
  },
  background: function background(_s) {
    return MaterialDynamicColors.inversePrimary;
  }
}));
_defineProperty(MaterialDynamicColors, "secondary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 80 : 40;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  },
  toneDeltaConstraint: function toneDeltaConstraint(s) {
    return new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.secondaryContainer, s.isDark ? 'darker' : 'lighter');
  }
}));
_defineProperty(MaterialDynamicColors, "onSecondary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 10 : 100;
    } else {
      return s.isDark ? 20 : 100;
    }
  },
  background: function background(_s) {
    return MaterialDynamicColors.secondary;
  }
}));
_defineProperty(MaterialDynamicColors, "secondaryContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    var initialTone = s.isDark ? 30 : 90;
    if (isMonochrome(s)) {
      return s.isDark ? 30 : 85;
    }
    if (!isFidelity(s)) {
      return initialTone;
    }
    var answer = findDesiredChromaByTone(s.secondaryPalette.hue, s.secondaryPalette.chroma, initialTone, s.isDark ? false : true);
    answer = performAlbers(s.secondaryPalette.getHct(answer), s);
    return answer;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onSecondaryContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    if (!isFidelity(s)) {
      return s.isDark ? 90 : 10;
    }
    return DynamicColor.foregroundTone(MaterialDynamicColors.secondaryContainer.tone(s), 4.5);
  },
  background: function background(_s) {
    return MaterialDynamicColors.secondaryContainer;
  }
}));
_defineProperty(MaterialDynamicColors, "tertiary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 90 : 25;
    }
    return s.isDark ? 80 : 40;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  },
  toneDeltaConstraint: function toneDeltaConstraint(s) {
    return new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.tertiaryContainer, s.isDark ? 'darker' : 'lighter');
  }
}));
_defineProperty(MaterialDynamicColors, "onTertiary", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 10 : 90;
    }
    return s.isDark ? 20 : 100;
  },
  background: function background(_s) {
    return MaterialDynamicColors.tertiary;
  }
}));
_defineProperty(MaterialDynamicColors, "tertiaryContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 60 : 49;
    }
    if (!isFidelity(s)) {
      return s.isDark ? 30 : 90;
    }
    var albersTone = performAlbers(s.tertiaryPalette.getHct(s.sourceColorHct.tone), s);
    var proposedHct = s.tertiaryPalette.getHct(albersTone);
    return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onTertiaryContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 0 : 100;
    }
    if (!isFidelity(s)) {
      return s.isDark ? 90 : 10;
    }
    return DynamicColor.foregroundTone(MaterialDynamicColors.tertiaryContainer.tone(s), 4.5);
  },
  background: function background(_s) {
    return MaterialDynamicColors.tertiaryContainer;
  }
}));
_defineProperty(MaterialDynamicColors, "error", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.errorPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 80 : 40;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  },
  toneDeltaConstraint: function toneDeltaConstraint(s) {
    return new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.errorContainer, s.isDark ? 'darker' : 'lighter');
  }
}));
_defineProperty(MaterialDynamicColors, "onError", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.errorPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 20 : 100;
  },
  background: function background(_s) {
    return MaterialDynamicColors.error;
  }
}));
_defineProperty(MaterialDynamicColors, "errorContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.errorPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 30 : 90;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onErrorContainer", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.errorPalette;
  },
  tone: function tone(s) {
    return s.isDark ? 90 : 10;
  },
  background: function background(_s) {
    return MaterialDynamicColors.errorContainer;
  }
}));
_defineProperty(MaterialDynamicColors, "primaryFixed", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 100.0 : 10.0;
    }
    return 90.0;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "primaryFixedDim", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 90.0 : 20.0;
    }
    return 80.0;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onPrimaryFixed", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 10.0 : 90.0;
    }
    return 10.0;
  },
  background: function background(_s) {
    return MaterialDynamicColors.primaryFixedDim;
  }
}));
_defineProperty(MaterialDynamicColors, "onPrimaryFixedVariant", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.primaryPalette;
  },
  tone: function tone(s) {
    if (isMonochrome(s)) {
      return s.isDark ? 30.0 : 70.0;
    }
    return 30.0;
  },
  background: function background(_s) {
    return MaterialDynamicColors.primaryFixedDim;
  }
}));
_defineProperty(MaterialDynamicColors, "secondaryFixed", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 80.0 : 90.0;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "secondaryFixedDim", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 70.0 : 80.0;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onSecondaryFixed", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(_s) {
    return 10.0;
  },
  background: function background(_s) {
    return MaterialDynamicColors.secondaryFixedDim;
  }
}));
_defineProperty(MaterialDynamicColors, "onSecondaryFixedVariant", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.secondaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 25.0 : 30.0;
  },
  background: function background(_s) {
    return MaterialDynamicColors.secondaryFixedDim;
  }
}));
_defineProperty(MaterialDynamicColors, "tertiaryFixed", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 40.0 : 90.0;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "tertiaryFixedDim", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 30.0 : 80.0;
  },
  background: function background(s) {
    return MaterialDynamicColors.highestSurface(s);
  }
}));
_defineProperty(MaterialDynamicColors, "onTertiaryFixed", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 90.0 : 10.0;
  },
  background: function background(_s) {
    return MaterialDynamicColors.tertiaryFixedDim;
  }
}));
_defineProperty(MaterialDynamicColors, "onTertiaryFixedVariant", DynamicColor.fromPalette({
  palette: function palette(s) {
    return s.tertiaryPalette;
  },
  tone: function tone(s) {
    return isMonochrome(s) ? 70.0 : 30.0;
  },
  background: function background(_s) {
    return MaterialDynamicColors.tertiaryFixedDim;
  }
}));

/**
 *  A convenience class for retrieving colors that are constant in hue and
 *  chroma, but vary in tone.
 */
var TonalPalette = /*#__PURE__*/function () {
  function TonalPalette(hue, chroma) {
    _classCallCheck(this, TonalPalette);
    _defineProperty(this, "cache", new Map());
    this.hue = hue;
    this.chroma = chroma;
  }
  /**
   * @param tone HCT tone, measured from 0 to 100.
   * @return ARGB representation of a color with that tone.
   */
  _createClass(TonalPalette, [{
    key: "tone",
    value: function tone(_tone) {
      var argb = this.cache.get(_tone);
      if (argb === undefined) {
        argb = Hct.from(this.hue, this.chroma, _tone).toInt();
        this.cache.set(_tone, argb);
      }
      return argb;
    }
    /**
     * @param tone HCT tone.
     * @return HCT representation of a color with that tone.
     */
  }, {
    key: "getHct",
    value: function getHct(tone) {
      return Hct.fromInt(this.tone(tone));
    }
  }], [{
    key: "fromInt",
    value:
    /**
     * @param argb ARGB representation of a color
     * @return Tones matching that color's hue and chroma.
     */
    function fromInt(argb) {
      var hct = Hct.fromInt(argb);
      return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);
    }
    /**
     * @param hue HCT hue
     * @param chroma HCT chroma
     * @return Tones matching hue and chroma.
     */
  }, {
    key: "fromHueAndChroma",
    value: function fromHueAndChroma(hue, chroma) {
      return new TonalPalette(hue, chroma);
    }
  }]);
  return TonalPalette;
}();

/**
 * An intermediate concept between the key color for a UI theme, and a full
 * color scheme. 5 sets of tones are generated, all except one use the same hue
 * as the key color, and all vary in chroma.
 */
var CorePalette = /*#__PURE__*/function () {
  function CorePalette(argb, isContent) {
    _classCallCheck(this, CorePalette);
    var hct = Hct.fromInt(argb);
    var hue = hct.hue;
    var chroma = hct.chroma;
    if (isContent) {
      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);
      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);
      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);
      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));
      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));
    } else {
      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));
      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);
      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);
      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);
      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);
    }
    this.error = TonalPalette.fromHueAndChroma(25, 84);
  }
  _createClass(CorePalette, null, [{
    key: "of",
    value:
    /**
     * @param argb ARGB representation of a color
     */
    function of(argb) {
      return new CorePalette(argb, false);
    }
    /**
     * @param argb ARGB representation of a color
     */
  }, {
    key: "contentOf",
    value: function contentOf(argb) {
      return new CorePalette(argb, true);
    }
    /**
     * Create a [CorePalette] from a set of colors
     */
  }, {
    key: "fromColors",
    value: function fromColors(colors) {
      return CorePalette.createPaletteFromColors(false, colors);
    }
    /**
     * Create a content [CorePalette] from a set of colors
     */
  }, {
    key: "contentFromColors",
    value: function contentFromColors(colors) {
      return CorePalette.createPaletteFromColors(true, colors);
    }
  }, {
    key: "createPaletteFromColors",
    value: function createPaletteFromColors(content, colors) {
      var palette = new CorePalette(colors.primary, content);
      if (colors.secondary) {
        var p = new CorePalette(colors.secondary, content);
        palette.a2 = p.a1;
      }
      if (colors.tertiary) {
        var _p = new CorePalette(colors.tertiary, content);
        palette.a3 = _p.a1;
      }
      if (colors.error) {
        var _p2 = new CorePalette(colors.error, content);
        palette.error = _p2.a1;
      }
      if (colors.neutral) {
        var _p3 = new CorePalette(colors.neutral, content);
        palette.n1 = _p3.n1;
      }
      if (colors.neutralVariant) {
        var _p4 = new CorePalette(colors.neutralVariant, content);
        palette.n2 = _p4.n2;
      }
      return palette;
    }
  }]);
  return CorePalette;
}();

var _strictMethod;
var hasRequired_strictMethod;

function require_strictMethod () {
	if (hasRequired_strictMethod) return _strictMethod;
	hasRequired_strictMethod = 1;

	var fails = _fails;
	_strictMethod = function (method, arg) {
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
	  });
	};
	return _strictMethod;
}

var $export$f = _export;
var aFunction$3 = _aFunction;
var toObject$6 = _toObject;
var fails$6 = _fails;
var $sort = [].sort;
var test = [1, 2, 3];
$export$f($export$f.P + $export$f.F * (fails$6(function () {
  // IE8-
  test.sort(undefined);
}) || !fails$6(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require_strictMethod()($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject$6(this)) : $sort.call(toObject$6(this), aFunction$3(comparefn));
  }
});

var _arrayFill;
var hasRequired_arrayFill;

function require_arrayFill () {
	if (hasRequired_arrayFill) return _arrayFill;
	hasRequired_arrayFill = 1;

	var toObject = _toObject;
	var toAbsoluteIndex = _toAbsoluteIndex;
	var toLength = _toLength;
	_arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};
	return _arrayFill;
}

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export$e = _export;
$export$e($export$e.P, 'Array', {
  fill: require_arrayFill()
});
_addToUnscopables('fill');

var _wksExt = {};

_wksExt.f = _wks.exports;

var global$7 = _global.exports;
var core$1 = _core.exports;
var wksExt$1 = _wksExt;
var defineProperty = _objectDp.f;
var _wksDefine = function (name) {
  var $Symbol = core$1.Symbol || (core$1.Symbol = global$7.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
    value: wksExt$1.f(name)
  });
};

var _objectGops = {};

_objectGops.f = Object.getOwnPropertySymbols;

// all enumerable object keys, includes symbols
var getKeys$1 = _objectKeys;
var gOPS = _objectGops;
var pIE = require_objectPie();
var _enumKeys = function (it) {
  var result = getKeys$1(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  }
  return result;
};

// 7.2.2 IsArray(argument)
var cof$3 = _cof;
var _isArray$1 = Array.isArray || function isArray(arg) {
  return cof$3(arg) == 'Array';
};

var _objectGopnExt = {};

var _objectGopn = {};

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys$2 = _objectKeysInternal;
var hiddenKeys = _enumBugKeys.concat('length', 'prototype');
_objectGopn.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys$2(O, hiddenKeys);
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject$2 = _toIobject;
var gOPN$3 = _objectGopn.f;
var toString = {}.toString;
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function (it) {
  try {
    return gOPN$3(it);
  } catch (e) {
    return windowNames.slice();
  }
};
_objectGopnExt.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$3(toIObject$2(it));
};

// ECMAScript 6 symbols shim
var global$6 = _global.exports;
var has$1 = _has;
var DESCRIPTORS$2 = _descriptors;
var $export$d = _export;
var redefine$1 = _redefine.exports;
var META = _meta.exports.KEY;
var $fails = _fails;
var shared = _shared.exports;
var setToStringTag = _setToStringTag;
var uid = _uid;
var wks$1 = _wks.exports;
var wksExt = _wksExt;
var wksDefine = _wksDefine;
var enumKeys = _enumKeys;
var isArray$1 = _isArray$1;
var anObject$7 = _anObject;
var isObject$4 = _isObject$1;
var toObject$5 = _toObject;
var toIObject$1 = _toIobject;
var toPrimitive$2 = _toPrimitive;
var createDesc$1 = _propertyDesc;
var _create = _objectCreate;
var gOPNExt = _objectGopnExt;
var $GOPD = require_objectGopd();
var $GOPS = _objectGops;
var $DP = _objectDp;
var $keys$1 = _objectKeys;
var gOPD$1 = $GOPD.f;
var dP$3 = $DP.f;
var gOPN$2 = gOPNExt.f;
var $Symbol = global$6.Symbol;
var $JSON = global$6.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks$1('_hidden');
var TO_PRIMITIVE = wks$1('toPrimitive');
var isEnum$1 = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE$1 = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global$6.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS$2 && $fails(function () {
  return _create(dP$3({}, 'a', {
    get: function () {
      return dP$3(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD$1(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP$3(it, key, D);
  if (protoDesc && it !== ObjectProto) dP$3(ObjectProto, key, protoDesc);
} : dP$3;
var wrap$1 = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};
var isSymbol = USE_NATIVE$1 && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};
var $defineProperty$1 = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty$1(OPSymbols, key, D);
  anObject$7(it);
  key = toPrimitive$2(key, true);
  anObject$7(D);
  if (has$1(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has$1(it, HIDDEN)) dP$3(it, HIDDEN, createDesc$1(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has$1(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, {
        enumerable: createDesc$1(0, false)
      });
    }
    return setSymbolDesc(it, key, D);
  }
  return dP$3(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject$7(it);
  var keys = enumKeys(P = toIObject$1(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty$1(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum$1.call(this, key = toPrimitive$2(key, true));
  if (this === ObjectProto && has$1(AllSymbols, key) && !has$1(OPSymbols, key)) return false;
  return E || !has$1(this, key) || !has$1(AllSymbols, key) || has$1(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject$1(it);
  key = toPrimitive$2(key, true);
  if (it === ObjectProto && has$1(AllSymbols, key) && !has$1(OPSymbols, key)) return;
  var D = gOPD$1(it, key);
  if (D && has$1(AllSymbols, key) && !(has$1(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN$2(toIObject$1(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has$1(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN$2(IS_OP ? OPSymbols : toIObject$1(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has$1(AllSymbols, key = names[i++]) && (IS_OP ? has$1(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }
  return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE$1) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has$1(this, HIDDEN) && has$1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc$1(1, value));
    };
    if (DESCRIPTORS$2 && setter) setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: $set
    });
    return wrap$1(tag);
  };
  redefine$1($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty$1;
  _objectGopn.f = gOPNExt.f = $getOwnPropertyNames;
  require_objectPie().f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;
  if (DESCRIPTORS$2 && !_library) {
    redefine$1(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }
  wksExt.f = function (name) {
    return wrap$1(wks$1(name));
  };
}
$export$d($export$d.G + $export$d.W + $export$d.F * !USE_NATIVE$1, {
  Symbol: $Symbol
});
for (var es6Symbols =
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j$1 = 0; es6Symbols.length > j$1;) wks$1(es6Symbols[j$1++]);
for (var wellKnownSymbols = $keys$1(wks$1.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
$export$d($export$d.S + $export$d.F * !USE_NATIVE$1, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has$1(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () {
    setter = true;
  },
  useSimple: function () {
    setter = false;
  }
});
$export$d($export$d.S + $export$d.F * !USE_NATIVE$1, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty$1,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () {
  $GOPS.f(1);
});
$export$d($export$d.S + $export$d.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject$5(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export$d($export$d.S + $export$d.F * (!USE_NATIVE$1 || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({
    a: S
  }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject$4(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray$1(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global$6.JSON, 'JSON', true);

var $defineProperty = _objectDp;
var createDesc = _propertyDesc;
var _createProperty = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

var ctx$3 = _ctx;
var $export$c = _export;
var toObject$4 = _toObject;
var call = _iterCall;
var isArrayIter = _isArrayIter;
var toLength$5 = _toLength;
var createProperty = _createProperty;
var getIterFn = core_getIteratorMethod;
$export$c($export$c.S + $export$c.F * !_iterDetect(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject$4(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx$3(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength$5(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

var isObject$3 = _isObject$1;
var isArray = _isArray$1;
var SPECIES$2 = _wks.exports('species');
var _arraySpeciesConstructor = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject$3(C)) {
      C = C[SPECIES$2];
      if (C === null) C = undefined;
    }
  }
  return C === undefined ? Array : C;
};

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor$2 = _arraySpeciesConstructor;
var _arraySpeciesCreate = function (original, length) {
  return new (speciesConstructor$2(original))(length);
};

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx$2 = _ctx;
var IObject = _iobject;
var toObject$3 = _toObject;
var toLength$4 = _toLength;
var asc = _arraySpeciesCreate;
var _arrayMethods = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject$3($this);
    var self = IObject(O);
    var f = ctx$2(callbackfn, that, 3);
    var length = toLength$4(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (; length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res; // map
        else if (res) switch (TYPE) {
          case 3:
            return true;
          // some
          case 5:
            return val;
          // find
          case 6:
            return index;
          // findIndex
          case 2:
            result.push(val);
          // filter
        } else if (IS_EVERY) return false; // every
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

var $export$b = _export;
var $map = _arrayMethods(1);
$export$b($export$b.P + $export$b.F * !require_strictMethod()([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

/**
 * Constructed by a set of values representing the current UI state (such as
 * whether or not its dark theme, what the theme style is, etc.), and
 * provides a set of TonalPalettes that can create colors that fit in
 * with the theme style. Used by DynamicColor to resolve into a color.
 */
var DynamicScheme = /*#__PURE__*/function () {
  /**
   * The source color of the theme as an HCT color.
   */

  /**
   * Given a tone, produces a reddish, colorful, color.
   */

  /** The source color of the theme as an ARGB 32-bit integer. */

  /** The variant, or style, of the theme. */

  /**
   * Value from -1 to 1. -1 represents minimum contrast. 0 represents standard
   * (i.e. the design as spec'd), and 1 represents maximum contrast.
   */

  /** Whether the scheme is in dark mode or light mode. */

  /**
   * Given a tone, produces a color. Hue and chroma of the
   * color are specified in the design specification of the variant. Usually
   * colorful.
   */

  /**
   * Given a tone, produces a color. Hue and chroma of
   * the color are specified in the design specification of the variant. Usually
   * less colorful.
   */

  /**
   * Given a tone, produces a color. Hue and chroma of
   * the color are specified in the design specification of the variant. Usually
   * a different hue from primary and colorful.
   */

  /**
   * Given a tone, produces a color. Hue and chroma of the
   * color are specified in the design specification of the variant. Usually not
   * colorful at all, intended for background & surface colors.
   */

  /**
   * Given a tone, produces a color. Hue and chroma
   * of the color are specified in the design specification of the variant.
   * Usually not colorful, but slightly more colorful than Neutral. Intended for
   * backgrounds & surfaces.
   */

  function DynamicScheme(args) {
    _classCallCheck(this, DynamicScheme);
    this.sourceColorArgb = args.sourceColorArgb;
    this.variant = args.variant;
    this.contrastLevel = args.contrastLevel;
    this.isDark = args.isDark;
    this.sourceColorHct = Hct.fromInt(args.sourceColorArgb);
    this.primaryPalette = args.primaryPalette;
    this.secondaryPalette = args.secondaryPalette;
    this.tertiaryPalette = args.tertiaryPalette;
    this.neutralPalette = args.neutralPalette;
    this.neutralVariantPalette = args.neutralVariantPalette;
    this.errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);
  }
  /**
   * Support design spec'ing Dynamic Color by schemes that specify hue
   * rotations that should be applied at certain breakpoints.
   * @param sourceColor the source color of the theme, in HCT.
   * @param hues The "breakpoints", i.e. the hues at which a rotation should
   * be apply.
   * @param rotations The rotation that should be applied when source color's
   * hue is >= the same index in hues array, and <= the hue at the next index
   * in hues array.
   */
  _createClass(DynamicScheme, null, [{
    key: "getRotatedHue",
    value: function getRotatedHue(sourceColor, hues, rotations) {
      var sourceHue = sourceColor.hue;
      if (hues.length !== rotations.length) {
        throw new Error("mismatch between hue length ".concat(hues.length, " & rotations ").concat(rotations.length));
      }
      if (rotations.length === 1) {
        return sanitizeDegreesDouble(sourceColor.hue + rotations[0]);
      }
      var size = hues.length;
      for (var i = 0; i <= size - 2; i++) {
        var thisHue = hues[i];
        var nextHue = hues[i + 1];
        if (thisHue < sourceHue && sourceHue < nextHue) {
          return sanitizeDegreesDouble(sourceHue + rotations[i]);
        }
      }
      // If this statement executes, something is wrong, there should have been a
      // rotation found using the arrays.
      return sourceHue;
    }
  }]);
  return DynamicScheme;
}();

/**
 * Represents a Material color scheme, a mapping of color roles to colors.
 */
var Scheme = /*#__PURE__*/function () {
  function Scheme(props) {
    _classCallCheck(this, Scheme);
    this.props = props;
  }
  _createClass(Scheme, [{
    key: "primary",
    get: function get() {
      return this.props.primary;
    }
  }, {
    key: "onPrimary",
    get: function get() {
      return this.props.onPrimary;
    }
  }, {
    key: "primaryContainer",
    get: function get() {
      return this.props.primaryContainer;
    }
  }, {
    key: "onPrimaryContainer",
    get: function get() {
      return this.props.onPrimaryContainer;
    }
  }, {
    key: "secondary",
    get: function get() {
      return this.props.secondary;
    }
  }, {
    key: "onSecondary",
    get: function get() {
      return this.props.onSecondary;
    }
  }, {
    key: "secondaryContainer",
    get: function get() {
      return this.props.secondaryContainer;
    }
  }, {
    key: "onSecondaryContainer",
    get: function get() {
      return this.props.onSecondaryContainer;
    }
  }, {
    key: "tertiary",
    get: function get() {
      return this.props.tertiary;
    }
  }, {
    key: "onTertiary",
    get: function get() {
      return this.props.onTertiary;
    }
  }, {
    key: "tertiaryContainer",
    get: function get() {
      return this.props.tertiaryContainer;
    }
  }, {
    key: "onTertiaryContainer",
    get: function get() {
      return this.props.onTertiaryContainer;
    }
  }, {
    key: "error",
    get: function get() {
      return this.props.error;
    }
  }, {
    key: "onError",
    get: function get() {
      return this.props.onError;
    }
  }, {
    key: "errorContainer",
    get: function get() {
      return this.props.errorContainer;
    }
  }, {
    key: "onErrorContainer",
    get: function get() {
      return this.props.onErrorContainer;
    }
  }, {
    key: "background",
    get: function get() {
      return this.props.background;
    }
  }, {
    key: "onBackground",
    get: function get() {
      return this.props.onBackground;
    }
  }, {
    key: "surface",
    get: function get() {
      return this.props.surface;
    }
  }, {
    key: "onSurface",
    get: function get() {
      return this.props.onSurface;
    }
  }, {
    key: "surfaceVariant",
    get: function get() {
      return this.props.surfaceVariant;
    }
  }, {
    key: "onSurfaceVariant",
    get: function get() {
      return this.props.onSurfaceVariant;
    }
  }, {
    key: "surfaceDim",
    get: function get() {
      return this.props.surfaceDim;
    }
  }, {
    key: "surfaceBright",
    get: function get() {
      return this.props.surfaceBright;
    }
  }, {
    key: "surfaceContainerLowest",
    get: function get() {
      return this.props.surfaceContainerLowest;
    }
  }, {
    key: "surfaceContainerLow",
    get: function get() {
      return this.props.surfaceContainerLow;
    }
  }, {
    key: "surfaceContainer",
    get: function get() {
      return this.props.surfaceContainer;
    }
  }, {
    key: "surfaceContainerHigh",
    get: function get() {
      return this.props.surfaceContainerHigh;
    }
  }, {
    key: "outline",
    get: function get() {
      return this.props.outline;
    }
  }, {
    key: "outlineVariant",
    get: function get() {
      return this.props.outlineVariant;
    }
  }, {
    key: "shadow",
    get: function get() {
      return this.props.shadow;
    }
  }, {
    key: "scrim",
    get: function get() {
      return this.props.scrim;
    }
  }, {
    key: "inverseSurface",
    get: function get() {
      return this.props.inverseSurface;
    }
  }, {
    key: "inverseOnSurface",
    get: function get() {
      return this.props.inverseOnSurface;
    }
  }, {
    key: "inversePrimary",
    get: function get() {
      return this.props.inversePrimary;
    }
    /**
     * @param argb ARGB representation of a color.
     * @return Light Material color scheme, based on the color's hue.
     */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread2({}, this.props);
    }
  }], [{
    key: "light",
    value: function light(argb) {
      return Scheme.lightFromCorePalette(CorePalette.of(argb));
    }
    /**
     * @param argb ARGB representation of a color.
     * @return Dark Material color scheme, based on the color's hue.
     */
  }, {
    key: "dark",
    value: function dark(argb) {
      return Scheme.darkFromCorePalette(CorePalette.of(argb));
    }
    /**
     * @param argb ARGB representation of a color.
     * @return Light Material content color scheme, based on the color's hue.
     */
  }, {
    key: "lightContent",
    value: function lightContent(argb) {
      return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));
    }
    /**
     * @param argb ARGB representation of a color.
     * @return Dark Material content color scheme, based on the color's hue.
     */
  }, {
    key: "darkContent",
    value: function darkContent(argb) {
      return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));
    }
    /**
     * Light scheme from core palette
     */
  }, {
    key: "lightFromCorePalette",
    value: function lightFromCorePalette(core) {
      return new Scheme({
        primary: core.a1.tone(40),
        onPrimary: core.a1.tone(100),
        primaryContainer: core.a1.tone(90),
        onPrimaryContainer: core.a1.tone(10),
        secondary: core.a2.tone(40),
        onSecondary: core.a2.tone(100),
        secondaryContainer: core.a2.tone(90),
        onSecondaryContainer: core.a2.tone(10),
        tertiary: core.a3.tone(40),
        onTertiary: core.a3.tone(100),
        tertiaryContainer: core.a3.tone(90),
        onTertiaryContainer: core.a3.tone(10),
        error: core.error.tone(40),
        onError: core.error.tone(100),
        errorContainer: core.error.tone(90),
        onErrorContainer: core.error.tone(10),
        background: core.n1.tone(99),
        onBackground: core.n1.tone(10),
        surface: core.n1.tone(98),
        onSurface: core.n1.tone(10),
        surfaceVariant: core.n2.tone(90),
        onSurfaceVariant: core.n2.tone(30),
        surfaceDim: core.n1.tone(87),
        surfaceBright: core.n1.tone(98),
        surfaceContainerLowest: core.n1.tone(100),
        surfaceContainerLow: core.n1.tone(96),
        surfaceContainer: core.n1.tone(94),
        surfaceContainerHigh: core.n1.tone(92),
        surfaceContainerHighest: core.n1.tone(90),
        outline: core.n2.tone(50),
        outlineVariant: core.n2.tone(80),
        shadow: core.n1.tone(0),
        scrim: core.n1.tone(0),
        inverseSurface: core.n1.tone(20),
        inverseOnSurface: core.n1.tone(95),
        inversePrimary: core.a1.tone(80)
      });
    }
    /**
     * Dark scheme from core palette
     */
  }, {
    key: "darkFromCorePalette",
    value: function darkFromCorePalette(core) {
      return new Scheme({
        primary: core.a1.tone(80),
        onPrimary: core.a1.tone(20),
        primaryContainer: core.a1.tone(30),
        onPrimaryContainer: core.a1.tone(90),
        secondary: core.a2.tone(80),
        onSecondary: core.a2.tone(20),
        secondaryContainer: core.a2.tone(30),
        onSecondaryContainer: core.a2.tone(90),
        tertiary: core.a3.tone(80),
        onTertiary: core.a3.tone(20),
        tertiaryContainer: core.a3.tone(30),
        onTertiaryContainer: core.a3.tone(90),
        error: core.error.tone(80),
        onError: core.error.tone(20),
        errorContainer: core.error.tone(30),
        onErrorContainer: core.error.tone(80),
        background: core.n1.tone(10),
        onBackground: core.n1.tone(90),
        surface: core.n1.tone(10),
        onSurface: core.n1.tone(90),
        surfaceVariant: core.n2.tone(30),
        onSurfaceVariant: core.n2.tone(80),
        surfaceDim: core.n1.tone(6),
        surfaceBright: core.n1.tone(24),
        surfaceContainerLowest: core.n1.tone(4),
        surfaceContainerLow: core.n1.tone(10),
        surfaceContainer: core.n1.tone(12),
        surfaceContainerHigh: core.n1.tone(17),
        surfaceContainerHighest: core.n1.tone(22),
        outline: core.n2.tone(60),
        outlineVariant: core.n2.tone(30),
        shadow: core.n1.tone(0),
        scrim: core.n1.tone(0),
        inverseSurface: core.n1.tone(90),
        inverseOnSurface: core.n1.tone(20),
        inversePrimary: core.a1.tone(40)
      });
    }
  }]);
  return Scheme;
}();

/**
 * A Dynamic Color theme that is intentionally detached from the source color.
 */
var SchemeExpressive = /*#__PURE__*/function (_DynamicScheme) {
  _inherits(SchemeExpressive, _DynamicScheme);
  var _super = _createSuper(SchemeExpressive);
  function SchemeExpressive(sourceColorHct, isDark, contrastLevel) {
    _classCallCheck(this, SchemeExpressive);
    return _super.call(this, {
      sourceColorArgb: sourceColorHct.toInt(),
      variant: Variant.EXPRESSIVE,
      contrastLevel: contrastLevel,
      isDark: isDark,
      primaryPalette: TonalPalette.fromHueAndChroma(sanitizeDegreesDouble(sourceColorHct.hue + 120.0), 40.0),
      secondaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeExpressive.hues, SchemeExpressive.secondaryRotations), 24.0),
      tertiaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeExpressive.hues, SchemeExpressive.tertiaryRotations), 32.0),
      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0),
      neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0)
    });
  }
  return _createClass(SchemeExpressive);
}(DynamicScheme);
/**
 * Hues (in degrees) used at breakpoints such that designers can specify a
 * hue rotation that occurs at a given break point.
 */
_defineProperty(SchemeExpressive, "hues", [0.0, 21.0, 51.0, 121.0, 151.0, 191.0, 271.0, 321.0, 360.0]);
/**
 * Hue rotations (in degrees) of the Secondary [TonalPalette],
 * corresponding to the breakpoints in [hues].
 */
_defineProperty(SchemeExpressive, "secondaryRotations", [45.0, 95.0, 45.0, 20.0, 45.0, 90.0, 45.0, 45.0, 45.0]);
/**
 * Hue rotations (in degrees) of the Tertiary [TonalPalette],
 * corresponding to the breakpoints in [hues].
 */
_defineProperty(SchemeExpressive, "tertiaryRotations", [120.0, 120.0, 20.0, 45.0, 20.0, 15.0, 20.0, 120.0, 120.0]);

/**
 * A Dynamic Color theme that maxes out colorfulness at each position in the
 * Primary Tonal Palette.
 */
var SchemeVibrant = /*#__PURE__*/function (_DynamicScheme) {
  _inherits(SchemeVibrant, _DynamicScheme);
  var _super = _createSuper(SchemeVibrant);
  function SchemeVibrant(sourceColorHct, isDark, contrastLevel) {
    _classCallCheck(this, SchemeVibrant);
    return _super.call(this, {
      sourceColorArgb: sourceColorHct.toInt(),
      variant: Variant.VIBRANT,
      contrastLevel: contrastLevel,
      isDark: isDark,
      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 200.0),
      secondaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeVibrant.hues, SchemeVibrant.secondaryRotations), 24.0),
      tertiaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeVibrant.hues, SchemeVibrant.tertiaryRotations), 32.0),
      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0),
      neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0)
    });
  }
  return _createClass(SchemeVibrant);
}(DynamicScheme);
/**
 * Hues (in degrees) used at breakpoints such that designers can specify a
 * hue rotation that occurs at a given break point.
 */
_defineProperty(SchemeVibrant, "hues", [0.0, 41.0, 61.0, 101.0, 131.0, 181.0, 251.0, 301.0, 360.0]);
/**
 * Hue rotations (in degrees) of the Secondary [TonalPalette],
 * corresponding to the breakpoints in [hues].
 */
_defineProperty(SchemeVibrant, "secondaryRotations", [18.0, 15.0, 10.0, 12.0, 15.0, 18.0, 15.0, 12.0, 12.0]);
/**
 * Hue rotations (in degrees) of the Tertiary [TonalPalette],
 * corresponding to the breakpoints in [hues].
 */
_defineProperty(SchemeVibrant, "tertiaryRotations", [35.0, 30.0, 20.0, 25.0, 30.0, 35.0, 30.0, 25.0, 25.0]);

var $export$a = _export;
var $filter = _arrayMethods(2);
$export$a($export$a.P + $export$a.F * !require_strictMethod()([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

/**
 *  Given a large set of colors, remove colors that are unsuitable for a UI
 *  theme, and rank the rest based on suitability.
 *
 *  Enables use of a high cluster count for image quantization, thus ensuring
 *  colors aren't muddied, while curating the high cluster count to a much
 *  smaller number of appropriate choices.
 */
var Score = /*#__PURE__*/function () {
  function Score() {
    _classCallCheck(this, Score);
  }
  /**
   * Given a map with keys of colors and values of how often the color appears,
   * rank the colors based on suitability for being used for a UI theme.
   *
   * @param colorsToPopulation map with keys of colors and values of how often
   *     the color appears, usually from a source image.
   * @return Colors sorted by suitability for a UI theme. The most suitable
   *     color is the first item, the least suitable is the last. There will
   *     always be at least one color returned. If all the input colors
   *     were not suitable for a theme, a default fallback color will be
   *     provided, Google Blue.
   */
  _createClass(Score, null, [{
    key: "score",
    value: function score(colorsToPopulation) {
      var contentColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // Determine the total count of all colors.
      var populationSum = 0;
      var _iterator = _createForOfIteratorHelper(colorsToPopulation.values()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var population = _step.value;
          populationSum += population;
        }
        // Turn the count of each color into a proportion by dividing by the total
        // count. Also, fill a cache of CAM16 colors representing each color, and
        // record the proportion of colors for each CAM16 hue.
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var colorsToProportion = new Map();
      var colorsToCam = new Map();
      var hueProportions = new Array(360).fill(0);
      var _iterator2 = _createForOfIteratorHelper(colorsToPopulation.entries()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
            color = _step2$value[0],
            _population = _step2$value[1];
          var proportion = _population / populationSum;
          colorsToProportion.set(color, proportion);
          var cam = Cam16.fromInt(color);
          colorsToCam.set(color, cam);
          var hue = Math.round(cam.hue);
          hueProportions[hue] += proportion;
        }
        // Determine the proportion of the colors around each color, by summing the
        // proportions around each color's hue.
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var colorsToExcitedProportion = new Map();
      var _iterator3 = _createForOfIteratorHelper(colorsToCam.entries()),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
            _color = _step3$value[0],
            _cam = _step3$value[1];
          var _hue = Math.round(_cam.hue);
          var excitedProportion = 0;
          for (var i = _hue - 15; i < _hue + 15; i++) {
            var neighborHue = sanitizeDegreesInt(i);
            excitedProportion += hueProportions[neighborHue];
          }
          colorsToExcitedProportion.set(_color, excitedProportion);
        }
        // Score the colors by their proportion, as well as how chromatic they are.
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var colorsToScore = new Map();
      var _iterator4 = _createForOfIteratorHelper(colorsToCam.entries()),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _slicedToArray(_step4.value, 2),
            _color2 = _step4$value[0],
            _cam2 = _step4$value[1];
          var _proportion = colorsToExcitedProportion.get(_color2);
          var proportionScore = _proportion * 100.0 * Score.WEIGHT_PROPORTION;
          var chromaWeight = _cam2.chroma < Score.TARGET_CHROMA ? Score.WEIGHT_CHROMA_BELOW : Score.WEIGHT_CHROMA_ABOVE;
          var chromaScore = (_cam2.chroma - Score.TARGET_CHROMA) * chromaWeight;
          var score = proportionScore + chromaScore;
          colorsToScore.set(_color2, score);
        }
        // Remove colors that are unsuitable, ex. very dark or unchromatic colors.
        // Also, remove colors that are very similar in hue.
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      var filteredColors = contentColor ? Score.filterContent(colorsToCam) : Score.filter(colorsToExcitedProportion, colorsToCam);
      var dedupedColorsToScore = new Map();
      var _iterator5 = _createForOfIteratorHelper(filteredColors),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _color3 = _step5.value;
          var duplicateHue = false;
          var _hue2 = colorsToCam.get(_color3).hue;
          var _iterator6 = _createForOfIteratorHelper(dedupedColorsToScore),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var _step6$value = _slicedToArray(_step6.value, 1),
                alreadyChosenColor = _step6$value[0];
              var alreadyChosenHue = colorsToCam.get(alreadyChosenColor).hue;
              if (differenceDegrees(_hue2, alreadyChosenHue) < 15) {
                duplicateHue = true;
                break;
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
          if (duplicateHue) {
            continue;
          }
          dedupedColorsToScore.set(_color3, colorsToScore.get(_color3));
        }
        // Ensure the list of colors returned is sorted such that the first in the
        // list is the most suitable, and the last is the least suitable.
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      var colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());
      colorsByScoreDescending.sort(function (first, second) {
        return second[1] - first[1];
      });
      var answer = colorsByScoreDescending.map(function (entry) {
        return entry[0];
      });
      // Ensure that at least one color is returned.
      if (answer.length === 0) {
        answer.push(0xff4285F4); // Google Blue
      }

      return answer;
    }
  }, {
    key: "filter",
    value: function filter(colorsToExcitedProportion, colorsToCam) {
      var filtered = new Array();
      var _iterator7 = _createForOfIteratorHelper(colorsToCam.entries()),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
            color = _step7$value[0],
            cam = _step7$value[1];
          var proportion = colorsToExcitedProportion.get(color);
          if (cam.chroma >= Score.CUTOFF_CHROMA && lstarFromArgb(color) >= Score.CUTOFF_TONE && proportion >= Score.CUTOFF_EXCITED_PROPORTION) {
            filtered.push(color);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return filtered;
    }
  }, {
    key: "filterContent",
    value: function filterContent(colorsToCam) {
      return Array.from(colorsToCam.keys());
    }
  }]);
  return Score;
}();
_defineProperty(Score, "TARGET_CHROMA", 48.0);
_defineProperty(Score, "WEIGHT_PROPORTION", 0.7);
_defineProperty(Score, "WEIGHT_CHROMA_ABOVE", 0.3);
_defineProperty(Score, "WEIGHT_CHROMA_BELOW", 0.1);
_defineProperty(Score, "CUTOFF_CHROMA", 15.0);
_defineProperty(Score, "CUTOFF_TONE", 10.0);
_defineProperty(Score, "CUTOFF_EXCITED_PROPORTION", 0.01);

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING$1 = 'toString';
var $toString$1 = DateProto[TO_STRING$1];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  _redefine.exports(DateProto, TO_STRING$1, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString$1.call(this) : INVALID_DATE;
  });
}

// 21.2.5.3 get RegExp.prototype.flags
var anObject$6 = _anObject;
var _flags = function () {
  var that = anObject$6(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

// 21.2.5.3 get RegExp.prototype.flags()
if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
  configurable: true,
  get: _flags
});

var anObject$5 = _anObject;
var $flags$1 = _flags;
var DESCRIPTORS$1 = _descriptors;
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];
var define = function (fn) {
  _redefine.exports(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (_fails(function () {
  return $toString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject$5(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS$1 && R instanceof RegExp ? $flags$1.call(R) : undefined);
  });
  // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

var at = _stringAt(true);

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
var _advanceStringIndex = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

var classof$1 = _classof;
var builtinExec = RegExp.prototype.exec;

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
var _regexpExecAbstract = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof$1(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

var regexpFlags = _flags;
var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;
var patchedExec = nativeExec;
var LAST_INDEX$1 = 'lastIndex';
var UPDATES_LAST_INDEX_WRONG = function () {
  var re1 = /a/,
    re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX$1] !== 0 || re2[LAST_INDEX$1] !== 0;
}();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;
if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX$1];
    match = nativeExec.call(re, str);
    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX$1] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }
    return match;
  };
}
var _regexpExec = patchedExec;

var regexpExec$2 = _regexpExec;
_export({
  target: 'RegExp',
  proto: true,
  forced: regexpExec$2 !== /./.exec
}, {
  exec: regexpExec$2
});

var redefine = _redefine.exports;
var hide = _hide;
var fails$5 = _fails;
var defined$3 = _defined;
var wks = _wks.exports;
var regexpExec$1 = _regexpExec;
var SPECIES$1 = wks('species');
var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$5(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = {
      a: '7'
    };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () {
    return originalExec.apply(this, arguments);
  };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
}();
var _fixReWks = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var DELEGATES_TO_SYMBOL = !fails$5(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () {
      return 7;
    };
    return ''[KEY](O) != 7;
  });
  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails$5(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () {
      execCalled = true;
      return null;
    };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES$1] = function () {
        return re;
      };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;
  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(defined$3, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec$1) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return {
            done: true,
            value: nativeRegExpMethod.call(regexp, str, arg2)
          };
        }
        return {
          done: true,
          value: nativeMethod.call(str, regexp, arg2)
        };
      }
      return {
        done: false
      };
    });
    var strfn = fns[0];
    var rxfn = fns[1];
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    }
    // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

var anObject$4 = _anObject;
var toObject$2 = _toObject;
var toLength$3 = _toLength;
var toInteger = _toInteger;
var advanceStringIndex$2 = _advanceStringIndex;
var regExpExec$1 = _regexpExecAbstract;
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;
var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
_fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
  // `String.prototype.replace` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.replace
  function replace(searchValue, replaceValue) {
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  },
  // `RegExp.prototype[@@replace]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
  function (regexp, replaceValue) {
    var res = maybeCallNative($replace, regexp, this, replaceValue);
    if (res.done) return res.value;
    var rx = anObject$4(regexp);
    var S = String(this);
    var functionalReplace = typeof replaceValue === 'function';
    if (!functionalReplace) replaceValue = String(replaceValue);
    var global = rx.global;
    if (global) {
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
    }
    var results = [];
    while (true) {
      var result = regExpExec$1(rx, S);
      if (result === null) break;
      results.push(result);
      if (!global) break;
      var matchStr = String(result[0]);
      if (matchStr === '') rx.lastIndex = advanceStringIndex$2(S, toLength$3(rx.lastIndex), fullUnicode);
    }
    var accumulatedResult = '';
    var nextSourcePosition = 0;
    for (var i = 0; i < results.length; i++) {
      result = results[i];
      var matched = String(result[0]);
      var position = max(min(toInteger(result.index), S.length), 0);
      var captures = [];
      // NOTE: This is equivalent to
      //   captures = result.slice(1).map(maybeToString)
      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
      for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
      var namedCaptures = result.groups;
      if (functionalReplace) {
        var replacerArgs = [matched].concat(captures, position, S);
        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
        var replacement = String(replaceValue.apply(undefined, replacerArgs));
      } else {
        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
      }
      if (position >= nextSourcePosition) {
        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
        nextSourcePosition = position + matched.length;
      }
    }
    return accumulatedResult + S.slice(nextSourcePosition);
  }];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject$2(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$':
          return '$';
        case '&':
          return matched;
        case '`':
          return str.slice(0, position);
        case "'":
          return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default:
          // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

var _stringRepeat;
var hasRequired_stringRepeat;

function require_stringRepeat () {
	if (hasRequired_stringRepeat) return _stringRepeat;
	hasRequired_stringRepeat = 1;

	var toInteger = _toInteger;
	var defined = _defined;
	_stringRepeat = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};
	return _stringRepeat;
}

var $export$9 = _export;
$export$9($export$9.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require_stringRepeat()
});

var $export$8 = _export;
var html$1 = require_html();
var cof$2 = _cof;
var toAbsoluteIndex = _toAbsoluteIndex;
var toLength$2 = _toLength;
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export$8($export$8.P + $export$8.F * _fails(function () {
  if (html$1) arraySlice.call(html$1);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength$2(this.length);
    var klass = cof$2(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength$2(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    return cloned;
  }
});

/**
 * Utility methods for hexadecimal representations of colors.
 */
/**
 * @param argb ARGB representation of a color.
 * @return Hex string representing color, ex. #ff0000 for red.
 */
function hexFromArgb(argb) {
  var r = redFromArgb(argb);
  var g = greenFromArgb(argb);
  var b = blueFromArgb(argb);
  var outParts = [r.toString(16), g.toString(16), b.toString(16)];
  // Pad single-digit output values
  var _iterator = _createForOfIteratorHelper(outParts.entries()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        i = _step$value[0],
        part = _step$value[1];
      if (part.length === 1) {
        outParts[i] = '0' + part;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return '#' + outParts.join('');
}
/**
 * @param hex String representing color as hex code. Accepts strings with or
 *     without leading #, and string representing the color using 3, 6, or 8
 *     hex characters.
 * @return ARGB representation of color.
 */
function argbFromHex(hex) {
  hex = hex.replace('#', '');
  var isThree = hex.length === 3;
  var isSix = hex.length === 6;
  var isEight = hex.length === 8;
  if (!isThree && !isSix && !isEight) {
    throw new Error('unexpected hex ' + hex);
  }
  var r = 0;
  var g = 0;
  var b = 0;
  if (isThree) {
    r = parseIntHex(hex.slice(0, 1).repeat(2));
    g = parseIntHex(hex.slice(1, 2).repeat(2));
    b = parseIntHex(hex.slice(2, 3).repeat(2));
  } else if (isSix) {
    r = parseIntHex(hex.slice(0, 2));
    g = parseIntHex(hex.slice(2, 4));
    b = parseIntHex(hex.slice(4, 6));
  } else if (isEight) {
    r = parseIntHex(hex.slice(2, 4));
    g = parseIntHex(hex.slice(4, 6));
    b = parseIntHex(hex.slice(6, 8));
  }
  return (255 << 24 | (r & 0x0ff) << 16 | (g & 0x0ff) << 8 | b & 0x0ff) >>> 0;
}
function parseIntHex(value) {
  // tslint:disable-next-line:ban
  return parseInt(value, 16);
}

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject$3 = _anObject;
var aFunction$2 = _aFunction;
var SPECIES = _wks.exports('species');
var _speciesConstructor = function (O, D) {
  var C = anObject$3(O).constructor;
  var S;
  return C === undefined || (S = anObject$3(C)[SPECIES]) == undefined ? D : aFunction$2(S);
};

// fast apply, http://jsperf.lnkit.com/fast-apply/5
var _invoke = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);
    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);
    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
    case 3:
      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
    case 4:
      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
  }
  return fn.apply(that, args);
};

var ctx$1 = _ctx;
var invoke = _invoke;
var html = require_html();
var cel = require_domCreate();
var global$5 = _global.exports;
var process$3 = global$5.process;
var setTask = global$5.setImmediate;
var clearTask = global$5.clearImmediate;
var MessageChannel = global$5.MessageChannel;
var Dispatch = global$5.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (_cof(process$3) == 'process') {
    defer = function (id) {
      process$3.nextTick(ctx$1(run, id, 1));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx$1(run, id, 1));
    };
    // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx$1(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global$5.addEventListener && typeof postMessage == 'function' && !global$5.importScripts) {
    defer = function (id) {
      global$5.postMessage(id + '', '*');
    };
    global$5.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx$1(run, id, 1), 0);
    };
  }
}
var _task = {
  set: setTask,
  clear: clearTask
};

var global$4 = _global.exports;
var macrotask = _task.set;
var Observer = global$4.MutationObserver || global$4.WebKitMutationObserver;
var process$2 = global$4.process;
var Promise$1 = global$4.Promise;
var isNode$1 = _cof(process$2) == 'process';
var _microtask = function () {
  var head, last, notify;
  var flush = function () {
    var parent, fn;
    if (isNode$1 && (parent = process$2.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }
    last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode$1) {
    notify = function () {
      process$2.nextTick(flush);
    };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global$4.navigator && global$4.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, {
      characterData: true
    }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (Promise$1 && Promise$1.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise$1.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global$4, flush);
    };
  }
  return function (fn) {
    var task = {
      fn: fn,
      next: undefined
    };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    }
    last = task;
  };
};

var _newPromiseCapability = {};

// 25.4.1.5 NewPromiseCapability(C)
var aFunction$1 = _aFunction;
function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction$1(resolve);
  this.reject = aFunction$1(reject);
}
_newPromiseCapability.f = function (C) {
  return new PromiseCapability(C);
};

var _perform = function (exec) {
  try {
    return {
      e: false,
      v: exec()
    };
  } catch (e) {
    return {
      e: true,
      v: e
    };
  }
};

var global$3 = _global.exports;
var navigator = global$3.navigator;
var _userAgent = navigator && navigator.userAgent || '';

var anObject$2 = _anObject;
var isObject$2 = _isObject$1;
var newPromiseCapability$1 = _newPromiseCapability;
var _promiseResolve = function (C, x) {
  anObject$2(C);
  if (isObject$2(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability$1.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var global$2 = _global.exports;
var ctx = _ctx;
var classof = _classof;
var $export$7 = _export;
var isObject$1 = _isObject$1;
var aFunction = _aFunction;
var anInstance = _anInstance;
var forOf = _forOf.exports;
var speciesConstructor$1 = _speciesConstructor;
var task = _task.set;
var microtask = _microtask();
var newPromiseCapabilityModule = _newPromiseCapability;
var perform = _perform;
var userAgent = _userAgent;
var promiseResolve = _promiseResolve;
var PROMISE = 'Promise';
var TypeError$1 = global$2.TypeError;
var process$1 = global$2.process;
var versions = process$1 && process$1.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global$2[PROMISE];
var isNode = classof(process$1) == 'process';
var empty = function () {/* empty */};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_wks.exports('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise
    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) {/* empty */}
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject$1(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError$1('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global$2, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process$1.emit('unhandledRejection', value, promise);
        } else if (handler = global$2.onunhandledrejection) {
          handler({
            promise: promise,
            reason: value
          });
        } else if ((console = global$2.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }
    promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global$2, function () {
    var handler;
    if (isNode) {
      process$1.emit('rejectionHandled', promise);
    } else if (handler = global$2.onrejectionhandled) {
      handler({
        promise: promise,
        reason: promise._v
      });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = {
          _w: promise,
          _d: false
        }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({
      _w: promise,
      _d: false
    }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions
    this._a = undefined; // <- checked in isUnhandled reactions
    this._s = 0; // <- state
    this._d = false; // <- done
    this._v = undefined; // <- value
    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false; // <- notify
  };

  Internal.prototype = _redefineAll($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor$1(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process$1.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}
$export$7($export$7.G + $export$7.W + $export$7.F * !USE_NATIVE, {
  Promise: $Promise
});
_setToStringTag($Promise, PROMISE);
_setSpecies(PROMISE);
Wrapper = _core.exports[PROMISE];

// statics
$export$7($export$7.S + $export$7.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export$7($export$7.S + $export$7.F * (!USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(this, x);
  }
});
$export$7($export$7.S + $export$7.F * !(USE_NATIVE && _iterDetect(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

// 7.2.8 IsRegExp(argument)
var isObject = _isObject$1;
var cof$1 = _cof;
var MATCH = _wks.exports('match');
var _isRegexp = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof$1(it) == 'RegExp');
};

var isRegExp$2 = _isRegexp;
var anObject$1 = _anObject;
var speciesConstructor = _speciesConstructor;
var advanceStringIndex$1 = _advanceStringIndex;
var toLength$1 = _toLength;
var callRegExpExec = _regexpExecAbstract;
var regexpExec = _regexpExec;
var fails$4 = _fails;
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails$4(function () {
  RegExp(MAX_UINT32, 'y');
});

// @@split logic
_fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp$2(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }

      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
    // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }
  return [
  // `String.prototype.split` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.split
  function split(separator, limit) {
    var O = defined(this);
    var splitter = separator == undefined ? undefined : separator[SPLIT];
    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
  },
  // `RegExp.prototype[@@split]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
  //
  // NOTE: This cannot be properly polyfilled in engines that don't support
  // the 'y' flag.
  function (regexp, limit) {
    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
    if (res.done) return res.value;
    var rx = anObject$1(regexp);
    var S = String(this);
    var C = speciesConstructor(rx, RegExp);
    var unicodeMatching = rx.unicode;
    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g');

    // ^(? + rx + ) is needed, in combination with some S slicing, to
    // simulate the 'y' flag.
    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
    if (lim === 0) return [];
    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
    var p = 0;
    var q = 0;
    var A = [];
    while (q < S.length) {
      splitter.lastIndex = SUPPORTS_Y ? q : 0;
      var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
      var e;
      if (z === null || (e = $min(toLength$1(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
        q = advanceStringIndex$1(S, q, unicodeMatching);
      } else {
        A.push(S.slice(p, q));
        if (A.length === lim) return A;
        for (var i = 1; i <= z.length - 1; i++) {
          A.push(z[i]);
          if (A.length === lim) return A;
        }
        q = p = e;
      }
    }
    A.push(S.slice(p));
    return A;
  }];
});

var DESCRIPTORS = _descriptors;
var getKeys = _objectKeys;
var toIObject = _toIobject;
var isEnum = require_objectPie().f;
var _objectToArray = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

// https://github.com/tc39/proposal-object-values-entries
var $export$6 = _export;
var $entries = _objectToArray(true);
$export$6($export$6.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

var $export$5 = _export;
var toObject$1 = _toObject;
var toPrimitive$1 = _toPrimitive;
$export$5($export$5.P + $export$5.F * _fails(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
    toISOString: function () {
      return 1;
    }
  }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject$1(this);
    var pv = toPrimitive$1(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/**
 * Generate a theme from a source color
 *
 * @param source Source color
 * @param customColors Array of custom colors
 * @return Theme object
 */
function themeFromSourceColor(source) {
  var customColors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var palette = CorePalette.of(source);
  return {
    source: source,
    schemes: {
      light: Scheme.light(source),
      dark: Scheme.dark(source)
    },
    palettes: {
      primary: palette.a1,
      secondary: palette.a2,
      tertiary: palette.a3,
      neutral: palette.n1,
      neutralVariant: palette.n2,
      error: palette.error
    },
    customColors: customColors.map(function (c) {
      return customColor(source, c);
    })
  };
}
function customColor(source, color) {
  var value = color.value;
  var from = value;
  var to = source;
  if (color.blend) {
    value = Blend.harmonize(from, to);
  }
  var palette = CorePalette.of(value);
  var tones = palette.a1;
  return {
    color: color,
    value: value,
    light: {
      color: tones.tone(40),
      onColor: tones.tone(100),
      colorContainer: tones.tone(90),
      onColorContainer: tones.tone(10)
    },
    dark: {
      color: tones.tone(80),
      onColor: tones.tone(20),
      colorContainer: tones.tone(30),
      onColorContainer: tones.tone(90)
    }
  };
}
/**
 * Apply a theme to an element
 *
 * @param theme Theme object
 * @param options Options
 */
function applyTheme(theme, options) {
  var _options$dark;
  var target = (options === null || options === void 0 ? void 0 : options.target) || document.body;
  var isDark = (_options$dark = options === null || options === void 0 ? void 0 : options.dark) !== null && _options$dark !== void 0 ? _options$dark : false;
  var scheme = isDark ? theme.schemes.dark : theme.schemes.light;
  setSchemeProperties(target, scheme);
  if (options !== null && options !== void 0 && options.brightnessSuffix) {
    setSchemeProperties(target, theme.schemes.dark, '-dark');
    setSchemeProperties(target, theme.schemes.light, '-light');
  }
  if (options !== null && options !== void 0 && options.paletteTones) {
    var _options$paletteTones;
    var tones = (_options$paletteTones = options === null || options === void 0 ? void 0 : options.paletteTones) !== null && _options$paletteTones !== void 0 ? _options$paletteTones : [];
    var style = document.createElement("style");
    style.type = 'text/css';
    var styleHtml = '';
    for (var _i = 0, _Object$entries = Object.entries(theme.palettes); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        palette = _Object$entries$_i[1];
      var paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
      var _iterator = _createForOfIteratorHelper(tones),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var tone = _step.value;
          var token = "--md-ref-palette-".concat(paletteKey, "-").concat(paletteKey).concat(tone);
          var color = hexFromArgb(palette.tone(tone));
          // target.style.setProperty(token, color);
          styleHtml += "".concat(token, ":").concat(color, ";");
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    styleHtml = ":root{".concat(styleHtml, "}");
    style.innerText = styleHtml;
    target.appendChild(style);
  }
}
function setSchemeProperties(target, scheme) {
  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var style = document.createElement("style");
  style.type = 'text/css';
  var styleHtml = '';
  for (var _i2 = 0, _Object$entries2 = Object.entries(scheme.toJSON()); _i2 < _Object$entries2.length; _i2++) {
    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
      key = _Object$entries2$_i[0],
      value = _Object$entries2$_i[1];
    var token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    var color = hexFromArgb(value);
    // target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);
    styleHtml += "--md-sys-color-".concat(token).concat(suffix, ":").concat(color, ";");
  }
  styleHtml = ":root{".concat(styleHtml, "}");
  style.innerText = styleHtml;
  target.appendChild(style);
}

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production_min = {};

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min () {
	if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
	hasRequiredReactJsxRuntime_production_min = 1;

	var f = React__default["default"],
	  k = Symbol.for("react.element"),
	  l = Symbol.for("react.fragment"),
	  m = Object.prototype.hasOwnProperty,
	  n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
	  p = {
	    key: !0,
	    ref: !0,
	    __self: !0,
	    __source: !0
	  };
	function q(c, a, g) {
	  var b,
	    d = {},
	    e = null,
	    h = null;
	  void 0 !== g && (e = "" + g);
	  void 0 !== a.key && (e = "" + a.key);
	  void 0 !== a.ref && (h = a.ref);
	  for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
	  if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
	  return {
	    $$typeof: k,
	    type: c,
	    key: e,
	    ref: h,
	    props: d,
	    _owner: n.current
	  };
	}
	reactJsxRuntime_production_min.Fragment = l;
	reactJsxRuntime_production_min.jsx = q;
	reactJsxRuntime_production_min.jsxs = q;
	return reactJsxRuntime_production_min;
}

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function () {

	    var React = React__default["default"];

	    // ATTENTION
	    // When adding new symbols to this file,
	    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	    // The Symbol used to tag the ReactElement-like types.
	    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	    var REACT_MEMO_TYPE = Symbol.for('react.memo');
	    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	    var FAUX_ITERATOR_SYMBOL = '@@iterator';
	    function getIteratorFn(maybeIterable) {
	      if (maybeIterable === null || typeof maybeIterable !== 'object') {
	        return null;
	      }
	      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	      if (typeof maybeIterator === 'function') {
	        return maybeIterator;
	      }
	      return null;
	    }
	    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	    function error(format) {
	      {
	        {
	          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	          }
	          printWarning('error', format, args);
	        }
	      }
	    }
	    function printWarning(level, format, args) {
	      // When changing this logic, you might want to also
	      // update consoleWithStackDev.www.js as well.
	      {
	        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	        var stack = ReactDebugCurrentFrame.getStackAddendum();
	        if (stack !== '') {
	          format += '%s';
	          args = args.concat([stack]);
	        } // eslint-disable-next-line react-internal/safe-string-coercion

	        var argsWithFormat = args.map(function (item) {
	          return String(item);
	        }); // Careful: RN currently depends on this prefix

	        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	        // breaks IE9: https://github.com/facebook/react/issues/13610
	        // eslint-disable-next-line react-internal/no-production-logging

	        Function.prototype.apply.call(console[level], console, argsWithFormat);
	      }
	    }

	    // -----------------------------------------------------------------------------

	    var enableScopeAPI = false; // Experimental Create Event Handle API.
	    var enableCacheElement = false;
	    var enableTransitionTracing = false; // No known bugs, but needs performance testing

	    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	    // stuff. Intended to enable React core members to more easily debug scheduling
	    // issues in DEV builds.

	    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	    var REACT_MODULE_REFERENCE;
	    {
	      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	    }
	    function isValidElementType(type) {
	      if (typeof type === 'string' || typeof type === 'function') {
	        return true;
	      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

	      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
	        return true;
	      }
	      if (typeof type === 'object' && type !== null) {
	        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
	        // This needs to include all possible module reference object
	        // types supported by any Flight configuration anywhere since
	        // we don't know which Flight build this will end up being used
	        // with.
	        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	          return true;
	        }
	      }
	      return false;
	    }
	    function getWrappedName(outerType, innerType, wrapperName) {
	      var displayName = outerType.displayName;
	      if (displayName) {
	        return displayName;
	      }
	      var functionName = innerType.displayName || innerType.name || '';
	      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	    } // Keep in sync with react-reconciler/getComponentNameFromFiber

	    function getContextName(type) {
	      return type.displayName || 'Context';
	    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.

	    function getComponentNameFromType(type) {
	      if (type == null) {
	        // Host root, text node or just invalid type.
	        return null;
	      }
	      {
	        if (typeof type.tag === 'number') {
	          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	        }
	      }
	      if (typeof type === 'function') {
	        return type.displayName || type.name || null;
	      }
	      if (typeof type === 'string') {
	        return type;
	      }
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return 'Fragment';
	        case REACT_PORTAL_TYPE:
	          return 'Portal';
	        case REACT_PROFILER_TYPE:
	          return 'Profiler';
	        case REACT_STRICT_MODE_TYPE:
	          return 'StrictMode';
	        case REACT_SUSPENSE_TYPE:
	          return 'Suspense';
	        case REACT_SUSPENSE_LIST_TYPE:
	          return 'SuspenseList';
	      }
	      if (typeof type === 'object') {
	        switch (type.$$typeof) {
	          case REACT_CONTEXT_TYPE:
	            var context = type;
	            return getContextName(context) + '.Consumer';
	          case REACT_PROVIDER_TYPE:
	            var provider = type;
	            return getContextName(provider._context) + '.Provider';
	          case REACT_FORWARD_REF_TYPE:
	            return getWrappedName(type, type.render, 'ForwardRef');
	          case REACT_MEMO_TYPE:
	            var outerName = type.displayName || null;
	            if (outerName !== null) {
	              return outerName;
	            }
	            return getComponentNameFromType(type.type) || 'Memo';
	          case REACT_LAZY_TYPE:
	            {
	              var lazyComponent = type;
	              var payload = lazyComponent._payload;
	              var init = lazyComponent._init;
	              try {
	                return getComponentNameFromType(init(payload));
	              } catch (x) {
	                return null;
	              }
	            }

	          // eslint-disable-next-line no-fallthrough
	        }
	      }

	      return null;
	    }
	    var assign = Object.assign;

	    // Helpers to patch console.logs to avoid logging during side-effect free
	    // replaying on render function. This currently only patches the object
	    // lazily which won't cover if the log function was extracted eagerly.
	    // We could also eagerly patch the method.
	    var disabledDepth = 0;
	    var prevLog;
	    var prevInfo;
	    var prevWarn;
	    var prevError;
	    var prevGroup;
	    var prevGroupCollapsed;
	    var prevGroupEnd;
	    function disabledLog() {}
	    disabledLog.__reactDisabledLog = true;
	    function disableLogs() {
	      {
	        if (disabledDepth === 0) {
	          /* eslint-disable react-internal/no-production-logging */
	          prevLog = console.log;
	          prevInfo = console.info;
	          prevWarn = console.warn;
	          prevError = console.error;
	          prevGroup = console.group;
	          prevGroupCollapsed = console.groupCollapsed;
	          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	          var props = {
	            configurable: true,
	            enumerable: true,
	            value: disabledLog,
	            writable: true
	          }; // $FlowFixMe Flow thinks console is immutable.

	          Object.defineProperties(console, {
	            info: props,
	            log: props,
	            warn: props,
	            error: props,
	            group: props,
	            groupCollapsed: props,
	            groupEnd: props
	          });
	          /* eslint-enable react-internal/no-production-logging */
	        }

	        disabledDepth++;
	      }
	    }
	    function reenableLogs() {
	      {
	        disabledDepth--;
	        if (disabledDepth === 0) {
	          /* eslint-disable react-internal/no-production-logging */
	          var props = {
	            configurable: true,
	            enumerable: true,
	            writable: true
	          }; // $FlowFixMe Flow thinks console is immutable.

	          Object.defineProperties(console, {
	            log: assign({}, props, {
	              value: prevLog
	            }),
	            info: assign({}, props, {
	              value: prevInfo
	            }),
	            warn: assign({}, props, {
	              value: prevWarn
	            }),
	            error: assign({}, props, {
	              value: prevError
	            }),
	            group: assign({}, props, {
	              value: prevGroup
	            }),
	            groupCollapsed: assign({}, props, {
	              value: prevGroupCollapsed
	            }),
	            groupEnd: assign({}, props, {
	              value: prevGroupEnd
	            })
	          });
	          /* eslint-enable react-internal/no-production-logging */
	        }

	        if (disabledDepth < 0) {
	          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	        }
	      }
	    }
	    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	    var prefix;
	    function describeBuiltInComponentFrame(name, source, ownerFn) {
	      {
	        if (prefix === undefined) {
	          // Extract the VM specific prefix used by each line.
	          try {
	            throw Error();
	          } catch (x) {
	            var match = x.stack.trim().match(/\n( *(at )?)/);
	            prefix = match && match[1] || '';
	          }
	        } // We use the prefix to ensure our stacks line up with native stack frames.

	        return '\n' + prefix + name;
	      }
	    }
	    var reentry = false;
	    var componentFrameCache;
	    {
	      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	      componentFrameCache = new PossiblyWeakMap();
	    }
	    function describeNativeComponentFrame(fn, construct) {
	      // If something asked for a stack inside a fake render, it should get ignored.
	      if (!fn || reentry) {
	        return '';
	      }
	      {
	        var frame = componentFrameCache.get(fn);
	        if (frame !== undefined) {
	          return frame;
	        }
	      }
	      var control;
	      reentry = true;
	      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	      Error.prepareStackTrace = undefined;
	      var previousDispatcher;
	      {
	        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	        // for warnings.

	        ReactCurrentDispatcher.current = null;
	        disableLogs();
	      }
	      try {
	        // This should throw.
	        if (construct) {
	          // Something should be setting the props in the constructor.
	          var Fake = function () {
	            throw Error();
	          }; // $FlowFixMe

	          Object.defineProperty(Fake.prototype, 'props', {
	            set: function () {
	              // We use a throwing setter instead of frozen or non-writable props
	              // because that won't throw in a non-strict mode function.
	              throw Error();
	            }
	          });
	          if (typeof Reflect === 'object' && Reflect.construct) {
	            // We construct a different control for this case to include any extra
	            // frames added by the construct call.
	            try {
	              Reflect.construct(Fake, []);
	            } catch (x) {
	              control = x;
	            }
	            Reflect.construct(fn, [], Fake);
	          } else {
	            try {
	              Fake.call();
	            } catch (x) {
	              control = x;
	            }
	            fn.call(Fake.prototype);
	          }
	        } else {
	          try {
	            throw Error();
	          } catch (x) {
	            control = x;
	          }
	          fn();
	        }
	      } catch (sample) {
	        // This is inlined manually because closure doesn't do it for us.
	        if (sample && control && typeof sample.stack === 'string') {
	          // This extracts the first frame from the sample that isn't also in the control.
	          // Skipping one frame that we assume is the frame that calls the two.
	          var sampleLines = sample.stack.split('\n');
	          var controlLines = control.stack.split('\n');
	          var s = sampleLines.length - 1;
	          var c = controlLines.length - 1;
	          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	            // We expect at least one stack frame to be shared.
	            // Typically this will be the root most one. However, stack frames may be
	            // cut off due to maximum stack limits. In this case, one maybe cut off
	            // earlier than the other. We assume that the sample is longer or the same
	            // and there for cut off earlier. So we should find the root most frame in
	            // the sample somewhere in the control.
	            c--;
	          }
	          for (; s >= 1 && c >= 0; s--, c--) {
	            // Next we find the first one that isn't the same which should be the
	            // frame that called our sample function and the control.
	            if (sampleLines[s] !== controlLines[c]) {
	              // In V8, the first line is describing the message but other VMs don't.
	              // If we're about to return the first line, and the control is also on the same
	              // line, that's a pretty good indicator that our sample threw at same line as
	              // the control. I.e. before we entered the sample frame. So we ignore this result.
	              // This can happen if you passed a class to function component, or non-function.
	              if (s !== 1 || c !== 1) {
	                do {
	                  s--;
	                  c--; // We may still have similar intermediate frames from the construct call.
	                  // The next one that isn't the same should be our match though.

	                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                    // but we have a user-provided "displayName"
	                    // splice it in to make the stack more readable.

	                    if (fn.displayName && _frame.includes('<anonymous>')) {
	                      _frame = _frame.replace('<anonymous>', fn.displayName);
	                    }
	                    {
	                      if (typeof fn === 'function') {
	                        componentFrameCache.set(fn, _frame);
	                      }
	                    } // Return the line we found.

	                    return _frame;
	                  }
	                } while (s >= 1 && c >= 0);
	              }
	              break;
	            }
	          }
	        }
	      } finally {
	        reentry = false;
	        {
	          ReactCurrentDispatcher.current = previousDispatcher;
	          reenableLogs();
	        }
	        Error.prepareStackTrace = previousPrepareStackTrace;
	      } // Fallback to just using the name if we couldn't make it throw.

	      var name = fn ? fn.displayName || fn.name : '';
	      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
	      {
	        if (typeof fn === 'function') {
	          componentFrameCache.set(fn, syntheticFrame);
	        }
	      }
	      return syntheticFrame;
	    }
	    function describeFunctionComponentFrame(fn, source, ownerFn) {
	      {
	        return describeNativeComponentFrame(fn, false);
	      }
	    }
	    function shouldConstruct(Component) {
	      var prototype = Component.prototype;
	      return !!(prototype && prototype.isReactComponent);
	    }
	    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
	      if (type == null) {
	        return '';
	      }
	      if (typeof type === 'function') {
	        {
	          return describeNativeComponentFrame(type, shouldConstruct(type));
	        }
	      }
	      if (typeof type === 'string') {
	        return describeBuiltInComponentFrame(type);
	      }
	      switch (type) {
	        case REACT_SUSPENSE_TYPE:
	          return describeBuiltInComponentFrame('Suspense');
	        case REACT_SUSPENSE_LIST_TYPE:
	          return describeBuiltInComponentFrame('SuspenseList');
	      }
	      if (typeof type === 'object') {
	        switch (type.$$typeof) {
	          case REACT_FORWARD_REF_TYPE:
	            return describeFunctionComponentFrame(type.render);
	          case REACT_MEMO_TYPE:
	            // Memo may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
	          case REACT_LAZY_TYPE:
	            {
	              var lazyComponent = type;
	              var payload = lazyComponent._payload;
	              var init = lazyComponent._init;
	              try {
	                // Lazy may contain any component type so we recursively resolve it.
	                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	              } catch (x) {}
	            }
	        }
	      }
	      return '';
	    }
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    var loggedTypeFailures = {};
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    function setCurrentlyValidatingElement(element) {
	      {
	        if (element) {
	          var owner = element._owner;
	          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	          ReactDebugCurrentFrame.setExtraStackFrame(stack);
	        } else {
	          ReactDebugCurrentFrame.setExtraStackFrame(null);
	        }
	      }
	    }
	    function checkPropTypes(typeSpecs, values, location, componentName, element) {
	      {
	        // $FlowFixMe This is okay but Flow doesn't know it.
	        var has = Function.call.bind(hasOwnProperty);
	        for (var typeSpecName in typeSpecs) {
	          if (has(typeSpecs, typeSpecName)) {
	            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	            // fail the render phase where it didn't fail before. So we log it.
	            // After these have been cleaned up, we'll let them throw.

	            try {
	              // This is intentionally an invariant that gets caught. It's the same
	              // behavior as without this statement except with a better message.
	              if (typeof typeSpecs[typeSpecName] !== 'function') {
	                // eslint-disable-next-line react-internal/prod-error-codes
	                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	                err.name = 'Invariant Violation';
	                throw err;
	              }
	              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	            } catch (ex) {
	              error$1 = ex;
	            }
	            if (error$1 && !(error$1 instanceof Error)) {
	              setCurrentlyValidatingElement(element);
	              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
	              setCurrentlyValidatingElement(null);
	            }
	            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	              // Only monitor this failure once because there tends to be a lot of the
	              // same error.
	              loggedTypeFailures[error$1.message] = true;
	              setCurrentlyValidatingElement(element);
	              error('Failed %s type: %s', location, error$1.message);
	              setCurrentlyValidatingElement(null);
	            }
	          }
	        }
	      }
	    }
	    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	    function isArray(a) {
	      return isArrayImpl(a);
	    }

	    /*
	     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	     *
	     * The functions in this module will throw an easier-to-understand,
	     * easier-to-debug exception with a clear errors message message explaining the
	     * problem. (Instead of a confusing exception thrown inside the implementation
	     * of the `value` object).
	     */
	    // $FlowFixMe only called in DEV, so void return is not possible.
	    function typeName(value) {
	      {
	        // toStringTag is needed for namespaced types like Temporal.Instant
	        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	        return type;
	      }
	    } // $FlowFixMe only called in DEV, so void return is not possible.

	    function willCoercionThrow(value) {
	      {
	        try {
	          testStringCoercion(value);
	          return false;
	        } catch (e) {
	          return true;
	        }
	      }
	    }
	    function testStringCoercion(value) {
	      // If you ended up here by following an exception call stack, here's what's
	      // happened: you supplied an object or symbol value to React (as a prop, key,
	      // DOM attribute, CSS property, string ref, etc.) and when React tried to
	      // coerce it to a string using `'' + value`, an exception was thrown.
	      //
	      // The most common types that will cause this exception are `Symbol` instances
	      // and Temporal objects like `Temporal.Instant`. But any object that has a
	      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	      // exception. (Library authors do this to prevent users from using built-in
	      // numeric operators like `+` or comparison operators like `>=` because custom
	      // methods are needed to perform accurate arithmetic or comparison.)
	      //
	      // To fix the problem, coerce this object or symbol value to a string before
	      // passing it to React. The most reliable way is usually `String(value)`.
	      //
	      // To find which value is throwing, check the browser or debugger console.
	      // Before this exception was thrown, there should be `console.error` output
	      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	      // problem and how that type was used: key, atrribute, input value prop, etc.
	      // In most cases, this console output also shows the component and its
	      // ancestor components where the exception happened.
	      //
	      // eslint-disable-next-line react-internal/safe-string-coercion
	      return '' + value;
	    }
	    function checkKeyStringCoercion(value) {
	      {
	        if (willCoercionThrow(value)) {
	          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
	          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	        }
	      }
	    }

	    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	    var RESERVED_PROPS = {
	      key: true,
	      ref: true,
	      __self: true,
	      __source: true
	    };
	    var specialPropKeyWarningShown;
	    var specialPropRefWarningShown;
	    var didWarnAboutStringRefs;
	    {
	      didWarnAboutStringRefs = {};
	    }
	    function hasValidRef(config) {
	      {
	        if (hasOwnProperty.call(config, 'ref')) {
	          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	          if (getter && getter.isReactWarning) {
	            return false;
	          }
	        }
	      }
	      return config.ref !== undefined;
	    }
	    function hasValidKey(config) {
	      {
	        if (hasOwnProperty.call(config, 'key')) {
	          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	          if (getter && getter.isReactWarning) {
	            return false;
	          }
	        }
	      }
	      return config.key !== undefined;
	    }
	    function warnIfStringRefCannotBeAutoConverted(config, self) {
	      {
	        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
	          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
	          if (!didWarnAboutStringRefs[componentName]) {
	            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
	            didWarnAboutStringRefs[componentName] = true;
	          }
	        }
	      }
	    }
	    function defineKeyPropWarningGetter(props, displayName) {
	      {
	        var warnAboutAccessingKey = function () {
	          if (!specialPropKeyWarningShown) {
	            specialPropKeyWarningShown = true;
	            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	          }
	        };
	        warnAboutAccessingKey.isReactWarning = true;
	        Object.defineProperty(props, 'key', {
	          get: warnAboutAccessingKey,
	          configurable: true
	        });
	      }
	    }
	    function defineRefPropWarningGetter(props, displayName) {
	      {
	        var warnAboutAccessingRef = function () {
	          if (!specialPropRefWarningShown) {
	            specialPropRefWarningShown = true;
	            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	          }
	        };
	        warnAboutAccessingRef.isReactWarning = true;
	        Object.defineProperty(props, 'ref', {
	          get: warnAboutAccessingRef,
	          configurable: true
	        });
	      }
	    }
	    /**
	     * Factory method to create a new React element. This no longer adheres to
	     * the class pattern, so do not use new to call it. Also, instanceof check
	     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	     * if something is a React Element.
	     *
	     * @param {*} type
	     * @param {*} props
	     * @param {*} key
	     * @param {string|object} ref
	     * @param {*} owner
	     * @param {*} self A *temporary* helper to detect places where `this` is
	     * different from the `owner` when React.createElement is called, so that we
	     * can warn. We want to get rid of owner and replace string `ref`s with arrow
	     * functions, and as long as `this` and owner are the same, there will be no
	     * change in behavior.
	     * @param {*} source An annotation object (added by a transpiler or otherwise)
	     * indicating filename, line number, and/or other information.
	     * @internal
	     */

	    var ReactElement = function (type, key, ref, self, source, owner, props) {
	      var element = {
	        // This tag allows us to uniquely identify this as a React Element
	        $$typeof: REACT_ELEMENT_TYPE,
	        // Built-in properties that belong on the element
	        type: type,
	        key: key,
	        ref: ref,
	        props: props,
	        // Record the component responsible for creating this element.
	        _owner: owner
	      };
	      {
	        // The validation flag is currently mutative. We put it on
	        // an external backing store so that we can freeze the whole object.
	        // This can be replaced with a WeakMap once they are implemented in
	        // commonly used development environments.
	        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	        // the validation flag non-enumerable (where possible, which should
	        // include every environment we run tests in), so the test framework
	        // ignores it.

	        Object.defineProperty(element._store, 'validated', {
	          configurable: false,
	          enumerable: false,
	          writable: true,
	          value: false
	        }); // self and source are DEV only properties.

	        Object.defineProperty(element, '_self', {
	          configurable: false,
	          enumerable: false,
	          writable: false,
	          value: self
	        }); // Two elements created in two different places should be considered
	        // equal for testing purposes and therefore we hide it from enumeration.

	        Object.defineProperty(element, '_source', {
	          configurable: false,
	          enumerable: false,
	          writable: false,
	          value: source
	        });
	        if (Object.freeze) {
	          Object.freeze(element.props);
	          Object.freeze(element);
	        }
	      }
	      return element;
	    };
	    /**
	     * https://github.com/reactjs/rfcs/pull/107
	     * @param {*} type
	     * @param {object} props
	     * @param {string} key
	     */

	    function jsxDEV(type, config, maybeKey, source, self) {
	      {
	        var propName; // Reserved names are extracted

	        var props = {};
	        var key = null;
	        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
	        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
	        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
	        // but as an intermediary step, we will use jsxDEV for everything except
	        // <div {...props} key="Hi" />, because we aren't currently able to tell if
	        // key is explicitly declared to be undefined or not.

	        if (maybeKey !== undefined) {
	          {
	            checkKeyStringCoercion(maybeKey);
	          }
	          key = '' + maybeKey;
	        }
	        if (hasValidKey(config)) {
	          {
	            checkKeyStringCoercion(config.key);
	          }
	          key = '' + config.key;
	        }
	        if (hasValidRef(config)) {
	          ref = config.ref;
	          warnIfStringRefCannotBeAutoConverted(config, self);
	        } // Remaining properties are added to a new props object

	        for (propName in config) {
	          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	            props[propName] = config[propName];
	          }
	        } // Resolve default props

	        if (type && type.defaultProps) {
	          var defaultProps = type.defaultProps;
	          for (propName in defaultProps) {
	            if (props[propName] === undefined) {
	              props[propName] = defaultProps[propName];
	            }
	          }
	        }
	        if (key || ref) {
	          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	          if (key) {
	            defineKeyPropWarningGetter(props, displayName);
	          }
	          if (ref) {
	            defineRefPropWarningGetter(props, displayName);
	          }
	        }
	        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	      }
	    }
	    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
	    function setCurrentlyValidatingElement$1(element) {
	      {
	        if (element) {
	          var owner = element._owner;
	          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	        } else {
	          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	        }
	      }
	    }
	    var propTypesMisspellWarningShown;
	    {
	      propTypesMisspellWarningShown = false;
	    }
	    /**
	     * Verifies the object is a ReactElement.
	     * See https://reactjs.org/docs/react-api.html#isvalidelement
	     * @param {?object} object
	     * @return {boolean} True if `object` is a ReactElement.
	     * @final
	     */

	    function isValidElement(object) {
	      {
	        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	      }
	    }
	    function getDeclarationErrorAddendum() {
	      {
	        if (ReactCurrentOwner$1.current) {
	          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
	          if (name) {
	            return '\n\nCheck the render method of `' + name + '`.';
	          }
	        }
	        return '';
	      }
	    }
	    function getSourceInfoErrorAddendum(source) {
	      {
	        if (source !== undefined) {
	          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	          var lineNumber = source.lineNumber;
	          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	        }
	        return '';
	      }
	    }
	    /**
	     * Warn if there's no key explicitly set on dynamic arrays of children or
	     * object keys are not valid. This allows us to keep track of children between
	     * updates.
	     */

	    var ownerHasKeyUseWarning = {};
	    function getCurrentComponentErrorInfo(parentType) {
	      {
	        var info = getDeclarationErrorAddendum();
	        if (!info) {
	          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	          if (parentName) {
	            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	          }
	        }
	        return info;
	      }
	    }
	    /**
	     * Warn if the element doesn't have an explicit key assigned to it.
	     * This element is in an array. The array could grow and shrink or be
	     * reordered. All children that haven't already been validated are required to
	     * have a "key" property assigned to it. Error statuses are cached so a warning
	     * will only be shown once.
	     *
	     * @internal
	     * @param {ReactElement} element Element that requires a key.
	     * @param {*} parentType element's parent's type.
	     */

	    function validateExplicitKey(element, parentType) {
	      {
	        if (!element._store || element._store.validated || element.key != null) {
	          return;
	        }
	        element._store.validated = true;
	        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	          return;
	        }
	        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	        // property, it may be the creator of the child that's responsible for
	        // assigning it a key.

	        var childOwner = '';
	        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
	          // Give the component that originally created this child.
	          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	        }
	        setCurrentlyValidatingElement$1(element);
	        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
	        setCurrentlyValidatingElement$1(null);
	      }
	    }
	    /**
	     * Ensure that every element either is passed in a static location, in an
	     * array with an explicit keys property defined, or in an object literal
	     * with valid key property.
	     *
	     * @internal
	     * @param {ReactNode} node Statically passed child of any type.
	     * @param {*} parentType node's parent's type.
	     */

	    function validateChildKeys(node, parentType) {
	      {
	        if (typeof node !== 'object') {
	          return;
	        }
	        if (isArray(node)) {
	          for (var i = 0; i < node.length; i++) {
	            var child = node[i];
	            if (isValidElement(child)) {
	              validateExplicitKey(child, parentType);
	            }
	          }
	        } else if (isValidElement(node)) {
	          // This element was passed in a valid location.
	          if (node._store) {
	            node._store.validated = true;
	          }
	        } else if (node) {
	          var iteratorFn = getIteratorFn(node);
	          if (typeof iteratorFn === 'function') {
	            // Entry iterators used to provide implicit keys,
	            // but now we print a separate warning for them later.
	            if (iteratorFn !== node.entries) {
	              var iterator = iteratorFn.call(node);
	              var step;
	              while (!(step = iterator.next()).done) {
	                if (isValidElement(step.value)) {
	                  validateExplicitKey(step.value, parentType);
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	    /**
	     * Given an element, validate that its props follow the propTypes definition,
	     * provided by the type.
	     *
	     * @param {ReactElement} element
	     */

	    function validatePropTypes(element) {
	      {
	        var type = element.type;
	        if (type === null || type === undefined || typeof type === 'string') {
	          return;
	        }
	        var propTypes;
	        if (typeof type === 'function') {
	          propTypes = type.propTypes;
	        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
	        // Note: Memo only checks outer props here.
	        // Inner props are checked in the reconciler.
	        type.$$typeof === REACT_MEMO_TYPE)) {
	          propTypes = type.propTypes;
	        } else {
	          return;
	        }
	        if (propTypes) {
	          // Intentionally inside to avoid triggering lazy initializers:
	          var name = getComponentNameFromType(type);
	          checkPropTypes(propTypes, element.props, 'prop', name, element);
	        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	          var _name = getComponentNameFromType(type);
	          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	        }
	        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	        }
	      }
	    }
	    /**
	     * Given a fragment, validate that it can only be provided with fragment props
	     * @param {ReactElement} fragment
	     */

	    function validateFragmentProps(fragment) {
	      {
	        var keys = Object.keys(fragment.props);
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i];
	          if (key !== 'children' && key !== 'key') {
	            setCurrentlyValidatingElement$1(fragment);
	            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
	            setCurrentlyValidatingElement$1(null);
	            break;
	          }
	        }
	        if (fragment.ref !== null) {
	          setCurrentlyValidatingElement$1(fragment);
	          error('Invalid attribute `ref` supplied to `React.Fragment`.');
	          setCurrentlyValidatingElement$1(null);
	        }
	      }
	    }
	    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
	      {
	        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	        // succeed and there will likely be errors in render.

	        if (!validType) {
	          var info = '';
	          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	          }
	          var sourceInfo = getSourceInfoErrorAddendum(source);
	          if (sourceInfo) {
	            info += sourceInfo;
	          } else {
	            info += getDeclarationErrorAddendum();
	          }
	          var typeString;
	          if (type === null) {
	            typeString = 'null';
	          } else if (isArray(type)) {
	            typeString = 'array';
	          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	            info = ' Did you accidentally export a JSX literal instead of a component?';
	          } else {
	            typeString = typeof type;
	          }
	          error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	        }
	        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
	        // TODO: Drop this when these are no longer allowed as the type argument.

	        if (element == null) {
	          return element;
	        } // Skip key warning if the type isn't valid since our key validation logic
	        // doesn't expect a non-string/function type and can throw confusing errors.
	        // We don't want exception behavior to differ between dev and prod.
	        // (Rendering will throw with a helpful message and as soon as the type is
	        // fixed, the key warnings will appear.)

	        if (validType) {
	          var children = props.children;
	          if (children !== undefined) {
	            if (isStaticChildren) {
	              if (isArray(children)) {
	                for (var i = 0; i < children.length; i++) {
	                  validateChildKeys(children[i], type);
	                }
	                if (Object.freeze) {
	                  Object.freeze(children);
	                }
	              } else {
	                error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
	              }
	            } else {
	              validateChildKeys(children, type);
	            }
	          }
	        }
	        if (type === REACT_FRAGMENT_TYPE) {
	          validateFragmentProps(element);
	        } else {
	          validatePropTypes(element);
	        }
	        return element;
	      }
	    } // These two functions exist to still get child warnings in dev
	    // even with the prod transform. This means that jsxDEV is purely
	    // opt-in behavior for better messages but that we won't stop
	    // giving you warnings if you use production apis.

	    function jsxWithValidationStatic(type, props, key) {
	      {
	        return jsxWithValidation(type, props, key, true);
	      }
	    }
	    function jsxWithValidationDynamic(type, props, key) {
	      {
	        return jsxWithValidation(type, props, key, false);
	      }
	    }
	    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
	    // for now we can ship identical prod functions

	    var jsxs = jsxWithValidationStatic;
	    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	    reactJsxRuntime_development.jsx = jsx;
	    reactJsxRuntime_development.jsxs = jsxs;
	  })();
	}
	return reactJsxRuntime_development;
}

(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = requireReactJsxRuntime_production_min();
	} else {
	  module.exports = requireReactJsxRuntime_development();
	}
} (jsxRuntime));

var classnames$1 = {exports: {}};

/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */

	(function () {

	  var hasOwn = {}.hasOwnProperty;
	  function classNames() {
	    var classes = [];
	    for (var i = 0; i < arguments.length; i++) {
	      var arg = arguments[i];
	      if (!arg) continue;
	      var argType = typeof arg;
	      if (argType === 'string' || argType === 'number') {
	        classes.push(arg);
	      } else if (Array.isArray(arg)) {
	        if (arg.length) {
	          var inner = classNames.apply(null, arg);
	          if (inner) {
	            classes.push(inner);
	          }
	        }
	      } else if (argType === 'object') {
	        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
	          classes.push(arg.toString());
	          continue;
	        }
	        for (var key in arg) {
	          if (hasOwn.call(arg, key) && arg[key]) {
	            classes.push(key);
	          }
	        }
	      }
	    }
	    return classes.join(' ');
	  }
	  if (module.exports) {
	    classNames.default = classNames;
	    module.exports = classNames;
	  } else {
	    window.classNames = classNames;
	  }
	})();
} (classnames$1));

var classnames = classnames$1.exports;

var CSS_CLASSES$t = {
  ROOT: 'mdc-badge',
  LARGE: 'large'
};

var css_248z$C = ".mdc-badge{--_color:var(--md-badge-color,var(--md-sys-color-error,#b3261e));--_large-color:var(\n    --md-badge-large-color,var(--md-sys-color-error,#b3261e)\n  );--_large-label-text-color:var(\n    --md-badge-large-label-text-color,var(--md-sys-color-on-error,#fff)\n  );--_large-label-text-type:var(\n    --md-badge-large-label-text-type,var(\n      --md-sys-typescale-label-small,500 0.688rem/1rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_large-shape:var(--md-badge-large-shape,9999px);--_large-size:var(--md-badge-large-size,16px);--_shape:var(--md-badge-shape,9999px);--_size:var(--md-badge-size,6px);-webkit-margin-start:6px;-webkit-margin-before:4px;background-color:var(--_color);border-radius:var(--_shape);height:var(--_size);position:absolute}.mdc-badge:not(.md3-badge--large){width:var(--_size)}.mdc-badge.top-right{right:0;top:0}.mdc-badge.bottom-right{bottom:0;right:0}.mdc-badge.top-left{left:0;top:0}.mdc-badge.bottom-left{bottom:0;left:0}.mdc-badge.top-center{left:50%;top:0}.mdc-badge.bottom-center{bottom:0;left:50%}.mdc-badge.center{left:50%;top:50%}.mdc-badge .value{font:var(--_large-label-text-type)}.mdc-badge.large{-webkit-margin-start:2px;-webkit-margin-before:1px;background-color:var(--_large-color);border-radius:var(--_large-shape);color:var(--_large-label-text-color);display:flex;flex-direction:column;height:var(--_large-size);justify-content:center;margin-block-start:1px;margin-inline-start:2px;min-width:var(--_large-size)}.mdc-badge.large .value{margin:0;padding:0 4px}";
styleInject(css_248z$C);

var Badge = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var _ref$position = _ref.position,
    position = _ref$position === void 0 ? 'top-right' : _ref$position,
    className = _ref.className,
    children = _ref.children;
  var classNames = classnames(CSS_CLASSES$t.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$t.LARGE, !!children), _defineProperty(_classnames, 'top-right', position === 'top-right'), _defineProperty(_classnames, 'top-left', position === 'top-left'), _defineProperty(_classnames, 'top-center', position === 'top-center'), _defineProperty(_classnames, 'bottom-right', position === 'bottom-right'), _defineProperty(_classnames, 'bottom-left', position === 'bottom-left'), _defineProperty(_classnames, 'bottom-center', position === 'bottom-center'), _defineProperty(_classnames, 'center', position === 'center'), _classnames));
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    ref: ref,
    children: jsxRuntime.exports.jsx("p", {
      className: 'value',
      children: children
    })
  });
});
Badge.displayName = 'Badge';

var CSS_CLASSES$s = {
  ROOT: 'mdc-focus',
  VISIBLE: 'visible'
};

var css_248z$B = ".mdc-focus{--_active-width:var(--md-focus-ring-active-width,8px);--_color:var(--md-focus-ring-color,var(--md-sys-color-secondary,#625b71));--_duration:var(--md-focus-ring-duration,600ms);--_offset:var(--md-focus-ring-offset,2px);--_shape:var(--md-focus-ring-shape,9999px);--_width:var(--md-focus-ring-width,3px);--_shape-start-start:var(--md-focus-ring-shape-start-start,var(--_shape));--_shape-start-end:var(--md-focus-ring-shape-start-end,var(--_shape));--_shape-end-end:var(--md-focus-ring-shape-end-end,var(--_shape));--_shape-end-start:var(--md-focus-ring-shape-end-start,var(--_shape));animation-duration:var(--_duration);animation-timing-function:cubic-bezier(.2,0,0,1);border-end-end-radius:calc(var(--_offset) + var(--_shape-end-end));border-end-start-radius:calc(var(--_offset) + var(--_shape-end-start));border-start-end-radius:calc(var(--_offset) + var(--_shape-start-end));border-start-start-radius:calc(var(--_offset) + var(--_shape-start-start));box-shadow:inset 0 0 0 0 currentColor;box-sizing:border-box;color:var(--_color);display:none;inset:calc((var(--_offset) + 1px)*-1);outline:var(--_width) solid currentColor;outline-offset:-1px;pointer-events:none;position:absolute}.mdc-focus.visible{animation-name:focus-ring;display:flex}@keyframes focus-ring{0%{outline-width:0}25%{box-shadow:inset 0 0 0 calc(var(--_active-width)/2) currentColor;outline-width:calc(var(--_active-width)/2)}}@media (prefers-reduced-motion){.mdc-focus :host{animation:none}}";
styleInject(css_248z$B);

var Focus = function Focus(_ref) {
  var parent = _ref.parent,
    className = _ref.className;
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    visible = _useState2[0],
    setVisible = _useState2[1];
  var classNames = React.useMemo(function () {
    return classnames(CSS_CLASSES$s.ROOT, className, _defineProperty({}, CSS_CLASSES$s.VISIBLE, visible));
  }, [visible]);
  React.useEffect(function () {
    if (parent.current) {
      parent.current.onmousedown = function () {
        setVisible(true);
      };
      parent.current.onmouseup = function () {
        setVisible(false);
      };
    }
  }, [parent.current]);
  return jsxRuntime.exports.jsx("div", {
    className: classNames
  });
};

var dP$2 = _objectDp.f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || _descriptors && dP$2(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

var global$1 = _global.exports;
var inheritIfRequired$1 = _inheritIfRequired;
var dP$1 = _objectDp.f;
var gOPN$1 = _objectGopn.f;
var isRegExp$1 = _isRegexp;
var $flags = _flags;
var $RegExp = global$1.RegExp;
var Base$1 = $RegExp;
var proto$1 = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;
if (_descriptors && (!CORRECT_NEW || _fails(function () {
  re2[_wks.exports('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp$1(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired$1(CORRECT_NEW ? new Base$1(piRE && !fiU ? p.source : p, f) : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto$1, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP$1($RegExp, key, {
      configurable: true,
      get: function () {
        return Base$1[key];
      },
      set: function (it) {
        Base$1[key] = it;
      }
    });
  };
  for (var keys$1 = gOPN$1(Base$1), i$1 = 0; keys$1.length > i$1;) proxy(keys$1[i$1++]);
  proto$1.constructor = $RegExp;
  $RegExp.prototype = proto$1;
  _redefine.exports(global$1, 'RegExp', $RegExp);
}
_setSpecies('RegExp');

function Slot(_) {
  return null;
}
Slot.getSlot = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {
  return _regeneratorRuntime().wrap(function getCollectionNode$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.next = 2;
        return props.children;
      case 2:
      case "end":
        return _context.stop();
    }
  }, getCollectionNode);
});
Slot.displayName = 'Slot';
var _Slot = Slot;

function useSlot(children) {
  var result = {
    children: []
  };
  React__default["default"].Children.map(children, function (child) {
    if ( /*#__PURE__*/React__default["default"].isValidElement(child)) {
      var type = child.type;
      var props = child.props;
      var name = type.displayName;
      if (name === 'Slot') {
        var slot = type.getSlot(child.props);
        result[props.name] = slot.next().value;
      } else if (name === 'Icon') {
        if (result['children'].length) {
          result['trailingicon'] = child;
        } else {
          result['leadingicon'] = child;
        }
      } else {
        result['children'].push(child);
      }
    } else {
      result['children'].push(child);
    }
  });
  return result;
}

function useFocus() {
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    focused = _useState2[0],
    setFocus = _useState2[1];
  function doBlur() {
    setFocus(false);
  }
  function doFocus() {
    setFocus(true);
  }
  return {
    focused: focused,
    doBlur: doBlur,
    doFocus: doFocus
  };
}

var CSS_CLASSES$r = {
  ROOT: 'mdc-field',
  FILLED: 'mdc-filled-field',
  OUTLINED: 'mdc-outlined-field',
  DISABLED: 'disabled',
  ERROR: 'error',
  START: 'with-start',
  END: 'with-end',
  POPULATED: 'populated',
  NO_LABEL: 'no-label'
};

var css_248z$A = ".mdc-field{display:inline-flex;width:100%}.mdc-field .field{display:flex;flex:1;flex-direction:column;max-width:100%;writing-mode:horizontal-tb}.mdc-field .container-overflow{border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start);display:flex;position:relative}.mdc-field .container{align-items:center;border-radius:inherit;display:flex;overflow:hidden;padding-bottom:var(--_container-padding-vertical);padding-top:var(--_container-padding-vertical);position:relative;width:100%}.mdc-field .resizable .container{resize:both}.mdc-field .disabled{pointer-events:none}.mdc-field .end,.mdc-field .middle,.mdc-field .start{box-sizing:border-box;display:flex;height:100%;position:relative}.mdc-field .start{color:var(--_leading-content-color)}.mdc-field .end{color:var(--_trailing-content-color)}.mdc-field .end,.mdc-field .start{align-items:center;justify-content:center}.mdc-field .start{-webkit-padding-start:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding));padding-inline-start:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.mdc-field .end{-webkit-padding-end:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-end),var(--_container-shape-end-end)));padding-inline-end:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.mdc-field .with-start .start{-webkit-margin-end:4px;margin-inline-end:4px}.mdc-field .with-end .end{-webkit-margin-start:4px;margin-inline-start:4px}.mdc-field .middle{align-items:stretch;align-self:baseline;flex:1}.mdc-field .content{color:var(--_content-color);display:flex;flex:1;font:var(--_content-type);opacity:0;transition:opacity 83ms cubic-bezier(.2,0,0,1)}.mdc-field .content .label{align-items:center;display:flex}.mdc-field .focused .content,.mdc-field .no-label .content,.mdc-field .populated .content{opacity:1;transition-delay:67ms}.mdc-field:hover{cursor:pointer}.mdc-field:hover .content{color:var(--_hover-content-color)}.mdc-field:hover .start{color:var(--_hover-leading-content-color)}.mdc-field:hover .end{color:var(--_hover-trailing-content-color)}.mdc-field .focused .content{color:var(--_focus-content-color)}.mdc-field .focused .start{color:var(--_focus-leading-content-color)}.mdc-field .focused .end{color:var(--_focus-trailing-content-color)}.mdc-field .disabled .content{color:var(--_disabled-content-color)}.mdc-field .disabled.focused .content,.mdc-field .disabled.no-label .content,.mdc-field .disabled.populated .content{opacity:var(--_disabled-content-opacity)}.mdc-field .disabled .start{color:var(--_disabled-leading-content-color);opacity:var(--_disabled-leading-content-opacity)}.mdc-field .disabled .end{color:var(--_disabled-trailing-content-color);opacity:var(--_disabled-trailing-content-opacity)}.mdc-field .error .content{color:var(--_error-content-color)}.mdc-field .error .start{color:var(--_error-leading-content-color)}.mdc-field .error .end{color:var(--_error-trailing-content-color)}.mdc-field .error:hover .content{color:var(--_error-hover-content-color)}.mdc-field .error:hover .start{color:var(--_error-hover-leading-content-color)}.mdc-field .error:hover .end{color:var(--_error-hover-trailing-content-color)}.mdc-field .error.focused .content{color:var(--_error-focus-content-color)}.mdc-field .error.focused .start{color:var(--_error-focus-leading-content-color)}.mdc-field .error.focused .end{color:var(--_error-focus-trailing-content-color)}.mdc-field .label{color:var(--_label-text-color);font:var(--_label-text-type);max-width:100%;overflow:hidden;pointer-events:none;text-overflow:ellipsis;white-space:nowrap;z-index:1}.mdc-field .label.resting{position:absolute;top:50%;transform:translateY(-50%)}.mdc-field .label.floating{font-size:var(--_label-text-populated-size);line-height:var(--_label-text-populated-line-height);transform-origin:top left}.mdc-field .label.hidden{opacity:0}.mdc-field .no-label .label{display:none}.mdc-field :hover .label{color:var(--_hover-label-text-color)}.mdc-field .focused .label{color:var(--_focus-label-text-color)}.mdc-field .disabled .label{color:var(--_disabled-label-text-color)}.mdc-field .disabled .label:not(.hidden){opacity:var(--_disabled-label-text-opacity)}.mdc-field .error .label{color:var(--_error-label-text-color)}.mdc-field .error:hover .label{color:var(--_error-hover-label-text-color)}.mdc-field .error.focused .label{color:var(--_error-focus-label-text-color)}.mdc-field .supporting-text{color:var(--_supporting-text-color);display:flex;font:var(--_supporting-text-type);justify-content:space-between;padding:0 var(--_supporting-text-padding)}.mdc-field .supporting-text-end,.mdc-field .supporting-text-start{display:flex}.mdc-field .supporting-text-end ::slotted(:not(:empty)),.mdc-field .supporting-text-start ::slotted(:not(:empty)){padding-top:var(--_supporting-text-padding-top)}.mdc-field .supporting-text-end ::slotted(:not(:empty)){-webkit-padding-start:var(--_supporting-text-padding);padding-inline-start:var(--_supporting-text-padding)}.mdc-field :hover .supporting-text{color:var(--_hover-supporting-text-color)}.mdc-field .focus .supporting-text{color:var(--_focus-supporting-text-color)}.mdc-field .disabled .supporting-text{color:var(--_disabled-supporting-text-color);opacity:var(--_disabled-supporting-text-opacity)}.mdc-field .error .supporting-text{color:var(--_error-supporting-text-color)}.mdc-field .error:hover .supporting-text{color:var(--_error-hover-supporting-text-color)}.mdc-field .error.focus .supporting-text{color:var(--_error-focus-supporting-text-color)}.mdc-filled-field{--_active-indicator-color:var(\n    --md-filled-field-active-indicator-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_active-indicator-height:var(\n    --md-filled-field-active-indicator-height,1px\n  );--_container-color:var(\n    --md-filled-field-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_container-padding-horizontal:var(\n    --md-filled-field-container-padding-horizontal,16px\n  );--_container-padding-vertical:var(\n    --md-filled-field-container-padding-vertical,16px\n  );--_container-shape-start-start:var(\n    --md-filled-field-container-shape-start-start,var(--md-filled-field-container-shape,4px)\n  );--_container-shape-start-end:var(\n    --md-filled-field-container-shape-start-end,var(--md-filled-field-container-shape,4px)\n  );--_container-shape-end-end:var(\n    --md-filled-field-container-shape-end-end,var(--md-filled-field-container-shape,0px)\n  );--_container-shape-end-start:var(\n    --md-filled-field-container-shape-end-start,var(--md-filled-field-container-shape,0px)\n  );--_content-color:var(\n    --md-filled-field-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_content-type:var(\n    --md-filled-field-content-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_disabled-active-indicator-color:var(\n    --md-filled-field-disabled-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-active-indicator-height:var(\n    --md-filled-field-disabled-active-indicator-height,1px\n  );--_disabled-active-indicator-opacity:var(\n    --md-filled-field-disabled-active-indicator-opacity,0.38\n  );--_disabled-container-color:var(\n    --md-filled-field-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-container-opacity:var(\n    --md-filled-field-disabled-container-opacity,0.04\n  );--_disabled-content-color:var(\n    --md-filled-field-disabled-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-content-opacity:var(\n    --md-filled-field-disabled-content-opacity,0.38\n  );--_disabled-label-text-color:var(\n    --md-filled-field-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-filled-field-disabled-label-text-opacity,0.38\n  );--_disabled-leading-content-color:var(\n    --md-filled-field-disabled-leading-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-content-opacity:var(\n    --md-filled-field-disabled-leading-content-opacity,0.38\n  );--_disabled-supporting-text-color:var(\n    --md-filled-field-disabled-supporting-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-supporting-text-opacity:var(\n    --md-filled-field-disabled-supporting-text-opacity,0.38\n  );--_disabled-trailing-content-color:var(\n    --md-filled-field-disabled-trailing-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-trailing-content-opacity:var(\n    --md-filled-field-disabled-trailing-content-opacity,0.38\n  );--_error-active-indicator-color:var(\n    --md-filled-field-error-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_error-content-color:var(\n    --md-filled-field-error-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-focus-active-indicator-color:var(\n    --md-filled-field-error-focus-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-content-color:var(\n    --md-filled-field-error-focus-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-focus-label-text-color:var(\n    --md-filled-field-error-focus-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-leading-content-color:var(\n    --md-filled-field-error-focus-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-focus-supporting-text-color:var(\n    --md-filled-field-error-focus-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-trailing-content-color:var(\n    --md-filled-field-error-focus-trailing-content-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-active-indicator-color:var(\n    --md-filled-field-error-hover-active-indicator-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-content-color:var(\n    --md-filled-field-error-hover-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-label-text-color:var(\n    --md-filled-field-error-hover-label-text-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-leading-content-color:var(\n    --md-filled-field-error-hover-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-hover-state-layer-color:var(\n    --md-filled-field-error-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-state-layer-opacity:var(\n    --md-filled-field-error-hover-state-layer-opacity,0.08\n  );--_error-hover-supporting-text-color:var(\n    --md-filled-field-error-hover-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-trailing-content-color:var(\n    --md-filled-field-error-hover-trailing-content-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-label-text-color:var(\n    --md-filled-field-error-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-leading-content-color:var(\n    --md-filled-field-error-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-supporting-text-color:var(\n    --md-filled-field-error-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-trailing-content-color:var(\n    --md-filled-field-error-trailing-content-color,var(--md-sys-color-error,#b3261e)\n  );--_focus-active-indicator-color:var(\n    --md-filled-field-focus-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-active-indicator-height:var(\n    --md-filled-field-focus-active-indicator-height,2px\n  );--_focus-content-color:var(\n    --md-filled-field-focus-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-label-text-color:var(\n    --md-filled-field-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-leading-content-color:var(\n    --md-filled-field-focus-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-supporting-text-color:var(\n    --md-filled-field-focus-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-trailing-content-color:var(\n    --md-filled-field-focus-trailing-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-active-indicator-color:var(\n    --md-filled-field-hover-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-active-indicator-height:var(\n    --md-filled-field-hover-active-indicator-height,1px\n  );--_hover-content-color:var(\n    --md-filled-field-hover-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-filled-field-hover-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-leading-content-color:var(\n    --md-filled-field-hover-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-color:var(\n    --md-filled-field-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-filled-field-hover-state-layer-opacity,0.08\n  );--_hover-supporting-text-color:var(\n    --md-filled-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-trailing-content-color:var(\n    --md-filled-field-hover-trailing-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-color:var(\n    --md-filled-field-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-populated-line-height:var(\n    --md-filled-field-label-text-populated-line-height,1rem\n  );--_label-text-populated-size:var(\n    --md-filled-field-label-text-populated-size,0.75rem\n  );--_label-text-type:var(\n    --md-filled-field-label-text-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_leading-content-color:var(\n    --md-filled-field-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_supporting-text-color:var(\n    --md-filled-field-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_supporting-text-padding:var(\n    --md-filled-field-supporting-text-padding,16px\n  );--_supporting-text-padding-top:var(\n    --md-filled-field-supporting-text-padding-top,4px\n  );--_supporting-text-type:var(\n    --md-filled-field-supporting-text-type,400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n  );--_trailing-content-color:var(\n    --md-filled-field-trailing-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_with-label-container-padding-vertical:var(\n    --md-filled-field-with-label-container-padding-vertical,8px\n  )}.mdc-filled-field .background,.mdc-filled-field .state-layer{border-radius:inherit;inset:0;pointer-events:none;position:absolute}.mdc-filled-field .background{background:var(--_container-color)}.mdc-filled-field .state-layer{visibility:hidden}.mdc-filled-field .field:not(.disabled):hover .state-layer{visibility:visible}.mdc-filled-field .label.floating{position:absolute;top:0}.mdc-filled-field .active-indicator{inset:auto 0 0 0;pointer-events:none;position:absolute;width:100%}.mdc-filled-field .active-indicator:after,.mdc-filled-field .active-indicator:before{border-bottom:var(--_active-indicator-height) solid var(--_active-indicator-color);content:\"\";inset:auto 0 0 0;position:absolute;width:100%}.mdc-filled-field .active-indicator:after{opacity:0;transition:opacity .15s cubic-bezier(.2,0,0,1)}.mdc-filled-field .focused .active-indicator:after{opacity:1}.mdc-filled-field .field:not(.with-start) .start{-webkit-padding-start:var(--_container-padding-horizontal);padding-inline-start:var(--_container-padding-horizontal)}.mdc-filled-field .field:not(.with-end) .end{-webkit-padding-end:var(--_container-padding-horizontal);padding-inline-end:var(--_container-padding-horizontal)}.mdc-filled-field .field:not(.no-label) .container{padding-bottom:var(--_with-label-container-padding-vertical);padding-top:var(--_with-label-container-padding-vertical)}.mdc-filled-field .field:not(.no-label) .middle{padding-top:var(--_label-text-populated-line-height)}.mdc-filled-field :hover .active-indicator:before{border-bottom-color:var(--_hover-active-indicator-color);border-bottom-width:var(--_hover-active-indicator-height)}.mdc-filled-field .active-indicator:after{border-bottom-color:var(--_focus-active-indicator-color);border-bottom-width:var(--_focus-active-indicator-height)}.mdc-filled-field :hover .state-layer{background:var(--_hover-state-layer-color);opacity:var(--_hover-state-layer-opacity)}.mdc-filled-field .disabled .active-indicator:before{border-bottom-color:var(--_disabled-active-indicator-color);border-bottom-width:var(--_disabled-active-indicator-height);opacity:var(--_disabled-active-indicator-opacity)}.mdc-filled-field .disabled .background{background:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}.mdc-filled-field .error .active-indicator:before{border-bottom-color:var(--_error-active-indicator-color)}.mdc-filled-field .error:hover .active-indicator:before{border-bottom-color:var(--_error-hover-active-indicator-color)}.mdc-filled-field .error:hover .state-layer{background:var(--_error-hover-state-layer-color);opacity:var(--_error-hover-state-layer-opacity)}.mdc-filled-field .error .active-indicator:after{border-bottom-color:var(--_error-focus-active-indicator-color)}.mdc-filled-field.transparent .active-indicator:after,.mdc-filled-field.transparent .active-indicator:before{border-color:transparent}.mdc-outlined-field{--_container-padding-horizontal:var(\n    --md-outlined-field-container-padding-horizontal,16px\n  );--_container-padding-vertical:var(\n    --md-outlined-field-container-padding-vertical,16px\n  );--_container-shape:var(--md-outlined-field-container-shape,4px);--_content-color:var(\n    --md-outlined-field-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_content-type:var(\n    --md-outlined-field-content-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_disabled-content-color:var(\n    --md-outlined-field-disabled-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-content-opacity:var(\n    --md-outlined-field-disabled-content-opacity,0.38\n  );--_disabled-label-text-color:var(\n    --md-outlined-field-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-outlined-field-disabled-label-text-opacity,0.38\n  );--_disabled-leading-content-color:var(\n    --md-outlined-field-disabled-leading-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-content-opacity:var(\n    --md-outlined-field-disabled-leading-content-opacity,0.38\n  );--_disabled-outline-color:var(\n    --md-outlined-field-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-outlined-field-disabled-outline-opacity,0.12\n  );--_disabled-outline-width:var(\n    --md-outlined-field-disabled-outline-width,1px\n  );--_disabled-supporting-text-color:var(\n    --md-outlined-field-disabled-supporting-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-supporting-text-opacity:var(\n    --md-outlined-field-disabled-supporting-text-opacity,0.38\n  );--_disabled-trailing-content-color:var(\n    --md-outlined-field-disabled-trailing-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-trailing-content-opacity:var(\n    --md-outlined-field-disabled-trailing-content-opacity,0.38\n  );--_error-content-color:var(\n    --md-outlined-field-error-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-focus-content-color:var(\n    --md-outlined-field-error-focus-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-focus-label-text-color:var(\n    --md-outlined-field-error-focus-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-leading-content-color:var(\n    --md-outlined-field-error-focus-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-focus-outline-color:var(\n    --md-outlined-field-error-focus-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-supporting-text-color:var(\n    --md-outlined-field-error-focus-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-trailing-content-color:var(\n    --md-outlined-field-error-focus-trailing-content-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-content-color:var(\n    --md-outlined-field-error-hover-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-label-text-color:var(\n    --md-outlined-field-error-hover-label-text-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-leading-content-color:var(\n    --md-outlined-field-error-hover-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-hover-outline-color:var(\n    --md-outlined-field-error-hover-outline-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-supporting-text-color:var(\n    --md-outlined-field-error-hover-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-trailing-content-color:var(\n    --md-outlined-field-error-hover-trailing-content-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-label-text-color:var(\n    --md-outlined-field-error-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-leading-content-color:var(\n    --md-outlined-field-error-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-outline-color:var(\n    --md-outlined-field-error-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_error-supporting-text-color:var(\n    --md-outlined-field-error-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-trailing-content-color:var(\n    --md-outlined-field-error-trailing-content-color,var(--md-sys-color-error,#b3261e)\n  );--_focus-content-color:var(\n    --md-outlined-field-focus-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-label-text-color:var(\n    --md-outlined-field-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-leading-content-color:var(\n    --md-outlined-field-focus-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-outline-color:var(\n    --md-outlined-field-focus-outline-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-outline-width:var(--md-outlined-field-focus-outline-width,2px);--_focus-supporting-text-color:var(\n    --md-outlined-field-focus-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-trailing-content-color:var(\n    --md-outlined-field-focus-trailing-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-content-color:var(\n    --md-outlined-field-hover-content-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-outlined-field-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-leading-content-color:var(\n    --md-outlined-field-hover-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-outline-color:var(\n    --md-outlined-field-hover-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-outline-width:var(--md-outlined-field-hover-outline-width,1px);--_hover-supporting-text-color:var(\n    --md-outlined-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-trailing-content-color:var(\n    --md-outlined-field-hover-trailing-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-color:var(\n    --md-outlined-field-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-padding-bottom:var(\n    --md-outlined-field-label-text-padding-bottom,8px\n  );--_label-text-populated-line-height:var(\n    --md-outlined-field-label-text-populated-line-height,1rem\n  );--_label-text-populated-size:var(\n    --md-outlined-field-label-text-populated-size,0.75rem\n  );--_label-text-type:var(\n    --md-outlined-field-label-text-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_leading-content-color:var(\n    --md-outlined-field-leading-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_outline-color:var(\n    --md-outlined-field-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-label-padding:var(--md-outlined-field-outline-label-padding,4px);--_outline-width:var(--md-outlined-field-outline-width,1px);--_supporting-text-color:var(\n    --md-outlined-field-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_supporting-text-padding:var(\n    --md-outlined-field-supporting-text-padding,16px\n  );--_supporting-text-padding-top:var(\n    --md-outlined-field-supporting-text-padding-top,4px\n  );--_supporting-text-type:var(\n    --md-outlined-field-supporting-text-type,400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n  );--_trailing-content-color:var(\n    --md-outlined-field-trailing-content-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_container-shape-start-start:var(\n    --md-outlined-field-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-outlined-field-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-outlined-field-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-outlined-field-container-shape-end-start,var(--_container-shape)\n  )}.outline{border-color:var(--_outline-color);border-radius:inherit;color:var(--_outline-color);display:flex;height:100%;pointer-events:none;position:absolute;width:100%}.outline-end:after,.outline-end:before,.outline-panel-active:after,.outline-panel-active:before,.outline-panel-inactive:after,.outline-panel-inactive:before,.outline-start:after,.outline-start:before{border:inherit;content:\"\";inset:0;position:absolute}.outline-end,.outline-start{border:inherit;border-radius:inherit;box-sizing:border-box;position:relative}.outline-end:after,.outline-end:before,.outline-start:after,.outline-start:before{border-bottom-style:solid;border-top-style:solid}.outline-end:after,.outline-start:after{opacity:0;transition:opacity .15s cubic-bezier(.2,0,0,1)}.focused .outline-end:after,.focused .outline-start:after{opacity:1}.outline-start:after,.outline-start:before{-webkit-margin-end:var(--_outline-label-padding);border-end-end-radius:0;border-end-start-radius:inherit;border-inline-end-style:none;border-inline-start-style:solid;border-start-end-radius:0;border-start-start-radius:inherit;margin-inline-end:var(--_outline-label-padding)}.outline-end{-webkit-margin-start:calc(var(--_outline-label-padding)*-1);flex-grow:1;margin-inline-start:calc(var(--_outline-label-padding)*-1)}.outline-end:after,.outline-end:before{border-end-end-radius:inherit;border-end-start-radius:0;border-inline-end-style:solid;border-inline-start-style:none;border-start-end-radius:inherit;border-start-start-radius:0}.outline-notch{-webkit-margin-start:calc(var(--_outline-label-padding)*-1);-webkit-margin-end:var(--_outline-label-padding);align-items:flex-start;border:inherit;display:flex;margin-inline-end:var(--_outline-label-padding);margin-inline-start:calc(var(--_outline-label-padding)*-1);max-width:calc(100% - var(--_container-padding-horizontal)*2);padding:0 var(--_outline-label-padding);position:relative}.no-label .outline-notch{display:none}.outline-panel-active,.outline-panel-inactive{border:inherit;border-bottom-style:solid;inset:0;position:absolute}.outline-panel-active:after,.outline-panel-active:before,.outline-panel-inactive:after,.outline-panel-inactive:before{border-bottom:none;border-top-style:solid;bottom:auto;transform:scaleX(1);transition:transform .15s cubic-bezier(.2,0,0,1)}.outline-panel-active:before,.outline-panel-inactive:before{right:50%;transform-origin:top left}.outline-panel-active:after,.outline-panel-inactive:after{left:50%;transform-origin:top right}.focused .outline-panel-active:after,.focused .outline-panel-active:before,.focused .outline-panel-inactive:after,.focused .outline-panel-inactive:before,.populated .outline-panel-active:after,.populated .outline-panel-active:before,.populated .outline-panel-inactive:after,.populated .outline-panel-inactive:before{transform:scaleX(0)}.outline-panel-active{opacity:0;transition:opacity .15s cubic-bezier(.2,0,0,1)}.focused .outline-panel-active{opacity:1}.outline-label{display:flex;max-width:100%;transform:translateY(calc(-100% + var(--_label-text-padding-bottom)))}.field:not(.with-start) .start,.outline-start{-webkit-padding-start:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding));padding-inline-start:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-end) .end{-webkit-padding-end:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-end),var(--_container-shape-end-end)));padding-inline-end:max(var(--_container-padding-horizontal),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.outline-end:before,.outline-panel-inactive,.outline-panel-inactive:after,.outline-panel-inactive:before,.outline-start:before{border-width:var(--_outline-width)}:hover .outline{border-color:var(--_hover-outline-color);color:var(--_hover-outline-color)}:hover .outline-end:before,:hover .outline-panel-inactive,:hover .outline-panel-inactive:after,:hover .outline-panel-inactive:before,:hover .outline-start:before{border-width:var(--_hover-outline-width)}.focused .outline{border-color:var(--_focus-outline-color);color:var(--_focus-outline-color)}.outline-end:after,.outline-panel-active,.outline-panel-active:after,.outline-panel-active:before,.outline-start:after{border-width:var(--_focus-outline-width)}.disabled .outline{border-color:var(--_disabled-outline-color);color:var(--_disabled-outline-color)}.disabled .outline-end,.disabled .outline-panel-inactive,.disabled .outline-start{opacity:var(--_disabled-outline-opacity)}.disabled .outline-end:before,.disabled .outline-panel-inactive,.disabled .outline-panel-inactive:after,.disabled .outline-panel-inactive:before,.disabled .outline-start:before{border-width:var(--_disabled-outline-width)}.error .outline{border-color:var(--_error-outline-color);color:var(--_error-outline-color)}.error:hover .outline{border-color:var(--_error-hover-outline-color);color:var(--_error-hover-outline-color)}.error.focused .outline{border-color:var(--_error-focus-outline-color);color:var(--_error-focus-outline-color)}";
styleInject(css_248z$A);

var _excluded$c = ["variant", "className", "label", "disabled", "error", "populated", "required", "children", "onFocus", "onBlur"];
var Field = function Field(_ref) {
  var _classnames, _classnames2;
  var _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    className = _ref.className,
    label = _ref.label,
    disabled = _ref.disabled,
    error = _ref.error,
    populated = _ref.populated,
    required = _ref.required,
    children = _ref.children,
    onFocus = _ref.onFocus,
    onBlur = _ref.onBlur,
    props = _objectWithoutProperties(_ref, _excluded$c);
  var floatingLabelEl = React.useRef(null);
  var restingLabelEl = React.useRef(null);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isAnimating = _useState2[0],
    setIsAnimating = _useState2[1];
  var _useFocus = useFocus(),
    focused = _useFocus.focused,
    doBlur = _useFocus.doBlur,
    doFocus = _useFocus.doFocus;
  var slots = useSlot(children);
  var isFilled = variant === 'filled';
  var isOutlined = variant === 'outlined';
  var classNames = classnames(CSS_CLASSES$r.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$r.FILLED, isFilled), _defineProperty(_classnames, CSS_CLASSES$r.OUTLINED, isOutlined), _defineProperty(_classnames, 'mdc-filled-field transparent', variant === 'transparent'), _classnames));
  var field = classnames('field', (_classnames2 = {}, _defineProperty(_classnames2, CSS_CLASSES$r.DISABLED, disabled), _defineProperty(_classnames2, CSS_CLASSES$r.ERROR, error), _defineProperty(_classnames2, CSS_CLASSES$r.START, slots.start), _defineProperty(_classnames2, CSS_CLASSES$r.END, slots.end), _defineProperty(_classnames2, CSS_CLASSES$r.POPULATED, populated), _defineProperty(_classnames2, CSS_CLASSES$r.NO_LABEL, !label), _defineProperty(_classnames2, 'focused', focused && !disabled), _defineProperty(_classnames2, 'required', required), _classnames2));
  function renderFilled() {
    return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, {
      children: [jsxRuntime.exports.jsx("div", {
        className: "background"
      }), jsxRuntime.exports.jsx("div", {
        className: "state-layer"
      }), jsxRuntime.exports.jsx("div", {
        className: "active-indicator"
      })]
    });
  }
  function renderOutlined(floatingLabel) {
    return jsxRuntime.exports.jsxs("div", {
      className: "outline",
      children: [jsxRuntime.exports.jsx("div", {
        className: "outline-start"
      }), jsxRuntime.exports.jsxs("div", {
        className: "outline-notch",
        children: [jsxRuntime.exports.jsx("div", {
          className: "outline-panel-inactive"
        }), jsxRuntime.exports.jsx("div", {
          className: "outline-panel-active"
        }), jsxRuntime.exports.jsx("div", {
          className: "outline-label",
          children: floatingLabel
        })]
      }), jsxRuntime.exports.jsx("div", {
        className: "outline-end"
      })]
    });
  }
  var floatingLabel = renderLabel(true, floatingLabelEl);
  function renderLabel(isFloating, ref) {
    var _classnames3;
    var visible;
    if (isFloating) {
      visible = focused || populated || isAnimating;
    } else {
      visible = !focused && !populated && !isAnimating;
    }
    var labelClassnames = classnames('label', (_classnames3 = {}, _defineProperty(_classnames3, 'hidden', !visible), _defineProperty(_classnames3, 'floating', isFloating), _defineProperty(_classnames3, 'resting', !isFloating), _classnames3));
    var requiredTect = required ? '*' : '';
    var animateStyle = getAnimateStyle();
    return jsxRuntime.exports.jsxs("span", {
      style: isAnimating ? animateStyle : {},
      ref: ref,
      className: labelClassnames,
      "aria-hidden": !visible,
      children: [requiredTect, label]
    });
  }
  function getAnimateStyle() {
    if (!floatingLabelEl.current || !restingLabelEl.current) {
      return {};
    }
    var _floatingLabelEl$curr = floatingLabelEl.current.getBoundingClientRect(),
      floatingX = _floatingLabelEl$curr.x,
      floatingY = _floatingLabelEl$curr.y,
      floatingHeight = _floatingLabelEl$curr.height;
    var _restingLabelEl$curre = restingLabelEl.current.getBoundingClientRect(),
      restingX = _restingLabelEl$curre.x,
      restingY = _restingLabelEl$curre.y,
      restingHeight = _restingLabelEl$curre.height;
    var floatingScrollWidth = floatingLabelEl.current.scrollWidth;
    var restingScrollWidth = restingLabelEl.current.scrollWidth;
    var scale = restingScrollWidth / floatingScrollWidth;
    var xDelta = restingX - floatingX;
    var yDelta = restingY - floatingY + Math.round((restingHeight - floatingHeight * scale) / 2);
    var restTransform = "translateX(".concat(xDelta, "px) translateY(").concat(yDelta, "px) scale(").concat(scale, ")");
    var floatTransform = "translateX(0) translateY(0) scale(1)";
    // const restingClientWidth = (restingLabelEl.current as any).clientWidth;
    // const isRestingClipped = restingScrollWidth > restingClientWidth;
    // const width = isRestingClipped ? `${restingClientWidth / scale}px` : '';
    if (focused || populated) {
      return {
        transform: restTransform
      };
    }
    return {
      transform: floatTransform
    };
  }
  function animateLabelIfNeeded(_ref2) {
    var _wasFocused, _wasPopulated;
    var wasFocused = _ref2.wasFocused,
      wasPopulated = _ref2.wasPopulated;
    if (!label) {
      return;
    }
    (_wasFocused = wasFocused) !== null && _wasFocused !== void 0 ? _wasFocused : wasFocused = focused;
    (_wasPopulated = wasPopulated) !== null && _wasPopulated !== void 0 ? _wasPopulated : wasPopulated = populated;
    var wasFloating = wasFocused || wasPopulated;
    var shouldBeFloating = focused || populated;
    if (wasFloating === shouldBeFloating) {
      return;
    }
    setIsAnimating(true);
  }
  function handelFocus() {
    doFocus();
    onFocus === null || onFocus === void 0 ? void 0 : onFocus();
  }
  function handelBlur(e) {
    doBlur();
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
  }
  React.useEffect(function () {
    animateLabelIfNeeded({
      wasFocused: focused,
      wasPopulated: populated
    });
  }, [focused, populated]);
  return jsxRuntime.exports.jsx("div", _objectSpread2(_objectSpread2({
    className: classNames
  }, props), {}, {
    tabIndex: 0,
    onBlur: handelBlur,
    onFocus: handelFocus,
    children: jsxRuntime.exports.jsxs("div", {
      className: field,
      children: [jsxRuntime.exports.jsxs("div", {
        className: "container-overflow",
        children: [isOutlined ? renderOutlined(floatingLabel) : null, isFilled ? renderFilled() : null, jsxRuntime.exports.jsxs("div", {
          className: "container",
          children: [slots.start ? jsxRuntime.exports.jsx("div", {
            className: "start",
            children: slots.start
          }) : null, jsxRuntime.exports.jsxs("div", {
            className: "middle",
            children: [renderLabel(false, restingLabelEl), isOutlined ? null : floatingLabel, jsxRuntime.exports.jsx("div", {
              className: "content",
              children: slots.children
            })]
          }), slots.end ? jsxRuntime.exports.jsx("div", {
            className: "end",
            children: slots.end
          }) : null]
        })]
      }), jsxRuntime.exports.jsxs("div", {
        className: "supporting-text",
        children: [jsxRuntime.exports.jsx("div", {
          className: "supporting-text-start",
          children: slots['supporting-text']
        }), jsxRuntime.exports.jsx("div", {
          className: "supporting-text-end",
          children: slots['supporting-text-end']
        })]
      })]
    })
  }));
};

var CSS_CLASSES$q = {
  ROOT: 'mdc-text-field',
  FILLED: 'mdc-filled-text-field',
  OUTLINED: 'mdc-outlined-text-field',
  DISABLED: 'disabled',
  ERROR: 'error'
};

var css_248z$z = ".mdc-text-field{display:inline-flex;outline:none}@media (forced-colors:active){.mdc-text-field input{background-color:Field}}.mdc-text-field .text-field{display:inline-flex;flex:1}.mdc-text-field .field{cursor:text;flex:1}.mdc-text-field .disabled .field{cursor:default}.mdc-text-field .counter{white-space:nowrap}.mdc-text-field .icon{fill:currentColor;color:currentColor;display:flex}.mdc-text-field .icon ::slotted(*){display:flex}.mdc-text-field [hasstart] .icon.leading{font-size:var(--md-filled-text-field-leading-icon-size,24px);height:var(--md-filled-text-field-leading-icon-size,24px);width:var(--md-filled-text-field-leading-icon-size,24px)}.mdc-text-field [hasend] .icon.trailing{font-size:var(--md-filled-text-field-trailing-icon-size,24px);height:var(--md-filled-text-field-trailing-icon-size,24px);width:var(--md-filled-text-field-trailing-icon-size,24px)}.mdc-text-field input{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;caret-color:var(--md-sys-color-primary,#6750a4);color:currentColor;font:inherit;outline:none;padding:0;text-align:inherit;width:100%}.mdc-text-field input::-moz-placeholder{color:currentColor;opacity:1}.mdc-text-field input::placeholder{color:currentColor;opacity:1}.mdc-text-field input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field :focus-within input{caret-color:var(--md-sys-color-primary,#6750a4)}.mdc-text-field .error:focus-within input{caret-color:var(--md-sys-color-error,#b3261e)}.mdc-text-field .text-field:not(.disabled) .prefix,.mdc-text-field .text-field:not(.disabled) .suffix{color:var(--md-sys-color-on-surface-variant,#49454f)}.mdc-text-field .text-field:not(.disabled) input::-moz-placeholder{color:var(--md-sys-color-on-surface-variant,#49454f)}.mdc-text-field .text-field:not(.disabled) input::placeholder{color:var(--md-sys-color-on-surface-variant,#49454f)}.mdc-text-field .prefix{-webkit-padding-end:var(--md-outlined-text-field-input-text-prefix-padding,2px);padding-inline-end:var(--md-outlined-text-field-input-text-prefix-padding,2px)}.mdc-text-field .suffix{-webkit-padding-start:var(--md-outlined-text-field-input-text-suffix-padding,2px);padding-inline-start:var(--md-outlined-text-field-input-text-suffix-padding,2px)}@media (forced-colors:active){.mdc-filled-text-field{--md-filled-text-field-disabled-active-indicator-opacity:1;--md-filled-text-field-disabled-input-text-opacity:1;--md-filled-text-field-disabled-label-text-opacity:1;--md-filled-text-field-disabled-leading-icon-opacity:1;--md-filled-text-field-disabled-supporting-text-opacity:1;--md-filled-text-field-disabled-trailing-icon-opacity:1}}.mdc-filled-text-field{--_container-shape-start-start:var(\n    --md-filled-text-field-container-shape-start-start,var(--md-filled-text-field-container-shape,4px)\n  );--_container-shape-start-end:var(\n    --md-filled-text-field-container-shape-start-end,var(--md-filled-text-field-container-shape,4px)\n  );--_container-shape-end-end:var(\n    --md-filled-text-field-container-shape-end-end,var(--md-filled-text-field-container-shape,0px)\n  );--_container-shape-end-start:var(\n    --md-filled-text-field-container-shape-end-start,var(--md-filled-text-field-container-shape,0px)\n  );--_container-padding-horizontal:var(\n    --md-filled-text-field-container-padding-horizontal,16px\n  );--_container-padding-vertical:var(\n    --md-filled-text-field-container-padding-vertical,16px\n  );--_input-text-prefix-padding:var(\n    --md-filled-text-field-input-text-prefix-padding,2px\n  );--_input-text-suffix-padding:var(\n    --md-filled-text-field-input-text-suffix-padding,2px\n  );--_with-label-container-padding-vertical:var(\n    --md-filled-text-field-with-label-container-padding-vertical,8px\n  );--_focus-caret-color:var(\n    --md-filled-text-field-focus-caret-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-color:var(\n    --md-filled-text-field-active-indicator-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_active-indicator-height:var(\n    --md-filled-text-field-active-indicator-height,1px\n  );--_caret-color:var(\n    --md-filled-text-field-caret-color,var(--md-sys-color-primary,#6750a4)\n  );--_container-color:var(\n    --md-filled-text-field-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_disabled-active-indicator-color:var(\n    --md-filled-text-field-disabled-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-active-indicator-height:var(\n    --md-filled-text-field-disabled-active-indicator-height,1px\n  );--_disabled-active-indicator-opacity:var(\n    --md-filled-text-field-disabled-active-indicator-opacity,0.38\n  );--_disabled-container-color:var(\n    --md-filled-text-field-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-container-opacity:var(\n    --md-filled-text-field-disabled-container-opacity,0.04\n  );--_disabled-input-text-color:var(\n    --md-filled-text-field-disabled-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-input-text-opacity:var(\n    --md-filled-text-field-disabled-input-text-opacity,0.38\n  );--_disabled-label-text-color:var(\n    --md-filled-text-field-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-filled-text-field-disabled-label-text-opacity,0.38\n  );--_disabled-leading-icon-color:var(\n    --md-filled-text-field-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-icon-opacity:var(\n    --md-filled-text-field-disabled-leading-icon-opacity,0.38\n  );--_disabled-supporting-text-color:var(\n    --md-filled-text-field-disabled-supporting-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-supporting-text-opacity:var(\n    --md-filled-text-field-disabled-supporting-text-opacity,0.38\n  );--_disabled-trailing-icon-color:var(\n    --md-filled-text-field-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-trailing-icon-opacity:var(\n    --md-filled-text-field-disabled-trailing-icon-opacity,0.38\n  );--_error-active-indicator-color:var(\n    --md-filled-text-field-error-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-active-indicator-color:var(\n    --md-filled-text-field-error-focus-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-caret-color:var(\n    --md-filled-text-field-error-focus-caret-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-input-text-color:var(\n    --md-filled-text-field-error-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-focus-label-text-color:var(\n    --md-filled-text-field-error-focus-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-leading-icon-color:var(\n    --md-filled-text-field-error-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-focus-supporting-text-color:var(\n    --md-filled-text-field-error-focus-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-trailing-icon-color:var(\n    --md-filled-text-field-error-focus-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-active-indicator-color:var(\n    --md-filled-text-field-error-hover-active-indicator-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-input-text-color:var(\n    --md-filled-text-field-error-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-label-text-color:var(\n    --md-filled-text-field-error-hover-label-text-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-leading-icon-color:var(\n    --md-filled-text-field-error-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-hover-state-layer-color:var(\n    --md-filled-text-field-error-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-state-layer-opacity:var(\n    --md-filled-text-field-error-hover-state-layer-opacity,0.08\n  );--_error-hover-supporting-text-color:var(\n    --md-filled-text-field-error-hover-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-trailing-icon-color:var(\n    --md-filled-text-field-error-hover-trailing-icon-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-input-text-color:var(\n    --md-filled-text-field-error-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-label-text-color:var(\n    --md-filled-text-field-error-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-leading-icon-color:var(\n    --md-filled-text-field-error-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-supporting-text-color:var(\n    --md-filled-text-field-error-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-trailing-icon-color:var(\n    --md-filled-text-field-error-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_focus-active-indicator-color:var(\n    --md-filled-text-field-focus-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-active-indicator-height:var(\n    --md-filled-text-field-focus-active-indicator-height,2px\n  );--_focus-input-text-color:var(\n    --md-filled-text-field-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-label-text-color:var(\n    --md-filled-text-field-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-leading-icon-color:var(\n    --md-filled-text-field-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-supporting-text-color:var(\n    --md-filled-text-field-focus-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-trailing-icon-color:var(\n    --md-filled-text-field-focus-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-active-indicator-color:var(\n    --md-filled-text-field-hover-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-active-indicator-height:var(\n    --md-filled-text-field-hover-active-indicator-height,1px\n  );--_hover-input-text-color:var(\n    --md-filled-text-field-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-filled-text-field-hover-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-leading-icon-color:var(\n    --md-filled-text-field-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-color:var(\n    --md-filled-text-field-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-filled-text-field-hover-state-layer-opacity,0.08\n  );--_hover-supporting-text-color:var(\n    --md-filled-text-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-trailing-icon-color:var(\n    --md-filled-text-field-hover-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-color:var(\n    --md-filled-text-field-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_input-text-placeholder-color:var(\n    --md-filled-text-field-input-text-placeholder-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-prefix-color:var(\n    --md-filled-text-field-input-text-prefix-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-suffix-color:var(\n    --md-filled-text-field-input-text-suffix-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-type:var(\n    --md-filled-text-field-input-text-type,var(\n      --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_label-text-color:var(\n    --md-filled-text-field-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-populated-line-height:var(\n    --md-filled-text-field-label-text-populated-line-height,1rem\n  );--_label-text-populated-size:var(\n    --md-filled-text-field-label-text-populated-size,0.75rem\n  );--_label-text-type:var(\n    --md-filled-text-field-label-text-type,var(\n      --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_leading-icon-color:var(\n    --md-filled-text-field-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_leading-icon-size:var(--md-filled-text-field-leading-icon-size,24px);--_supporting-text-color:var(\n    --md-filled-text-field-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_supporting-text-type:var(\n    --md-filled-text-field-supporting-text-type,var(\n      --md-sys-typescale-body-small,400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_trailing-icon-color:var(\n    --md-filled-text-field-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_trailing-icon-size:var(--md-filled-text-field-trailing-icon-size,24px);--md-filled-field-container-shape-start-start:var(\n    --md-filled-field-container-shape,var(--_container-shape-start-start)\n  );--md-filled-field-container-shape-start-end:var(\n    --md-filled-field-container-shape,var(--_container-shape-start-end)\n  );--md-filled-field-container-shape-end-end:var(\n    --md-filled-field-container-shape,var(--_container-shape-end-end)\n  );--md-filled-field-container-shape-end-start:var(\n    --md-filled-field-container-shape,var(--_container-shape-end-start)\n  );--md-filled-field-active-indicator-color:var(--_active-indicator-color);--md-filled-field-active-indicator-height:var(--_active-indicator-height);--md-filled-field-container-color:var(--_container-color);--md-filled-field-container-padding-horizontal:var(\n    --_container-padding-horizontal\n  );--md-filled-field-container-padding-vertical:var(\n    --_container-padding-vertical\n  );--md-filled-field-content-color:var(--_input-text-color);--md-filled-field-content-type:var(--_input-text-type);--md-filled-field-disabled-active-indicator-color:var(\n    --_disabled-active-indicator-color\n  );--md-filled-field-disabled-active-indicator-height:var(\n    --_disabled-active-indicator-height\n  );--md-filled-field-disabled-active-indicator-opacity:var(\n    --_disabled-active-indicator-opacity\n  );--md-filled-field-disabled-container-color:var(--_disabled-container-color);--md-filled-field-disabled-container-opacity:var(\n    --_disabled-container-opacity\n  );--md-filled-field-disabled-content-color:var(--_disabled-input-text-color);--md-filled-field-disabled-content-opacity:var(\n    --_disabled-input-text-opacity\n  );--md-filled-field-disabled-label-text-color:var(\n    --_disabled-label-text-color\n  );--md-filled-field-disabled-label-text-opacity:var(\n    --_disabled-label-text-opacity\n  );--md-filled-field-disabled-leading-content-color:var(\n    --_disabled-leading-icon-color\n  );--md-filled-field-disabled-leading-content-opacity:var(\n    --_disabled-leading-icon-opacity\n  );--md-filled-field-disabled-supporting-text-color:var(\n    --_disabled-supporting-text-color\n  );--md-filled-field-disabled-supporting-text-opacity:var(\n    --_disabled-supporting-text-opacity\n  );--md-filled-field-disabled-trailing-content-color:var(\n    --_disabled-trailing-icon-color\n  );--md-filled-field-disabled-trailing-content-opacity:var(\n    --_disabled-trailing-icon-opacity\n  );--md-filled-field-error-active-indicator-color:var(\n    --_error-active-indicator-color\n  );--md-filled-field-error-content-color:var(--_error-input-text-color);--md-filled-field-error-focus-active-indicator-color:var(\n    --_error-focus-active-indicator-color\n  );--md-filled-field-error-focus-content-color:var(\n    --_error-focus-input-text-color\n  );--md-filled-field-error-focus-label-text-color:var(\n    --_error-focus-label-text-color\n  );--md-filled-field-error-focus-leading-content-color:var(\n    --_error-focus-leading-icon-color\n  );--md-filled-field-error-focus-supporting-text-color:var(\n    --_error-focus-supporting-text-color\n  );--md-filled-field-error-focus-trailing-content-color:var(\n    --_error-focus-trailing-icon-color\n  );--md-filled-field-error-hover-active-indicator-color:var(\n    --_error-hover-active-indicator-color\n  );--md-filled-field-error-hover-content-color:var(\n    --_error-hover-input-text-color\n  );--md-filled-field-error-hover-label-text-color:var(\n    --_error-hover-label-text-color\n  );--md-filled-field-error-hover-leading-content-color:var(\n    --_error-hover-leading-icon-color\n  );--md-filled-field-error-hover-state-layer-color:var(\n    --_error-hover-state-layer-color\n  );--md-filled-field-error-hover-state-layer-opacity:var(\n    --_error-hover-state-layer-opacity\n  );--md-filled-field-error-hover-supporting-text-color:var(\n    --_error-hover-supporting-text-color\n  );--md-filled-field-error-hover-trailing-content-color:var(\n    --_error-hover-trailing-icon-color\n  );--md-filled-field-error-label-text-color:var(--_error-label-text-color);--md-filled-field-error-leading-content-color:var(\n    --_error-leading-icon-color\n  );--md-filled-field-error-supporting-text-color:var(\n    --_error-supporting-text-color\n  );--md-filled-field-error-trailing-content-color:var(\n    --_error-trailing-icon-color\n  );--md-filled-field-focus-active-indicator-color:var(\n    --_focus-active-indicator-color\n  );--md-filled-field-focus-active-indicator-height:var(\n    --_focus-active-indicator-height\n  );--md-filled-field-focus-content-color:var(--_focus-input-text-color);--md-filled-field-focus-label-text-color:var(--_focus-label-text-color);--md-filled-field-focus-leading-content-color:var(\n    --_focus-leading-icon-color\n  );--md-filled-field-focus-supporting-text-color:var(\n    --_focus-supporting-text-color\n  );--md-filled-field-focus-trailing-content-color:var(\n    --_focus-trailing-icon-color\n  );--md-filled-field-hover-active-indicator-color:var(\n    --_hover-active-indicator-color\n  );--md-filled-field-hover-active-indicator-height:var(\n    --_hover-active-indicator-height\n  );--md-filled-field-hover-content-color:var(--_hover-input-text-color);--md-filled-field-hover-label-text-color:var(--_hover-label-text-color);--md-filled-field-hover-leading-content-color:var(\n    --_hover-leading-icon-color\n  );--md-filled-field-hover-state-layer-color:var(--_hover-state-layer-color);--md-filled-field-hover-state-layer-opacity:var(\n    --_hover-state-layer-opacity\n  );--md-filled-field-hover-supporting-text-color:var(\n    --_hover-supporting-text-color\n  );--md-filled-field-hover-trailing-content-color:var(\n    --_hover-trailing-icon-color\n  );--md-filled-field-label-text-color:var(--_label-text-color);--md-filled-field-label-text-populated-line-height:var(\n    --_label-text-populated-line-height\n  );--md-filled-field-label-text-populated-size:var(\n    --_label-text-populated-size\n  );--md-filled-field-label-text-type:var(--_label-text-type);--md-filled-field-leading-content-color:var(--_leading-icon-color);--md-filled-field-supporting-text-color:var(--_supporting-text-color);--md-filled-field-supporting-text-type:var(--_supporting-text-type);--md-filled-field-trailing-content-color:var(--_trailing-icon-color);--md-filled-field-with-label-container-padding-vertical:var(\n    --_with-label-container-padding-vertical\n  )}@media (forced-colors:active){.mdc-outlined-text-field{--md-outlined-text-field-disabled-input-text-opacity:1;--md-outlined-text-field-disabled-label-text-opacity:1;--md-outlined-text-field-disabled-leading-icon-opacity:1;--md-outlined-text-field-disabled-outline-opacity:1;--md-outlined-text-field-disabled-supporting-text-opacity:1;--md-outlined-text-field-disabled-trailing-icon-opacity:1;--md-outlined-text-field-container-padding-horizontal:16px;--md-outlined-text-field-container-padding-vertical:16px;--md-outlined-text-field-input-text-prefix-padding:2px;--md-outlined-text-field-input-text-suffix-padding:2px;--md-outlined-text-field-outline-width:1px;--md-outlined-text-field-leading-icon-size:24px;--md-outlined-text-field-label-text-populated-size:0.75rem;--md-outlined-text-field-label-text-populated-line-height:1rem;--md-outlined-text-field-focus-outline-width:2px}}.mdc-outlined-text-field{--_focus-outline-color:var(\n    --md-outlined-text-field-focus-outline-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-outline-width:var(\n    --md-outlined-text-field-focus-outline-width,2px\n  );--_hover-input-text-color:var(\n    --md-outlined-text-field-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-outlined-text-field-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-leading-icon-color:var(\n    --md-outlined-text-field-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-outline-color:var(\n    --md-outlined-text-field-hover-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-outline-width:var(\n    --md-outlined-text-field-hover-outline-width,1px\n  );--_hover-supporting-text-color:var(\n    --md-outlined-text-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_trailing-icon-size:var(--md-outlined-text-field-trailing-icon-size,24px);--md-outlined-field-container-shape-start-start:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-shape-start-end:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-shape-end-end:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-shape-end-start:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-padding-horizontal:var(\n    --md-outlined-text-field-container-padding-horizontal,16px\n  );--md-outlined-field-container-padding-vertical:var(\n    --md-outlined-text-field-container-padding-vertical,16px\n  );--md-outlined-field-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-content-type:var(\n    --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--md-outlined-field-disabled-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-content-opacity:var(\n    --md-outlined-text-field-disabled-input-text-opacity,0.38\n  );--md-outlined-field-disabled-label-text-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-label-text-opacity:var(\n    --md-outlined-text-field-disabled-label-text-opacity,0.38\n  );--md-outlined-field-disabled-leading-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-leading-content-opacity:var(\n    --md-outlined-text-field-disabled-leading-icon-opacity,0.38\n  );--md-outlined-field-disabled-outline-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-outline-opacity:var(\n    --md-outlined-text-field-disabled-outline-opacity,0.12\n  );--md-outlined-field-disabled-outline-width:var(\n    --md-outlined-text-field-disabled-outline-width,1px\n  );--md-outlined-field-disabled-supporting-text-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-supporting-text-opacity:var(\n    --md-outlined-text-field-disabled-supporting-text-opacity,0.38\n  );--md-outlined-field-disabled-trailing-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-trailing-content-opacity:var(\n    --md-outlined-text-field-disabled-trailing-icon-opacity,0.38\n  );--md-outlined-field-error-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-error-focus-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-error-focus-label-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-focus-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-error-focus-outline-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-focus-supporting-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-focus-trailing-content-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-hover-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-error-hover-label-text-color:var(--md-sys-color-on-error-container,#410e0b);--md-outlined-field-error-hover-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-error-hover-outline-color:var(--md-sys-color-on-error-container,#410e0b);--md-outlined-field-error-hover-supporting-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-hover-trailing-content-color:var(--md-sys-color-on-error-container,#410e0b);--md-outlined-field-error-label-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-error-outline-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-supporting-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-trailing-content-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-focus-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-focus-label-text-color:var(--md-sys-color-primary,#6750a4);--md-outlined-field-focus-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-focus-outline-color:var(--md-sys-color-primary,#6750a4);--md-outlined-field-focus-outline-width:var(--_focus-outline-width);--md-outlined-field-focus-supporting-text-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-focus-trailing-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-hover-content-color:var(--_hover-input-text-color);--md-outlined-field-hover-label-text-color:var(--_hover-label-text-color);--md-outlined-field-hover-leading-content-color:var(\n    --_hover-leading-icon-color\n  );--md-outlined-field-hover-outline-color:var(--_hover-outline-color);--md-outlined-field-hover-outline-width:var(--_hover-outline-width);--md-outlined-field-hover-supporting-text-color:var(\n    --_hover-supporting-text-color\n  );--md-outlined-field-hover-trailing-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-label-text-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-label-text-populated-line-height:var(\n    --md-outlined-text-field-label-text-populated-line-height,1rem\n  );--md-outlined-field-label-text-populated-size:var(\n    --md-outlined-text-field-label-text-populated-size,0.75rem\n  );--md-outlined-field-label-text-type:400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto);--md-outlined-field-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-outline-color:var(--md-sys-color-outline,#79747e);--md-outlined-field-outline-width:var(--md-outlined-text-field-outline-width,1px);--md-outlined-field-supporting-text-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-supporting-text-type:400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto);--md-outlined-field-trailing-content-color:var(--md-sys-color-on-surface-variant,#49454f)}";
styleInject(css_248z$z);

var _excluded$b = ["name", "variant", "value", "type", "className", "label", "disabled", "error", "errorText", "prefixText", "suffixText", "required", "placeholder", "max", "maxlength", "min", "minlength", "pattern", "step", "rulers", "children", "onChange"];
var TextField = function TextField(_ref) {
  var _classnames;
  var name = _ref.name,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value,
    type = _ref.type,
    className = _ref.className,
    label = _ref.label,
    disabled = _ref.disabled,
    error = _ref.error,
    errorText = _ref.errorText,
    prefixText = _ref.prefixText,
    suffixText = _ref.suffixText,
    required = _ref.required,
    placeholder = _ref.placeholder,
    max = _ref.max,
    maxlength = _ref.maxlength,
    min = _ref.min,
    minlength = _ref.minlength,
    pattern = _ref.pattern,
    step = _ref.step,
    rulers = _ref.rulers,
    children = _ref.children,
    onChange = _ref.onChange,
    props = _objectWithoutProperties(_ref, _excluded$b);
  var _useState = React.useState(value || ''),
    _useState2 = _slicedToArray(_useState, 2),
    currentValue = _useState2[0],
    setCurrentValue = _useState2[1];
  var slots = useSlot(children);
  var isFilled = variant === 'filled';
  var isOutlined = variant === 'outlined';
  var classNames = classnames(CSS_CLASSES$q.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$q.FILLED, isFilled), _defineProperty(_classnames, CSS_CLASSES$q.OUTLINED, isOutlined), _defineProperty(_classnames, CSS_CLASSES$q.DISABLED, disabled), _defineProperty(_classnames, CSS_CLASSES$q.ERROR, error), _classnames));
  var _useState3 = React.useState(errorText),
    _useState4 = _slicedToArray(_useState3, 2),
    errorMessage = _useState4[0],
    setErrorMessage = _useState4[1];
  var doChange = function doChange(e) {
    var v = e.target.value;
    onChange === null || onChange === void 0 ? void 0 : onChange(v);
    setCurrentValue(v);
  };
  var doBlur = function doBlur(e) {
    var v = e.target.value;
    if (required && !rulers && !v) {
      setErrorMessage('必填！');
    } else if (required && !rulers && pattern && !new RegExp(pattern).test(String(v))) {
      setErrorMessage('输入格式不正确～');
    } else if (rulers !== null && rulers !== void 0 && rulers.length) {
      for (var i = 0; i < rulers.length; i++) {
        var rule = rulers[i];
        if (rule.required && !v || rule.pattern && !new RegExp(rule.pattern).test(String(v))) {
          setErrorMessage(rule.message);
          break;
        } else if (rule.validator) {
          var _rule$validator;
          var res = (_rule$validator = rule.validator) === null || _rule$validator === void 0 ? void 0 : _rule$validator.call(rule, v);
          if (res) {
            setErrorMessage(res);
          } else {
            setErrorMessage('');
          }
        }
      }
    }
  };
  React.useEffect(function () {
    setCurrentValue(value);
  }, [value]);
  return jsxRuntime.exports.jsx("div", _objectSpread2(_objectSpread2({
    className: classNames
  }, props), {}, {
    children: jsxRuntime.exports.jsx("div", {
      className: "text-field",
      children: jsxRuntime.exports.jsxs(Field, {
        label: label,
        disabled: disabled,
        error: !!errorMessage,
        required: required,
        populated: !!currentValue,
        onBlur: doBlur,
        variant: variant,
        children: [jsxRuntime.exports.jsxs(_Slot, {
          name: "start",
          children: [slots['leadingicon'] ? jsxRuntime.exports.jsx("span", {
            className: "icon leading",
            children: slots['leadingicon']
          }) : null, slots['start']]
        }), jsxRuntime.exports.jsxs(_Slot, {
          name: "end",
          children: [slots['trailingicon'] ? jsxRuntime.exports.jsx("span", {
            className: "icon trailing",
            children: slots['trailingicon']
          }) : null, slots['end']]
        }), jsxRuntime.exports.jsxs(_Slot, {
          name: "supporting-text",
          children: [slots['supporting-text'], jsxRuntime.exports.jsx("span", {
            children: !!errorMessage ? errorMessage : prefixText
          })]
        }), jsxRuntime.exports.jsxs(_Slot, {
          name: "supporting-text-end",
          children: [slots['supporting-text-end'], maxlength ? jsxRuntime.exports.jsxs("span", {
            children: [value === null || value === void 0 ? void 0 : value.length, "/", maxlength]
          }) : null]
        }), jsxRuntime.exports.jsx("span", {
          className: "prefix",
          children: prefixText
        }), jsxRuntime.exports.jsx("input", {
          type: type,
          placeholder: placeholder,
          disabled: disabled,
          max: max,
          min: min,
          maxLength: maxlength,
          minLength: minlength,
          required: required,
          step: step,
          onChange: doChange,
          name: name,
          value: currentValue
        }), jsxRuntime.exports.jsx("span", {
          className: "suffix",
          children: suffixText
        })]
      })
    })
  }));
};

function useActive(children, value) {
  var list = children.map(function (child) {
    return child.props.name;
  });
  var _useState = React.useState(value || list[0]),
    _useState2 = _slicedToArray(_useState, 2),
    active = _useState2[0],
    setActive = _useState2[1];
  function toggleActive(name) {
    setActive(name);
  }
  return {
    active: active,
    toggleActive: toggleActive
  };
}

var NavContext = /*#__PURE__*/React.createContext({});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/*!
 * GSAP 3.11.5
 * https://greensock.com
 *
 * @license Copyright 2008-2023, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
  _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
  _suppressOverwrites,
  _reverting$1,
  _context,
  _bigNum$1 = 1e8,
  _tinyNum = 1 / _bigNum$1,
  _2PI = Math.PI * 2,
  _HALF_PI = _2PI / 4,
  _gsID = 0,
  _sqrt = Math.sqrt,
  _cos = Math.cos,
  _sin = Math.sin,
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
  _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
  _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
  _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
  // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
  _strictNumExp = /(?:-?\.?\d|\.)+/gi,
  //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
  _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
  //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
  _delimitedValueExp = /[^,'"\[\]\s]+/gi,
  // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
  _globalTimeline,
  _win$1,
  _coreInitted,
  _doc$1,
  _globals = {},
  _installScope = {},
  _coreReady,
  _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
  _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
  _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
  _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
  _emptyFunc = function _emptyFunc() {
    return 0;
  },
  _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
  _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
  _revertConfig = {
    suppressEvents: true
  },
  _reservedProps = {},
  _lazyTweens = [],
  _lazyLookup = {},
  _lastRenderedFrame,
  _plugins = {},
  _effects = {},
  _nextGCFrame = 30,
  _harnessPlugins = [],
  _callbackNames = "",
  _harness = function _harness(targets) {
    var target = targets[0],
      harnessPlugin,
      i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);
    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;
      while (i-- && !_harnessPlugins[i].targetTest(target)) {}
      harnessPlugin = _harnessPlugins[i];
    }
    i = targets.length;
    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }
    return targets;
  },
  _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
  _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
  _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
  //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
  // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
  _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
      i = 0;
    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}
    return i < l;
  },
  _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;
    _lazyLookup = {};
    _lazyTweens.length = 0;
    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
  _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && !_reverting$1 && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting$1 && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && !_reverting$1 && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
  _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
  _passThrough = function _passThrough(p) {
    return p;
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
    return obj;
  },
  _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
  _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }
    return base;
  },
  _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }
    return base;
  },
  _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
      p;
    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }
    return copy;
  },
  _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }
    return vars;
  },
  _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
      match = i === a2.length;
    while (match && i-- && a1[i] === a2[i]) {}
    return i < 0;
  },
  _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = parent[lastProp],
      t;
    if (sortBy) {
      t = child[sortBy];
      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }
    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }
    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
  _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = child._prev,
      next = child._next;
    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }
    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
  _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
    child._act = 0;
  },
  _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;
      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }
    return animation;
  },
  _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }
    return animation;
  },
  _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
  _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
  _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
  // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
  _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
  _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
  _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
      _setEnd(animation);
      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }

    return animation;
  },
  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
  	let cycleDuration = duration + repeatDelay,
  		time = _round(clampedTotalTime % cycleDuration);
  	if (time > duration) {
  		time = duration;
  	}
  	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;
    if (child._time || child._initted && !child._dur) {
      //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
      t = _parentToChildTotalTime(timeline.rawTime(), child);
      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;
        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }
      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
  _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

    return timeline;
  },
  _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
  _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);
    if (!tween._initted) {
      return 1;
    }
    if (!force && tween._pt && !_reverting$1 && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);
      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
  _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
  // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
  _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;
    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }
    if (ratio !== prevRatio || _reverting$1 || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);
        if (!suppressEvents && !_reverting$1) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
  _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
    if (time > prevTime) {
      child = animation._first;
      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }
        child = child._next;
      }
    } else {
      child = animation._last;
      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }
        child = child._prev;
      }
    }
  },
  _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
  _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
  _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
  _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum$1 ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
      offset,
      isPercent;
    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");
      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }
      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }
      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
    return position == null ? clippedDuration : +position;
  },
  _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
    if (type) {
      irVars = vars;
      parent = timeline;
      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }
      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
  _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
  _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
  getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
  // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
  _slice = [].slice,
  _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win$1;
  },
  _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }
    return ar.forEach(function (value) {
      var _accumulator;
      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc$1).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
  selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc$1.createElement("div") : value);
    };
  },
  shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
  // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }
    var vars = _isObject(v) ? v : {
        each: v
      },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;
    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }
    return function (i, target, a) {
      var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;
      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum$1])[1];
        if (!wrapAt) {
          max = -_bigNum$1;
          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}
          wrapAt--;
        }
        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum$1 ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum$1;
        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }
        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }
      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
  _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
  snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
      radius,
      is2D;
    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum$1;
      if (snapTo.values) {
        snapTo = toArray(snapTo.values);
        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }
    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum$1,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;
      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }
        if (dx < min) {
          min = dx;
          closest = i;
        }
      }
      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
  random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
  pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }
    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
  unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
  normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
  _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
  wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
  wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
      total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
  _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;
    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }
    return s + value.substr(prev, value.length - prev);
  },
  mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
      outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
  interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };
    if (!func) {
      var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;
      progress === true && (mutate = 1) && (progress = null);
      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;
        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }

        l--;
        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };
        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }
      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }
        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }
    return _conditionalReturn(progress, func);
  },
  _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
      min = _bigNum$1,
      p,
      distance,
      label;
    for (p in labels) {
      distance = labels[p] - fromTime;
      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }
    return label;
  },
  _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
      callback = v[type],
      prevContext = _context,
      context = animation._ctx,
      params,
      scope,
      result;
    if (!callback) {
      return;
    }
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
  _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);
    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting$1);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
  _quickTween,
  _registerPluginQueue = [],
  _createPlugin = function _createPlugin(config) {
    if (!_windowExists$1()) {
      _registerPluginQueue.push(config);
      return;
    }
    config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    var name = config.name,
      isFunc = _isFunction(config),
      Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
      //in case someone passes in an object that's not a plugin, like CustomEase
      instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
      statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };
    _wake();
    if (config !== Plugin) {
      if (_plugins[name]) {
        return;
      }
      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods

      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods

      _plugins[Plugin.prop = name] = Plugin;
      if (config.targetTest) {
        _harnessPlugins.push(Plugin);
        _reservedProps[name] = 1;
      }
      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
    }

    _addGlobal(name, Plugin);
    config.register && config.register(gsap, Plugin, PropTween);
  },
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
  _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
  // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
  splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;
    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }
      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }
        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }
        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);
        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }
      a = a.map(Number);
    }
    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }
      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
  _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
      c = [],
      i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
  _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;
    if (!colors) {
      return s;
    }
    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;
      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;
        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }
    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;
      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }
    return result + shell[l];
  },
  _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;
    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }
    return new RegExp(s + ")", "gi");
  }(),
  _hslExp = /hsl[a]?\(/,
  _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
      toHSL;
    _colorExp.lastIndex = 0;
    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
  _ticker = function () {
    var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;
        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }
        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };
    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists$1()) {
            _win$1 = _coreInitted = window;
            _doc$1 = _win$1.document || {};
            _globals.gsap = gsap;
            (_win$1.gsapVersions || (_win$1.gsapVersions = [])).push(gsap.version);
            _install(_installScope || _win$1.GreenSockGlobals || !_win$1.gsap && _win$1 || {});
            _raf = _win$1.requestAnimationFrame;
            _registerPluginQueue.forEach(_createPlugin);
          }
          _id && _self.sleep();
          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };
          _tickerActive = 1;
          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win$1.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);
          _self.remove(func);
        } : callback;
        _self.remove(callback);
        _listeners[prioritize ? "unshift" : "push"](func);
        _wake();
        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
  _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
  //also ensures the core classes are initialized.

  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
  _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
  _quotesExp = /["']/g,
  _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;
    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }
    return obj;
  },
  _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
  _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
      ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
  _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
  // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
      ease;
    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }
      child = child._next;
    }
  },
  _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
  _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }
    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }
    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
      lowercaseName;
    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });
    return ease;
  },
  _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
  _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };
    return ease;
  },
  _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }
    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };
    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };

_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;
  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});
_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
(function (n, c) {
  var n1 = 1 / c,
    n2 = 2 * n1,
    n3 = 2.5 * n1,
    easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };
  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);
_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});
_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});
_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});
_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }
    var p1 = 1 / steps,
      p2 = steps + (immediateStart ? 0 : 1),
      p3 = immediateStart ? 1 : 0,
      max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];
_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;
    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }
    this._ts = 1;
    _setDuration(this, +vars.duration, 1, 1);
    this.data = vars.data;
    if (_context) {
      this._ctx = _context;
      _context.data.push(this);
    }
    _tickerActive || _ticker.wake();
  }
  var _proto = Animation.prototype;
  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }
    return this._delay;
  };
  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };
  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }
    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };
  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();
    if (!arguments.length) {
      return this._tTime;
    }
    var parent = this._dp;
    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);
      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }
        parent = parent.parent;
      }
      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }
    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}
    }

    return this;
  };
  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };

  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
  };
  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
  };
  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;
    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;

  _proto.timeScale = function timeScale(value) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }

    if (this._rts === value) {
      return this;
    }
    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);
    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

    return _recacheAncestors(this);
  };
  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    }
    if (this._ps !== value) {
      this._ps = value;
      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();
        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }

    return this;
  };
  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }
    return this._start;
  };
  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  };
  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };
  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }
    var prevIsReverting = _reverting$1;
    _reverting$1 = config;
    if (this._initted || this._startAt) {
      this.timeline && this.timeline.revert(config);
      this.totalTime(-0.01, config.suppressEvents);
    }
    this.data !== "nested" && config.kill !== false && this.kill();
    _reverting$1 = prevIsReverting;
    return this;
  };
  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
      time = arguments.length ? rawTime : animation.rawTime();
    while (animation) {
      time = animation._start + time / (animation._ts || 1);
      animation = animation._dp;
    }
    return !this.parent && this._sat ? this._sat.vars.immediateRender ? -1 : this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
  };

  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }
    return this._repeat === -2 ? Infinity : this._repeat;
  };
  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;
      _onUpdateTotalDuration(this);
      return time ? this.time(time) : this;
    }
    return this._rDelay;
  };
  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }
    return this._yoyo;
  };
  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };
  _proto.restart = function restart(includeDelay, suppressEvents) {
    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
  };
  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };
  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };
  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };
  _proto.resume = function resume() {
    return this.paused(false);
  };
  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }
    return this._rts < 0;
  };
  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };
  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
      start = this._start,
      rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };
  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;
    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }
      return this;
    }
    return vars[type];
  };
  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
        _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };
      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };
  _proto.kill = function kill() {
    _interrupt(this);
  };
  return Animation;
}();
_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);
  function Timeline(vars, position) {
    var _this;
    if (vars === void 0) {
      vars = {};
    }
    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }
  var _proto2 = Timeline.prototype;
  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);
    return this;
  };
  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);
    return this;
  };
  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);
    return this;
  };
  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };
  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
  } //ONLY for backward compatibility! Maybe delete?
  ;

  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };
  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._dirty ? this.totalDuration() : this._tDur,
      dur = this._dur,
      tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
      // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
      time,
      child,
      next,
      iteration,
      cycleDuration,
      prevPaused,
      pauseTween,
      timeScale,
      prevStart,
      prevIteration,
      yoyo,
      isYoyo;
    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }
      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;
      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
            doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : dur;
          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }
          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;
          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }
          this._lock = 0;
          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

          _propagateYoyoEase(this, isYoyo);
        }
      }
      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }
      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }

      if (!prevTime && time && !suppressEvents && !iteration) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      if (time >= prevTime && totalTime >= 0) {
        child = this._first;
        while (child) {
          next = child._next;
          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;
          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting$1 && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      }
      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto2.add = function add(child, position) {
    var _this2 = this;
    _isNumber(position) || (position = _parsePosition(this, position, child));
    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }
      if (_isString(child)) {
        return this.addLabel(child, position);
      }
      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }
    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };

  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }
    if (tweens === void 0) {
      tweens = true;
    }
    if (timelines === void 0) {
      timelines = true;
    }
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum$1;
    }
    var a = [],
      child = this._first;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }
      child = child._next;
    }
    return a;
  };
  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
      i = animations.length;
    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };
  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }
    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }
    _removeLinkedListItem(this, child);
    if (child === this._recent) {
      this._recent = this._last;
    }
    return _uncache(this);
  };
  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }
    this._forcing = 1;
    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }
    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
    this._forcing = 0;
    return this;
  };
  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };
  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };
  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };
  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);
    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }
      child = child._next;
    }
  };
  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
      i = tweens.length;
    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }
    return this;
  };
  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
      parsedTargets = toArray(targets),
      child = this._first,
      isGlobalTime = _isNumber(onlyActive),
      // a number is interpreted as a global time. If the animation spans
      children;
    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }
      child = child._next;
    }
    return a;
  } // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }
  ;

  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};
    var tl = this,
      endTime = _parsePosition(tl, position),
      _vars = vars,
      startAt = _vars.startAt,
      _onStart = _vars.onStart,
      onStartParams = _vars.onStartParams,
      immediateRender = _vars.immediateRender,
      initted,
      tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));
    return immediateRender ? tween.render(0) : tween;
  };
  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };
  _proto2.recent = function recent() {
    return this._recent;
  };
  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };
  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };
  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };
  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }
    var child = this._first,
      labels = this.labels,
      p;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }
      child = child._next;
    }
    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }
    return _uncache(this);
  };
  _proto2.invalidate = function invalidate(soft) {
    var child = this._first;
    this._lock = 0;
    while (child) {
      child.invalidate(soft);
      child = child._next;
    }
    return _Animation.prototype.invalidate.call(this, soft);
  };
  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }
    var child = this._first,
      next;
    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }
    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };
  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
      self = this,
      child = self._last,
      prevStart = _bigNum$1,
      prev,
      start,
      parent;
    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }
    if (self._dirty) {
      parent = self.parent;
      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;
        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }
        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;
          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }
          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }
        child._end > max && child._ts && (max = child._end);
        child = prev;
      }
      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);
      self._dirty = 0;
    }
    return self._tDur;
  };
  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
      _lastRenderedFrame = _ticker.frame;
    }
    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }
        child || _ticker.sleep();
      }
    }
  };
  return Timeline;
}(Animation);
_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});
var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";
    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }
    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }
    startNums = start.match(_complexStringNumExp) || [];
    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);
      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }
      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;
    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;
    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }
      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }
    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }
      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
  //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }
    var copy = {},
      p;
    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }
    return copy;
  },
  _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;
        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }
    return plugin;
  },
  _overwritingTween,
  //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
  _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      onUpdateParams = vars.onUpdateParams,
      callbackScope = vars.callbackScope,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    if (!tl || keyframes && !vars.stagger) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);
      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

        prevStartAt._lazy = 0;
      }
      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: !prevStartAt && _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

        tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

        time < 0 && (_reverting$1 || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent(tween._startAt = Tween.set(targets, p));
          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

          tween._startAt._sat = tween; // used in globalTime()

          time < 0 && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;
          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
          } else if (!time) {
            return;
          }
        }
      }
      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;
      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);
        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });
          plugin.priority && (hasPriority = 1);
        }
        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }
        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;
          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }
        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }
      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

    keyframes && time <= 0 && tl.render(_bigNum$1, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
  _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      rootPT,
      lookup,
      i;
    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;
      while (i--) {
        pt = lookup[i][property];
        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;
          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }
        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

          tween.vars[property] = "+=0";
          _initTween(tween, time);
          _forceAllPropTweens = 0;
          return 1;
        }
        ptCache.push(pt);
      }
    }
    i = ptCache.length;
    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
  _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;
    if (!propertyAliases) {
      return vars;
    }
    copy = _merge({}, vars);
    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }
    return copy;
  },
  // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;
    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
  _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
  _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
  _staggerPropsToSkip = {};
_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);
  function Tween(targets, vars, position, skipInherit) {
    var _this3;
    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }
    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
    var _this3$vars = _this3.vars,
      duration = _this3$vars.duration,
      delay = _this3$vars.delay,
      immediateRender = _this3$vars.immediateRender,
      stagger = _this3$vars.stagger,
      overwrite = _this3$vars.overwrite,
      keyframes = _this3$vars.keyframes,
      defaults = _this3$vars.defaults,
      scrollTrigger = _this3$vars.scrollTrigger,
      yoyoEase = _this3$vars.yoyoEase,
      parent = vars.parent || _globalTimeline,
      parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
      tl,
      i,
      copy,
      l,
      p,
      curTarget,
      staggerFunc,
      staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;
    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {},
        targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;
      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);
        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }
        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }
          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }
        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));
        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
          a,
          kf,
          v;
        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};
          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }
          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;
            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }
          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }

      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);
      _globalTimeline.killTweensOf(parsedTargets);
      _overwritingTween = 0;
    }
    _addToTimeline(parent, _assertThisInitialized(_this3), position);
    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);
    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
    }

    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }
  var _proto3 = Tween.prototype;
  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._tDur,
      dur = this._dur,
      isNegative = totalTime < 0,
      tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
      time,
      pt,
      iteration,
      cycleDuration,
      prevIteration,
      isYoyo,
      ratio,
      timeline,
      yoyoEase;
    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && isNegative) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        isYoyo = this._yoyo && iteration & 1;
        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        if (time === prevTime && !force && this._initted) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }
        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }
      if (!this._initted) {
        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }
        if (prevTime !== this._time) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.
          return this;
        }
        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._tTime = tTime;
      this._time = time;
      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }
      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }
      if (time && !prevTime && !suppressEvents && !iteration) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      pt = this._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }
      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto3.targets = function targets() {
    return this._targets;
  };
  _proto3.invalidate = function invalidate(soft) {
    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate(soft);
    return _Animation2.prototype.invalidate.call(this, soft);
  };
  _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
      ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
      return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}

    _alignPlayhead(this, 0);
    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
    return this.render(0);
  };
  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }
    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      return this.parent ? _interrupt(this) : this;
    }
    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }
    var parsedTargets = this._targets,
      killingTargets = targets ? toArray(targets) : parsedTargets,
      propTweenLookup = this._ptLookup,
      firstPT = this._pt,
      overwrittenProps,
      curLookup,
      curOverwriteProps,
      props,
      p,
      pt,
      i;
    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }
    overwrittenProps = this._op = this._op || [];
    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};
        _forEachName(vars, function (name) {
          return p[name] = 1;
        });
        vars = p;
      }
      vars = _addAliasesToVars(parsedTargets, vars);
    }
    i = parsedTargets.length;
    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];
        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }
        for (p in props) {
          pt = curLookup && curLookup[p];
          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }
            delete curLookup[p];
          }
          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }
    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };
  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };
  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };
  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
  };

  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };
  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };
  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };
  return Tween;
}(Animation);
_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.

_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
      params = _slice.call(arguments, 0);
    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
  _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
  _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
  _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
  _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
  _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
  _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
  _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
      s = "";
    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }
      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }

    data.set(data.t, data.p, s, data);
  },
  _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
  _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
      next;
    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
  _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
      hasNonDependentRemaining,
      next;
    while (pt) {
      next = pt._next;
      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }
      pt = next;
    }
    return !hasNonDependentRemaining;
  },
  _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
  _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;
      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }
      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }
      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }
      pt = next;
    }
    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;
    if (next) {
      next._prev = this;
    }
  }
  var _proto4 = PropTween.prototype;
  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };
  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});
_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
var _media = [],
  _listeners = {},
  _emptyArray = [],
  _lastMediaTime = 0,
  _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
  _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
      matches = [];
    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");
      _media.forEach(function (c) {
        var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;
        for (p in queries) {
          match = _win$1.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

          match && (anyMatch = 1);
          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }
        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });
      _dispatch("matchMediaRevert");
      matches.forEach(function (c) {
        return c.onMatch(c);
      });
      _lastMediaTime = time;
      _dispatch("matchMedia");
    }
  };
var Context = /*#__PURE__*/function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    func && this.add(func);
  }
  var _proto5 = Context.prototype;
  _proto5.add = function add(name, func, scope) {
    // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
    // if (name && _isFunction(name.revert)) {
    // 	this.data.push(name);
    // 	return (name._ctx = this);
    // }
    if (_isFunction(name)) {
      scope = func;
      func = name;
      name = _isFunction;
    }
    var self = this,
      f = function f() {
        var prev = _context,
          prevSelector = self.selector,
          result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };
    self.last = f;
    return name === _isFunction ? f(self) : name ? self[name] = f : f;
  };
  _proto5.ignore = function ignore(func) {
    var prev = _context;
    _context = null;
    func(this);
    _context = prev;
  };
  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
    });
    return a;
  };
  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };
  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;
    if (revert) {
      var tweens = this.getTweens();
      this.data.forEach(function (t) {
        // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
        if (t.data === "isFlip") {
          t.revert();
          t.getChildren(true, true, false).forEach(function (tween) {
            return tweens.splice(tweens.indexOf(tween), 1);
          });
        }
      }); // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

      tweens.map(function (t) {
        return {
          g: t.globalTime(0),
          t: t
        };
      }).sort(function (a, b) {
        return b.g - a.g || -1;
      }).forEach(function (o) {
        return o.t.revert(revert);
      }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

      this.data.forEach(function (e) {
        return !(e instanceof Animation) && e.revert && e.revert(revert);
      });
      this._r.forEach(function (f) {
        return f(revert, _this4);
      });
      this.isReverted = true;
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }
    this.clear();
    if (matchMedia) {
      var i = _media.indexOf(this);
      !!~i && _media.splice(i, 1);
    }
  };
  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };
  return Context;
}();
var MatchMedia = /*#__PURE__*/function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
  }
  var _proto6 = MatchMedia.prototype;
  _proto6.add = function add(conditions, func, scope) {
    _isObject(conditions) || (conditions = {
      matches: conditions
    });
    var context = new Context(0, scope || this.scope),
      cond = context.conditions = {},
      mq,
      p,
      active;
    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;
    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win$1.matchMedia(conditions[p]);
        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
        }
      }
    }
    active && func(context);
    return this;
  } // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }
  ;

  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };
  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };
  return MatchMedia;
}();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
      format = unit ? _passThrough : _numericIfPossible;
    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);
    if (target.length > 1) {
      var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
        l = setters.length;
      return function (value) {
        var i = l;
        while (i--) {
          setters[i](value);
        }
      };
    }
    target = target[0] || {};
    var Plugin = _plugins[property],
      cache = _getCache(target),
      p = cache.harness && (cache.harness.aliases || {})[property] || property,
      // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);
    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _merge2;
    var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
      func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };
    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
      effect = _ref3.effect,
      plugins = _ref3.plugins,
      defaults = _ref3.defaults,
      extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });
    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };
    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }
    var tl = new Timeline(vars),
      child,
      next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
    _globalTimeline.remove(tl);
    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;
    while (child) {
      next = child._next;
      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }
      child = next;
    }
    _addToTimeline(_globalTimeline, tl, 0);
    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return _media.forEach(function (c) {
      var cond = c.conditions,
        found,
        p;
      for (p in cond) {
        if (cond[p]) {
          cond[p] = false;
          found = 1;
        }
      }
      found && c.revert();
    }) || _onMediaChange();
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners[type],
      i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting$1;
    },
    context: function context(toAdd) {
      if (toAdd && _context) {
        _context.data.push(toAdd);
        toAdd._ctx = _context;
      }
      return _context;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};
_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});
_ticker.add(Timeline.updateRoot);
_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }
    return pt;
  },
  _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
      p,
      i,
      pt;
    for (p in modifiers) {
      i = targets.length;
      while (i--) {
        pt = tween._ptLookup[i][p];
        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }
          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
  _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;
          if (_isString(vars)) {
            temp = {};
            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

            vars = temp;
          }
          if (modifier) {
            temp = {};
            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }
            vars = temp;
          }
          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins

var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt, v;
    this.tween = tween;
    for (p in vars) {
      v = target.getAttribute(p) || "";
      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
      pt.op = p;
      pt.b = v; // record the beginning value so we can revert()

      this._props.push(p);
    }
  },
  render: function render(ratio, data) {
    var pt = data._pt;
    while (pt) {
      _reverting$1 ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

      pt = pt._next;
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;
    while (i--) {
      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.11.5";
_coreReady = 1;
_windowExists$1() && _wake();
_easeMap.Power0;
  _easeMap.Power1;
  _easeMap.Power2;
  _easeMap.Power3;
  _easeMap.Power4;
  _easeMap.Linear;
  _easeMap.Quad;
  _easeMap.Cubic;
  _easeMap.Quart;
  _easeMap.Quint;
  _easeMap.Strong;
  _easeMap.Elastic;
  _easeMap.Back;
  _easeMap.SteppedEase;
  _easeMap.Bounce;
  _easeMap.Sine;
  _easeMap.Expo;
  _easeMap.Circ;

/*!
 * CSSPlugin 3.11.5
 * https://greensock.com
 *
 * Copyright 2008-2023, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/
var _win,
  _doc,
  _docElement,
  _pluginInitted,
  _tempDiv,
  _recentSetterPlugin,
  _reverting,
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _transformProps = {},
  _RAD2DEG = 180 / Math.PI,
  _DEG2RAD = Math.PI / 180,
  _atan2 = Math.atan2,
  _bigNum = 1e8,
  _capsExp = /([A-Z])/g,
  _horizontalExp = /(left|right|width|margin|padding|x)/i,
  _complexExp = /[\s,\(]\S/,
  _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
  _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
  //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
  _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
  _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
  _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
  _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
  _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
  _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
  _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
  _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
  _transformProp = "transform",
  _transformOriginProp = _transformProp + "Origin",
  _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;
    var target = this.target,
      style = target.style;
    if (property in _transformProps) {
      this.tfm = this.tfm || {};
      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }
      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }
      if (target._gsap.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }
      property = _transformProp;
    }
    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
  _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
  _revertStyle = function _revertStyle() {
    var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;
    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
    }
    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }
      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }
      i = _reverting();
      if ((!i || !i.isStart) && !style[_transformProp]) {
        _removeIndependentTransforms(style);
        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
  _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    target._gsap || gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
  _supports3D,
  _createElement = function _createElement(type, ns) {
    var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
  _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
  _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
  _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
      s = e.style,
      i = 5;
    if (property in s && !preferPrefix) {
      return property;
    }
    property = property.charAt(0).toUpperCase() + property.substr(1);
    while (i-- && !(_prefixes[i] + property in s)) {}
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
  _initCore = function _initCore() {
    if (_windowExists() && window.document) {
      _win = window;
      _doc = _win.document;
      _docElement = _doc.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _reverting = gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
  _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;
    _docElement.appendChild(svg);
    svg.appendChild(this);
    this.style.display = "block";
    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original

        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }
    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }
    _docElement.removeChild(svg);
    this.style.cssText = oldCSS;
    return bbox;
  },
  _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
  _getBBox = function _getBBox(target) {
    var bounds;
    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }
    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
  _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
  //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;
      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }
      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }
        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
  _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
    plugin._props.push(property);
    return pt;
  },
  _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
  _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
  //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;
    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);
    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }
    if (!parent || parent === _doc || !parent.appendChild) {
      parent = _doc.body;
    }
    cache = parent._gsap;
    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";
      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }
    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
  _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();
    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];
      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }
    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];
      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }

    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
  _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);
      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }

    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings

    end += "";
    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }
    a = [start, end];
    _colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];
    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }
        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;
          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _config.units[prop] || startUnit;
            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }
          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }
      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }
    _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
  _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }
    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
  _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;
      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;
        while (--i > -1) {
          prop = props[i];
          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }
          _removeProperty(target, prop);
        }
      }
      if (clearTransforms) {
        _removeProperty(target, _transformProp);
        if (cache) {
          cache.svg && target.removeAttribute("transform");
          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

          cache.uncache = 1;
          _removeIndependentTransforms(style);
        }
      }
    }
  },
  // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;
        plugin._props.push(property);
        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
    	let _renderClassName = (ratio, data) => {
    			data.css.render(ratio, data.css);
    			if (!ratio || ratio === 1) {
    				let inline = data.rmv,
    					target = data.t,
    					p;
    				target.setAttribute("class", ratio ? data.e : data.b);
    				for (p in inline) {
    					_removeProperty(target, p);
    				}
    			}
    		},
    		_getAllStyles = (target) => {
    			let styles = {},
    				computed = getComputedStyle(target),
    				p;
    			for (p in computed) {
    				if (isNaN(p) && p !== "cssText" && p !== "length") {
    					styles[p] = computed[p];
    				}
    			}
    			_setDefaults(styles, _parseTransform(target, 1));
    			return styles;
    		},
    		startClassList = target.getAttribute("class"),
    		style = target.style,
    		cssText = style.cssText,
    		cache = target._gsap,
    		classPT = cache.classPT,
    		inlineToRemoveAtEnd = {},
    		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
    		changingVars = {},
    		startVars = _getAllStyles(target),
    		transformRelated = /(transform|perspective)/i,
    		endVars, p;
    	if (classPT) {
    		classPT.r(1, classPT.d);
    		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
    	}
    	target.setAttribute("class", data.e);
    	endVars = _getAllStyles(target, true);
    	target.setAttribute("class", startClassList);
    	for (p in endVars) {
    		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
    			changingVars[p] = endVars[p];
    			if (!style[p] && style[p] !== "0") {
    				inlineToRemoveAtEnd[p] = 1;
    			}
    		}
    	}
    	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
    	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
    		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
    	}
    	_parseTransform(target, true); //to clear the caching of transforms
    	data.css = new gsap.plugins.css();
    	data.css.init(target, changingVars, tween);
    	plugin._props.push(...data.css._props);
    	return 1;
    }
    */
  },
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
  _rotationalProperties = {},
  _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
  _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);
    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
  _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;
    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;
      if (!parent || !target.offsetParent) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
        addedToDOM = 1; //flag

        nextSibling = target.nextElementSibling;
        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");
      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }
    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
  _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;
    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }
    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
  _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);
    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }
    var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }
      style.scale = style.rotate = style.translate = "none";
    }
    matrix = _getMatrix(target, cache.svg);
    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }
        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }
        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }
      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }
    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
  _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
  //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
  _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
    _renderCSSTransforms(ratio, cache);
  },
  _zeroDeg = "0deg",
  _zeroPx = "0px",
  _endParenthesis = ") ",
  _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;
      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }
    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }
    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }
    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }
    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }
    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }
    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }
    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }
    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
  _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }
    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;
      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;
        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }
      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }
    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
  _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
      isString = _isString(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;
    if (isString) {
      direction = endValue.split("_")[1];
      if (direction === "short") {
        change %= cap;
        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }
      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
      }
    }
    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
    plugin._props.push(property);
    return pt;
  },
  _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }
    return target;
  },
  _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;
    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      _removeProperty(target, _transformProp);
      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }
    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];
      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;
        plugin._props.push(p);
      }
    }
    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

_forEachName("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
    r = "Right",
    b = "Bottom",
    l = "Left",
    props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });
  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;
    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }
    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});
var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
      style = target.style,
      startAt = tween.vars.startAt,
      startValue,
      endValue,
      endNum,
      startNum,
      type,
      specialProp,
      p,
      startUnit,
      endUnit,
      relative,
      isTransformRelated,
      transformPropTween,
      cache,
      smooth,
      hasPriority,
      inlineProps;
    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver(target);
    inlineProps = this.styles.props;
    this.tween = tween;
    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }
      endValue = vars[p];
      if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }
      type = typeof endValue;
      specialProp = _specialProps[p];
      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }
      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = _replaceRandom(endValue);
      }
      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _colorExp.lastIndex = 0;
        if (!_colorExp.test(startValue)) {
          // colors don't have units
          startUnit = getUnit(startValue);
          endUnit = getUnit(endValue);
        }
        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
        inlineProps.push(p, 0, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
          getUnit(startValue + "") || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }
        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);
        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }
            inlineProps.push("visibility", 0, style.visibility);
            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }
          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }
        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }
            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);
            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);
            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);
            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }
        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;
          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else if (p !== "parseTransform") {
            _missingPlugin(p, endValue);
            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }
        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
        props.push(p);
      }
    }
    hasPriority && _sortPropTweensByPriority(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting()) {
      var pt = data._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
gsap.utils.checkPrefix = _checkPropPrefix;
gsap.core.getStyleSaver = _getStyleSaver;
(function (positionAndScale, rotation, others, aliases) {
  var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });
  _forEachName(rotation, function (name) {
    _config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });
  _propertyAliases[all[13]] = positionAndScale + "," + rotation;
  _forEachName(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _config.units[name] = "px";
});
gsap.registerPlugin(CSSPlugin);

var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap;
  // to protect from tree shaking
  gsapWithCSS.core.Tween;

var CSS_CLASSES$p = {
  ROOT: 'mdc-icon'
};

var css_248z$y = ".mdc-icon{--_color:var(--md-icon-color,inherit);--_font:var(--md-icon-font,\"Material Symbols Outlined\");--_font-variation-settings:var(--md-icon-font-variation-settings,inherit);--_size:var(--md-icon-size,24px);--_weight:var(--md-icon-weight,400);word-wrap:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--_color);direction:ltr;display:inline-flex;font-family:var(--_font);font-size:var(--_size);font-style:normal;font-variation-settings:var(--_font-variation-settings);font-weight:var(--_weight);letter-spacing:normal;line-height:1;overflow:hidden;text-align:center;text-rendering:optimizeLegibility;text-transform:none;vertical-align:middle;white-space:nowrap}.mdc-icon span svg{fill:currentColor}.mdc-icon span{display:inline-block}";
styleInject(css_248z$y);

var Icon = function Icon(_ref) {
  var className = _ref.className,
    children = _ref.children,
    stage = _ref.stage;
  var div = React.useRef(null);
  var classNames = classnames(CSS_CLASSES$p.ROOT, className, {});
  React.useEffect(function () {
    switch (stage) {
      case 'rotate':
        {
          gsapWithCSS.to(div.current, {
            rotation: "360",
            duration: 4,
            ease: 'none',
            repeat: -1
          });
          break;
        }
    }
  }, [div.current]);
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    ref: div,
    children: jsxRuntime.exports.jsx("span", {
      children: children
    })
  });
};
Icon.displayName = 'Icon';

var CSS_CLASSES$o = {
  ROOT: 'mdc-navigation-bar',
  TABS: 'mdc-navigation-bar__tabs-slot-container',
  TAB: 'mdc-navigation-tab',
  TAB_ACTIVE: 'mdc-navigation-tab--active',
  TAB_ACTIVE_INDICATOR: 'mdc-navigation-tab__active-indicator',
  ICONCONTENT: 'mdc-navigation-tab__icon-content',
  ICON: 'mdc-navigation-tab__icon',
  ICONACTIVE: 'mdc-navigation-tab__icon--active',
  LABEL: 'mdc-navigation-tab__label-text'
};

var css_248z$x = ".mdc-navigation-bar{--mdc-navigation-bar-container-color:var(--md-sys-color-surface-container);--mdc-navigation-bar-active-focus-icon-color:var(--md-sys-color-on-secondary-container);--mdc-navigation-bar-active-indicator-color:var(--md-sys-color-secondary-container);--mdc-navigation-bar-inactive-focus-icon-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-focus-label-text-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-focus-state-layer-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-hover-icon-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-hover-label-text-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-hover-state-layer-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-icon-color:var(--md-sys-color-on-surface-variant);--mdc-navigation-bar-inactive-label-text-color:var(--md-sys-color-on-surface-variant);--mdc-navigation-bar-inactive-pressed-icon-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-pressed-label-text-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-inactive-pressed-state-layer-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-label-text-font:var(--md-ref-typeface-plain);--mdc-navigation-bar-label-text-line-height:1rem;--mdc-navigation-bar-label-text-size:0.75rem;--mdc-navigation-bar-label-text-tracking:0.031rem;--mdc-navigation-bar-label-text-type:500 0.75rem/1rem var(--md-ref-typeface-plain,Roboto);--mdc-navigation-bar-active-focus-label-text-color:var(--md-sys-color-on-surfac);--mdc-navigation-bar-active-focus-state-layer-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-active-hover-icon-color:var(--md-sys-color-on-secondary-container);--mdc-navigation-bar-active-hover-label-text-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-active-hover-state-layer-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-active-icon-color:var(--md-sys-color-on-secondary-container);--mdc-navigation-bar-active-label-text-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-active-label-text-weight:700;--mdc-navigation-bar-active-pressed-icon-color:var(--md-sys-color-on-secondary-container);--mdc-navigation-bar-active-pressed-label-text-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-active-pressed-state-layer-color:var(--md-sys-color-on-surface);--mdc-navigation-bar-container-shape:0px;--mdc-navigation-bar-container-height:80px;--mdc-navigation-bar-active-indicator-height:32px;--mdc-navigation-bar-container-elevation:2,--mdc-navigation-bar-active-indicator-shape:9999px;--mdc-navigation-bar-active-indicator-width:64px;--mdc-navigation-bar-focus-state-layer-opacity:0.12;--mdc-navigation-bar-hover-state-layer-opacity:0.08;--mdc-navigation-bar-icon-size:24px;--mdc-navigation-bar-label-text-weight:500;--md-navigation-bar-pressed-state-layer-opacity:0.12;background-color:var(--mdc-navigation-bar-container-color);border-radius:var(--mdc-navigation-bar-container-shape);display:flex;height:100%;width:100%}.mdc-navigation-bar.bottom,.mdc-navigation-bar.top{height:var(--mdc-navigation-bar-container-height);left:0;right:0;width:100%}.mdc-navigation-bar.top{top:0}.mdc-navigation-bar.bottom{bottom:0}.mdc-navigation-bar.left,.mdc-navigation-bar.right{bottom:0;height:100%;top:0;width:var(--mdc-navigation-bar-container-height)}.mdc-navigation-bar.left{left:0}.mdc-navigation-bar.right{right:0}.mdc-navigation-bar .mdc-navigation-bar__tabs-slot-container{display:inherit;display:flex;flex-direction:column;height:inherit}.mdc-navigation-tab{align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;box-sizing:border-box;cursor:pointer;display:flex;flex-direction:column;font:var(--mdc-navigation-bar-label-text-type);height:56px;justify-content:center;margin:6px 0;outline:none;position:relative;text-align:center;width:70px}.mdc-navigation-tab::-moz-focus-inner{border:0;padding:0}.mdc-navigation-tab__icon-content{align-items:center;box-sizing:border-box;display:flex;justify-content:center;position:relative;z-index:1}.mdc-navigation-tab__label-text{height:16px;margin-top:4px;opacity:1;transition:opacity .1s cubic-bezier(.4,0,.2,1),height .1s cubic-bezier(.4,0,.2,1);z-index:1}.mdc-navigation-tab--hide-inactive-label:not(.mdc-navigation-tab--active) .mdc-navigation-tab__label-text{height:0;opacity:0}.mdc-navigation-tab__active-indicator{background-color:var(--mdc-navigation-bar-active-indicator-color);border-radius:var(--mdc-navigation-bar-active-indicator-shape);display:flex;justify-content:center;opacity:0;position:absolute;transition:width .1s cubic-bezier(.4,0,.2,1),opacity .1s cubic-bezier(.4,0,.2,1);width:32px}.mdc-navigation-tab__active-indicator,.mdc-navigation-tab__icon-content{height:var(--mdc-navigation-bar-active-indicator-height)}.mdc-navigation-tab--active .mdc-navigation-tab__active-indicator,.mdc-navigation-tab:not(.mdc-navigation-tab--active):hover .mdc-navigation-tab__active-indicator,.mdc-navigation-tab__icon-content{width:var(--mdc-navigation-bar-active-indicator-width)}.mdc-navigation-tab__icon{fill:currentColor;align-self:center;display:inline-block;font-size:var(--mdc-navigation-bar-icon-size);height:var(--mdc-navigation-bar-icon-size);position:relative;width:var(--mdc-navigation-bar-icon-size)}.mdc-navigation-tab--active .mdc-navigation-tab__icon,.mdc-navigation-tab__icon.mdc-navigation-tab__icon--active{display:none}.mdc-navigation-tab--active .mdc-navigation-tab__icon.mdc-navigation-tab__icon--active{display:inline-block}.mdc-navigation-tab__ripple{z-index:0}.mdc-navigation-tab--active{--md-ripple-hover-color:var(--mdc-navigation-bar-active-hover-state-layer-color);--md-ripple-focus-color:var(--mdc-navigation-bar-active-focus-state-layer-color);--md-ripple-pressed-color:var(--mdc-navigation-bar-active-pressed-state-layer-color);--md-ripple-hover-opacity:var(--mdc-navigation-bar-hover-state-layer-opacity);--md-ripple-focus-opacity:var(--mdc-navigation-bar-focus-state-layer-opacity);--md-ripple-pressed-opacity:var(--mdc-navigation-bar-pressed-state-layer-opacity)}.mdc-navigation-tab--active .mdc-navigation-tab__active-indicator{opacity:1}.mdc-navigation-tab--active .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-active-icon-color)}.mdc-navigation-tab--active .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-active-label-text-color)}.mdc-navigation-tab--active:hover .mdc-navigation-tab__active-indicator{background-color:var(--md-sys-color-inverse-primary)}.mdc-navigation-tab--active:hover .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-active-hover-icon-color)}.mdc-navigation-tab--active:hover .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-active-hover-label-text-color)}.mdc-navigation-tab--active:focus .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-active-focus-icon-color)}.mdc-navigation-tab--active:focus .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-active-focus-label-text-color)}.mdc-navigation-tab--active:active .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-active-pressed-icon-color)}.mdc-navigation-tab--active:active .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-active-pressed-label-text-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active){--md-ripple-hover-color:var(--mdc-navigation-bar-inactive-hover-state-layer-color);--md-ripple-focus-color:var(--mdc-navigation-bar-inactive-focus-state-layer-color);--md-ripple-pressed-color:var(--mdc-navigation-bar-inactive-pressed-state-layer-color);--md-ripple-hover-opacity:var(--mdc-navigation-bar-hover-state-layer-opacity);--md-ripple-focus-opacity:var(--mdc-navigation-bar-focus-state-layer-opacity);--md-ripple-pressed-opacity:var(--mdc-navigation-bar-pressed-state-layer-opacity)}.mdc-navigation-tab:not(.mdc-navigation-tab--active) .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-inactive-icon-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active) .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-inactive-label-text-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active):hover .mdc-navigation-tab__active-indicator{opacity:1}.mdc-navigation-tab:not(.mdc-navigation-tab--active):hover .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-inactive-hover-icon-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active):hover .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-inactive-hover-label-text-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active):focus .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-inactive-focus-icon-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active):focus .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-inactive-focus-label-text-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active):active .mdc-navigation-tab__icon{color:var(--mdc-navigation-bar-inactive-pressed-icon-color)}.mdc-navigation-tab:not(.mdc-navigation-tab--active):active .mdc-navigation-tab__label-text{color:var(--mdc-navigation-bar-inactive-pressed-label-text-color)}@media (max-width:599px){.mdc-navigation-tab{height:100%;min-height:48px;min-width:48px;padding:8px 0 12px;width:100%}}";
styleInject(css_248z$x);

var Tab$1 = function Tab(_ref) {
  var children = _ref.children,
    className = _ref.className,
    icon = _ref.icon,
    name = _ref.name;
  var _useContext = React.useContext(NavContext),
    toggleActive = _useContext.toggleActive,
    active = _useContext.active;
  var classNames = classnames(CSS_CLASSES$o.TAB, className, _defineProperty({}, CSS_CLASSES$o.TAB_ACTIVE, active));
  var iconClassNames = classnames(CSS_CLASSES$o.ICON, className, _defineProperty({}, CSS_CLASSES$o.ICONACTIVE, active));
  function onActive() {
    name && toggleActive(name);
  }
  return jsxRuntime.exports.jsxs("button", {
    className: classNames,
    onClick: onActive,
    children: [jsxRuntime.exports.jsxs("span", {
      className: CSS_CLASSES$o.ICONCONTENT,
      children: [jsxRuntime.exports.jsx("span", {
        className: CSS_CLASSES$o.TAB_ACTIVE_INDICATOR
      }), jsxRuntime.exports.jsx(Icon, {
        className: iconClassNames,
        children: icon
      })]
    }), jsxRuntime.exports.jsx("span", {
      className: CSS_CLASSES$o.LABEL,
      children: children
    })]
  });
};

var _excluded$a = ["className", "children"];
var Nav = function Nav(_ref) {
  var className = _ref.className,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded$a);
  var activeState = useActive(children);
  var slots = useSlot(children);
  var classNames = classnames(CSS_CLASSES$o.ROOT, className, {});
  return jsxRuntime.exports.jsx(NavContext.Provider, {
    value: activeState,
    children: jsxRuntime.exports.jsxs("div", _objectSpread2(_objectSpread2({
      className: classNames
    }, props), {}, {
      children: [jsxRuntime.exports.jsx("div", {
        className: CSS_CLASSES$o.TABS,
        children: slots.children
      }), slots.content]
    }))
  });
};
Nav.Tab = Tab$1;

var css_248z$w = ".mdc-navigation-rail{background:var(--md-sys-color-surface);display:flex;flex-direction:column;height:100%;justify-content:space-between;overflow-y:auto;position:fixed;z-index:8}.mdc-navigation-rail nav.content{display:flex;flex-direction:column;margin-top:20px;width:88px}.mdc-navigation-rail nav.content a{color:var(--md-sys-color-on-surface);display:block;display:flex;flex-direction:column;margin:-2px auto 14px;padding:2px;text-align:center;text-decoration:none;width:80px}.mdc-navigation-rail nav.content a .icon{word-wrap:normal;-webkit-font-feature-settings:\"liga\";-webkit-font-smoothing:antialiased;align-items:center;border-radius:16px;direction:ltr;display:flex;display:inline-block;font-size:24px;height:32px;justify-content:center;letter-spacing:normal;line-height:32px;margin-bottom:4px;margin-left:auto;margin-right:auto;position:relative;text-transform:none;transition:font-variation-settings .2s cubic-bezier(.2,0,0,1);white-space:nowrap;width:56px}.mdc-navigation-rail nav.content a span{font-family:var(--md-sys-typescale-label-medium-font);font-size:var(--md-sys-typescale-label-medium-size);font-weight:var(--md-sys-typescale-label-medium-weight);line-height:var(--md-sys-typescale-label-medium-line-height);margin-bottom:4px;text-align:center;transition:font-variation-settings .2s cubic-bezier(.2,0,0,1)}.mdc-navigation-rail .tools{display:flex;justify-content:center;margin-bottom:16px}";
styleInject(css_248z$w);

var _excluded$9 = ["dataSource", "className", "children"];
var NavRail = function NavRail(_ref) {
  var _ref$dataSource = _ref.dataSource,
    dataSource = _ref$dataSource === void 0 ? [] : _ref$dataSource,
    className = _ref.className,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded$9);
  var classNames = classnames('mdc-navigation-rail', className, {});
  var _useState = React.useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    active = _useState2[0],
    setActive = _useState2[1];
  function doActive(name) {
    setActive(name);
  }
  return jsxRuntime.exports.jsxs("div", _objectSpread2(_objectSpread2({
    className: classNames
  }, props), {}, {
    children: [jsxRuntime.exports.jsx("nav", {
      className: 'content',
      children: dataSource.map(function (_ref2) {
        var icon = _ref2.icon,
          title = _ref2.title,
          name = _ref2.name;
        return jsxRuntime.exports.jsxs("a", {
          className: "".concat(active === name, " ? 'active' : ''"),
          onClick: function onClick() {
            return doActive(name);
          },
          children: [jsxRuntime.exports.jsx(Icon, {
            className: 'icon',
            children: icon
          }), jsxRuntime.exports.jsx("span", {
            children: title
          })]
        });
      })
    }), jsxRuntime.exports.jsx("div", {
      className: 'tools',
      children: children
    })]
  }));
};

var strong = _collectionStrong;
var validate$1 = _validateCollection;
var SET = 'Set';

// 23.2 Set Objects
_collection(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate$1(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

var anObject = _anObject;
var toLength = _toLength;
var advanceStringIndex = _advanceStringIndex;
var regExpExec = _regexpExecAbstract;

// @@match logic
_fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
  // `String.prototype.match` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.match
  function match(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  },
  // `RegExp.prototype[@@match]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
  function (regexp) {
    var res = maybeCallNative($match, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    if (!rx.global) return regExpExec(rx, S);
    var fullUnicode = rx.unicode;
    rx.lastIndex = 0;
    var A = [];
    var n = 0;
    var result;
    while ((result = regExpExec(rx, S)) !== null) {
      var matchStr = String(result[0]);
      A[n] = matchStr;
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      n++;
    }
    return n === 0 ? null : A;
  }];
});

var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

var $export$4 = _export;
var defined$2 = _defined;
var fails$3 = _fails;
var spaces = _stringWs;
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');
var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails$3(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export$4($export$4.P + $export$4.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined$2(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};
var _stringTrim = exporter;

// 21.1.3.25 String.prototype.trim()
_stringTrim('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

var global = _global.exports;
var has = _has;
var cof = _cof;
var inheritIfRequired = _inheritIfRequired;
var toPrimitive = _toPrimitive;
var fails$2 = _fails;
var gOPN = _objectGopn.f;
var gOPD = require_objectGopd().f;
var dP = _objectDp.f;
var $trim = _stringTrim.trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(_objectCreate(proto)) == NUMBER;
var TRIM = ('trim' in String.prototype);

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        // fast equal /^0b[01]+$/i
        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        // fast equal /^0o[0-7]+$/i
        default:
          return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      }
      return parseInt(digits, radix);
    }
  }
  return +it;
};
if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
    // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails$2(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = _descriptors ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  _redefine.exports(global, NUMBER, $Number);
}

var EASING = {
  STANDARD: 'cubic-bezier(0.2, 0, 0, 1)',
  STANDARD_ACCELERATE: 'cubic-bezier(.3,0,1,1)',
  STANDARD_DECELERATE: 'cubic-bezier(0,0,0,1)',
  EMPHASIZED: 'cubic-bezier(.3,0,0,1)',
  EMPHASIZED_ACCELERATE: 'cubic-bezier(.3,0,.8,.15)',
  EMPHASIZED_DECELERATE: 'cubic-bezier(.05,.7,.1,1)'
};

var CSS_CLASSES$n = {
  ROOT: 'mdc-ripple',
  SURFACE: 'surface',
  UNBOUNDED: 'unbounded',
  FOCUSED: 'focused',
  HOVERED: 'hovered',
  ACTIVED: 'actived'
};
var State;
(function (State) {
  State[State["INACTIVE"] = 0] = "INACTIVE";
  State[State["TOUCH_DELAY"] = 1] = "TOUCH_DELAY";
  State[State["HOLDING"] = 2] = "HOLDING";
  State[State["WAITING_FOR_CLICK"] = 3] = "WAITING_FOR_CLICK";
})(State || (State = {}));
var PRESS_GROW_MS = 450;
var INITIAL_ORIGIN_SCALE = 0.2;
var PADDING = 10;
var SOFT_EDGE_MINIMUM_SIZE = 75;
var SOFT_EDGE_CONTAINER_RATIO = 0.35;
var PRESS_PSEUDO = '::after';
var ANIMATION_FILL = 'forwards';

var css_248z$v = ".mdc-ripple{--_focus-color:var(\n    --md-ripple-focus-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-opacity:var(--md-ripple-focus-opacity,0.12);--_hover-color:var(\n    --md-ripple-hover-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-opacity:var(--md-ripple-hover-opacity,0.08);--_pressed-color:var(\n    --md-ripple-pressed-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_pressed-opacity:var(--md-ripple-pressed-opacity,0.12);--_shape:var(--md-ripple-shape,0px);display:flex}.mdc-ripple[disabled]{opacity:0}.mdc-ripple,.mdc-ripple .surface{inset:0;overflow:hidden;pointer-events:none;position:absolute}.mdc-ripple .surface{border-radius:var(--_shape);outline:none;will-change:transform}.mdc-ripple .surface:after,.mdc-ripple .surface:before{content:\"\";opacity:0;pointer-events:none;position:absolute}.mdc-ripple .surface:before{background-color:var(--_hover-color);inset:0;transition:opacity 15ms linear,background-color 15ms linear}.mdc-ripple .surface:after{background:radial-gradient(closest-side,var(--_pressed-color) max(100% - 70px,65%),transparent 100%);transform-origin:center center;transition:opacity 375ms linear}.mdc-ripple .hovered:before{background-color:var(--_hover-color);opacity:var(--_hover-opacity)}.mdc-ripple .focused:before{background-color:var(--_focus-color);opacity:var(--_focus-opacity);transition-duration:75ms}.mdc-ripple .pressed:after{opacity:var(--_pressed-opacity);transition-duration:105ms}.mdc-ripple .unbounded{--_shape:var(--md-ripple-shape,9999px)}@media screen and (forced-colors:active){.mdc-ripple{display:none}}";
styleInject(css_248z$v);

var Ripple = function Ripple(_ref) {
  var round = _ref.round,
    parent = _ref.parent,
    className = _ref.className;
  var ref = React.useRef(null);
  var _useState = React.useState(State.INACTIVE),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var _useState3 = React.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    hovered = _useState4[0],
    setHovered = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    actived = _useState6[0],
    setActived = _useState6[1];
  var root = classnames(CSS_CLASSES$n.ROOT, className, {});
  var surface = React.useMemo(function () {
    var _classnames;
    return classnames(CSS_CLASSES$n.SURFACE, {}, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$n.UNBOUNDED, round), _defineProperty(_classnames, CSS_CLASSES$n.HOVERED, hovered), _defineProperty(_classnames, 'pressed', actived), _classnames));
  }, [hovered, actived]);
  function startPressAnimation() {
    setActived(true);
    // growAnimation?.cancel();
    var _determineRippleSize = determineRippleSize(),
      rippleScale = _determineRippleSize.rippleScale;
    var option = {
      pseudoElement: PRESS_PSEUDO,
      duration: PRESS_GROW_MS,
      easing: EASING.STANDARD,
      fill: ANIMATION_FILL
    };
    var from = _objectSpread2({
      scale: 1
    }, option);
    var to = _objectSpread2({
      scale: rippleScale
    }, option);
    gsapWithCSS.fromTo(".surface", from, to);
  }
  // function getTranslationCoordinates(positionEvent?: Event, initialSize = 0) {
  //   const { height, width } = getDimensions();
  //   // end in the center
  //   const endPoint = {
  //     x: (width - initialSize) / 2,
  //     y: (height - initialSize) / 2,
  //   };
  //   let startPoint;
  //   if (positionEvent instanceof PointerEvent) {
  //     startPoint = getNormalizedPointerEventCoords(positionEvent);
  //   } else {
  //     startPoint = {
  //       x: width / 2,
  //       y: height / 2,
  //     };
  //   }
  //   // center around start point
  //   startPoint = {
  //     x: startPoint.x - initialSize / 2,
  //     y: startPoint.y - initialSize / 2,
  //   };
  //   return { startPoint, endPoint };
  // }
  // function getNormalizedPointerEventCoords(pointerEvent: any): {
  //   x: number;
  //   y: number;
  // } {
  //   const { scrollX, scrollY } = window;
  //   const { left, top } = getDimensions();
  //   const documentX = scrollX + left;
  //   const documentY = scrollY + top;
  //   const { pageX, pageY } = pointerEvent;
  //   return { x: pageX - documentX, y: pageY - documentY };
  // }
  function getDimensions() {
    return parent === null || parent === void 0 ? void 0 : parent.current.getBoundingClientRect();
  }
  function determineRippleSize() {
    var _getDimensions = getDimensions(),
      height = _getDimensions.height,
      width = _getDimensions.width;
    var maxDim = Math.max(height, width);
    var softEdgeSize = Math.max(SOFT_EDGE_CONTAINER_RATIO * maxDim, SOFT_EDGE_MINIMUM_SIZE);
    var maxRadius = maxDim;
    var initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);
    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
    maxRadius = hypotenuse + PADDING;
    if (round) {
      initialSize = initialSize - initialSize % 2;
    }
    return {
      initialSize: initialSize,
      rippleSize: "".concat((maxRadius + softEdgeSize) / initialSize),
      rippleScale: "".concat(initialSize, "px")
    };
  }
  React.useEffect(function () {
    if (parent.current) {
      parent.current.onmouseover = function () {
        setHovered(true);
      };
      parent.current.onmouseout = function () {
        setHovered(false);
        if (state !== State.INACTIVE) ;
      };
      parent.current.onmousedown = function () {
        setState(State.WAITING_FOR_CLICK);
        startPressAnimation();
      };
      parent.current.onmouseup = function () {
        if (state === State.HOLDING) {
          setState(State.WAITING_FOR_CLICK);
          return;
        }
        if (state === State.TOUCH_DELAY) {
          setState(State.WAITING_FOR_CLICK);
          startPressAnimation();
          return;
        }
      };
    }
  }, [parent.current]);
  return jsxRuntime.exports.jsx("div", {
    className: root,
    ref: ref,
    children: jsxRuntime.exports.jsx("div", {
      className: surface
    })
  });
};

var CSS_CLASSES$m = {
  ROOT: 'mdc-radio',
  CHECKED: 'checked'
};

var css_248z$u = ".mdc-radio{--_disabled-selected-icon-color:var(\n    --md-radio-disabled-selected-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-selected-icon-opacity:var(\n    --md-radio-disabled-selected-icon-opacity,0.38\n  );--_disabled-unselected-icon-color:var(\n    --md-radio-disabled-unselected-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-unselected-icon-opacity:var(\n    --md-radio-disabled-unselected-icon-opacity,0.38\n  );--_icon-size:var(--md-radio-icon-size,20px);--_selected-focus-icon-color:var(\n    --md-radio-selected-focus-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-focus-state-layer-color:var(\n    --md-radio-selected-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-focus-state-layer-opacity:var(\n    --md-radio-selected-focus-state-layer-opacity,0.12\n  );--_selected-hover-icon-color:var(\n    --md-radio-selected-hover-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-hover-state-layer-color:var(\n    --md-radio-selected-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-hover-state-layer-opacity:var(\n    --md-radio-selected-hover-state-layer-opacity,0.08\n  );--_selected-icon-color:var(\n    --md-radio-selected-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-pressed-icon-color:var(\n    --md-radio-selected-pressed-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-pressed-state-layer-color:var(\n    --md-radio-selected-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_selected-pressed-state-layer-opacity:var(\n    --md-radio-selected-pressed-state-layer-opacity,0.12\n  );--_state-layer-size:var(--md-radio-state-layer-size,40px);--_unselected-focus-icon-color:var(\n    --md-radio-unselected-focus-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-state-layer-color:var(\n    --md-radio-unselected-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-state-layer-opacity:var(\n    --md-radio-unselected-focus-state-layer-opacity,0.12\n  );--_unselected-hover-icon-color:var(\n    --md-radio-unselected-hover-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-state-layer-color:var(\n    --md-radio-unselected-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-state-layer-opacity:var(\n    --md-radio-unselected-hover-state-layer-opacity,0.08\n  );--_unselected-icon-color:var(\n    --md-radio-unselected-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-pressed-icon-color:var(\n    --md-radio-unselected-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-state-layer-color:var(\n    --md-radio-unselected-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_unselected-pressed-state-layer-opacity:var(\n    --md-radio-unselected-pressed-state-layer-opacity,0.12\n  );--md-ripple-focus-color:var(--_unselected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_unselected-focus-state-layer-opacity);--md-ripple-hover-color:var(--_unselected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_unselected-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_unselected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_unselected-pressed-state-layer-opacity);--md-focus-ring-offset:-2px;display:inline-flex;height:48px;position:relative;vertical-align:top;width:48px}.mdc-radio .icon,.mdc-radio .mdc-ripple,.mdc-radio input{inset:0;margin:auto;position:absolute}.mdc-radio input{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}.mdc-radio .mdc-ripple{height:var(--_state-layer-size);width:var(--_state-layer-size)}.mdc-radio .icon{fill:var(--_unselected-icon-color)}.mdc-radio .icon,.mdc-radio .mdc-focus{height:var(--_icon-size);width:var(--_icon-size)}.mdc-radio .mdc-focus{left:50%;margin-left:calc(var(--_icon-size)*-1/2);margin-top:calc(var(--_icon-size)*-1/2);top:50%}.mdc-radio .outer.circle{transition:fill 50ms linear}.mdc-radio .inner.circle{opacity:0;transform-origin:center;transition:opacity 50ms linear}.mdc-radio.checked{--md-ripple-focus-color:var(--_selected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_selected-focus-state-layer-opacity);--md-ripple-hover-color:var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_selected-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_selected-pressed-state-layer-opacity)}.mdc-radio.checked .icon{fill:var(--_selected-icon-color)}.mdc-radio.checked .inner.circle{animation:inner-circle-grow .3s cubic-bezier(.05,.7,.1,1);opacity:1}.mdc-radio.checked:hover .icon{fill:var(--_selected-hover-icon-color)}.mdc-radio.checked:focus-within .icon{fill:var(--_selected-focus-icon-color)}.mdc-radio.checked:active .icon{fill:var(--_selected-pressed-icon-color)}@keyframes inner-circle-grow{0%{transform:scale(0)}to{transform:scale(1)}}.mdc-radio[disabled] .circle{animation-duration:0s;transition-duration:0s}.mdc-radio[disabled] .icon{fill:var(--_disabled-unselected-icon-color);opacity:var(--_disabled-unselected-icon-opacity)}.mdc-radio:hover .icon{fill:var(--_unselected-hover-icon-color)}.mdc-radio:focus-within .icon{fill:var(--_unselected-focus-icon-color)}.mdc-radio:active .icon{fill:var(--_unselected-pressed-icon-color)}.mdc-radio[checked][disabled] .icon{fill:var(--_disabled-selected-icon-color);opacity:var(--_disabled-selected-icon-opacity)}@media (forced-colors:active){.mdc-radio{--md-radio-disabled-selected-icon-color:GrayText;--md-radio-disabled-selected-icon-opacity:1;--md-radio-disabled-unselected-icon-color:GrayText;--md-radio-disabled-unselected-icon-opacity:1;--md-radio-selected-icon-color:CanvasText;--md-radio-selected-hover-icon-color:CanvasText;--md-radio-selected-focus-icon-color:CanvasText;--md-radio-selected-pressed-icon-color:CanvasText;--md-radio-unselected-icon-color:CanvasText;--md-radio-unselected-hover-icon-color:CanvasText;--md-radio-unselected-focus-icon-color:CanvasText;--md-radio-unselected-pressed-icon-color:CanvasText}}";
styleInject(css_248z$u);

var Radio = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
    value = _ref.value,
    disabled = _ref.disabled,
    name = _ref.name;
  var _useState = React.useState(value || false),
    _useState2 = _slicedToArray(_useState, 2),
    checked = _useState2[0],
    setChecked = _useState2[1];
  var $el = ref || React.useRef(null);
  var classNames = React.useMemo(function () {
    return classnames(CSS_CLASSES$m.ROOT, className, _defineProperty({}, CSS_CLASSES$m.CHECKED, checked));
  }, [checked]);
  var doChange = function doChange(e) {
    setChecked(e.target.checked);
  };
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    ref: $el,
    children: [jsxRuntime.exports.jsx(Ripple, {
      round: true,
      parent: $el
    }), jsxRuntime.exports.jsx(Focus, {
      parent: $el
    }), jsxRuntime.exports.jsxs("svg", {
      className: "icon",
      viewBox: "0 0 20 20",
      children: [jsxRuntime.exports.jsxs("mask", {
        id: "cutout",
        children: [jsxRuntime.exports.jsx("rect", {
          width: "100%",
          height: "100%",
          fill: "white"
        }), jsxRuntime.exports.jsx("circle", {
          cx: "10",
          cy: "10",
          r: "8",
          fill: "black"
        })]
      }), jsxRuntime.exports.jsx("circle", {
        className: "outer circle",
        cx: "10",
        cy: "10",
        r: "10",
        mask: "url(#cutout)"
      }), jsxRuntime.exports.jsx("circle", {
        className: "inner circle",
        cx: "10",
        cy: "10",
        r: "5"
      })]
    }), jsxRuntime.exports.jsx("input", {
      type: "radio",
      name: name,
      checked: checked,
      disabled: disabled,
      onChange: doChange
    })]
  });
});

var CSS_CLASSES$l = {
  ROOT: 'mdc-checkbox',
  DISABLED: 'disabled',
  CONTAINER: 'container',
  CHECKED: 'checked',
  PREV_CHECKED: 'prev-checked',
  PREV_UNSELECTED: 'prev-unselected',
  UNSELECTED: 'unselected',
  SELECTED: 'selected',
  INDETERMINATE: 'indeterminate'
};

var css_248z$t = ".mdc-checkbox{--_container-shape:var(--md-checkbox-container-shape,2px);--_container-size:var(--md-checkbox-container-size,18px);--_error-focus-state-layer-color:var(\n    --md-checkbox-error-focus-state-layer-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-state-layer-opacity:var(\n    --md-checkbox-error-focus-state-layer-opacity,0.12\n  );--_error-hover-state-layer-color:var(\n    --md-checkbox-error-hover-state-layer-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-state-layer-opacity:var(\n    --md-checkbox-error-hover-state-layer-opacity,0.08\n  );--_error-pressed-state-layer-color:var(\n    --md-checkbox-error-pressed-state-layer-color,var(--md-sys-color-error,#b3261e)\n  );--_error-pressed-state-layer-opacity:var(\n    --md-checkbox-error-pressed-state-layer-opacity,0.12\n  );--_icon-size:var(--md-checkbox-icon-size,18px);--_selected-container-color:var(\n    --md-checkbox-selected-container-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-disabled-container-color:var(\n    --md-checkbox-selected-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_selected-disabled-container-opacity:var(\n    --md-checkbox-selected-disabled-container-opacity,0.38\n  );--_selected-disabled-icon-color:var(\n    --md-checkbox-selected-disabled-icon-color,var(--md-sys-color-surface,#fef7ff)\n  );--_selected-error-container-color:var(\n    --md-checkbox-selected-error-container-color,var(--md-sys-color-error,#b3261e)\n  );--_selected-error-focus-container-color:var(\n    --md-checkbox-selected-error-focus-container-color,var(--md-sys-color-error,#b3261e)\n  );--_selected-error-focus-icon-color:var(\n    --md-checkbox-selected-error-focus-icon-color,var(--md-sys-color-on-error,#fff)\n  );--_selected-error-hover-container-color:var(\n    --md-checkbox-selected-error-hover-container-color,var(--md-sys-color-error,#b3261e)\n  );--_selected-error-hover-icon-color:var(\n    --md-checkbox-selected-error-hover-icon-color,var(--md-sys-color-on-error,#fff)\n  );--_selected-error-icon-color:var(\n    --md-checkbox-selected-error-icon-color,var(--md-sys-color-on-error,#fff)\n  );--_selected-error-pressed-container-color:var(\n    --md-checkbox-selected-error-pressed-container-color,var(--md-sys-color-error,#b3261e)\n  );--_selected-error-pressed-icon-color:var(\n    --md-checkbox-selected-error-pressed-icon-color,var(--md-sys-color-on-error,#fff)\n  );--_selected-focus-container-color:var(\n    --md-checkbox-selected-focus-container-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-focus-icon-color:var(\n    --md-checkbox-selected-focus-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_selected-focus-state-layer-color:var(\n    --md-checkbox-selected-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-focus-state-layer-opacity:var(\n    --md-checkbox-selected-focus-state-layer-opacity,0.12\n  );--_selected-hover-container-color:var(\n    --md-checkbox-selected-hover-container-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-hover-icon-color:var(\n    --md-checkbox-selected-hover-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_selected-hover-state-layer-color:var(\n    --md-checkbox-selected-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-hover-state-layer-opacity:var(\n    --md-checkbox-selected-hover-state-layer-opacity,0.08\n  );--_selected-icon-color:var(\n    --md-checkbox-selected-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_selected-pressed-container-color:var(\n    --md-checkbox-selected-pressed-container-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-pressed-icon-color:var(\n    --md-checkbox-selected-pressed-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_selected-pressed-state-layer-color:var(\n    --md-checkbox-selected-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_selected-pressed-state-layer-opacity:var(\n    --md-checkbox-selected-pressed-state-layer-opacity,0.12\n  );--_state-layer-shape:var(--md-checkbox-state-layer-shape,9999px);--_state-layer-size:var(--md-checkbox-state-layer-size,40px);--_unselected-disabled-container-opacity:var(\n    --md-checkbox-unselected-disabled-container-opacity,0.38\n  );--_unselected-disabled-outline-color:var(\n    --md-checkbox-unselected-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-disabled-outline-width:var(\n    --md-checkbox-unselected-disabled-outline-width,2px\n  );--_unselected-error-focus-outline-color:var(\n    --md-checkbox-unselected-error-focus-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_unselected-error-hover-outline-color:var(\n    --md-checkbox-unselected-error-hover-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_unselected-error-outline-color:var(\n    --md-checkbox-unselected-error-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_unselected-error-pressed-outline-color:var(\n    --md-checkbox-unselected-error-pressed-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_unselected-focus-outline-color:var(\n    --md-checkbox-unselected-focus-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-outline-width:var(\n    --md-checkbox-unselected-focus-outline-width,2px\n  );--_unselected-focus-state-layer-color:var(\n    --md-checkbox-unselected-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-state-layer-opacity:var(\n    --md-checkbox-unselected-focus-state-layer-opacity,0.12\n  );--_unselected-hover-outline-color:var(\n    --md-checkbox-unselected-hover-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-outline-width:var(\n    --md-checkbox-unselected-hover-outline-width,2px\n  );--_unselected-hover-state-layer-color:var(\n    --md-checkbox-unselected-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-state-layer-opacity:var(\n    --md-checkbox-unselected-hover-state-layer-opacity,0.08\n  );--_unselected-outline-color:var(\n    --md-checkbox-unselected-outline-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-outline-width:var(--md-checkbox-unselected-outline-width,2px);--_unselected-pressed-outline-color:var(\n    --md-checkbox-unselected-pressed-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-outline-width:var(\n    --md-checkbox-unselected-pressed-outline-width,2px\n  );--_unselected-pressed-state-layer-color:var(\n    --md-checkbox-unselected-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_unselected-pressed-state-layer-opacity:var(\n    --md-checkbox-unselected-pressed-state-layer-opacity,0.12\n  );--_container-shape-start-start:var(\n    --md-checkbox-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-checkbox-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-checkbox-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-checkbox-container-shape-end-start,var(--_container-shape)\n  );--md-focus-ring-offset:-2px;border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start);display:inline-flex;height:48px;position:relative;vertical-align:top;width:48px}.mdc-checkbox input{-webkit-appearance:none;-moz-appearance:none;appearance:none;block-size:100%;inline-size:100%;inset:0;margin:0;opacity:0;outline:none;position:absolute}.mdc-checkbox .container{border-radius:inherit;height:100%;position:relative;width:100%}.mdc-checkbox .background,.mdc-checkbox .icon,.mdc-checkbox .mdc-ripple,.mdc-checkbox .outline{inset:0;margin:auto;position:absolute}.mdc-checkbox .background,.mdc-checkbox .outline{border-radius:inherit;height:var(--_container-size);width:var(--_container-size)}.mdc-checkbox .outline{border-color:var(--_unselected-outline-color);border-style:solid;border-width:var(--_unselected-outline-width);box-sizing:border-box}.mdc-checkbox .background{background-color:var(--_selected-container-color)}.mdc-checkbox .background,.mdc-checkbox .icon{opacity:0;transform:scale(.6);transition-duration:.15s,50ms;transition-property:transform,opacity;transition-timing-function:cubic-bezier(.3,0,.8,.15),linear}.mdc-checkbox .selected .background,.mdc-checkbox .selected .icon{opacity:1;transform:scale(1);transition-duration:.35s,50ms;transition-timing-function:cubic-bezier(.05,.7,.1,1),linear}.mdc-checkbox .mdc-ripple{--md-ripple-focus-color:var(--_unselected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_unselected-focus-state-layer-opacity);--md-ripple-hover-color:var(--_unselected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_unselected-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_unselected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_unselected-pressed-state-layer-opacity);--md-ripple-shape:var(--_state-layer-shape);height:var(--_state-layer-size);width:var(--_state-layer-size)}.mdc-checkbox .selected .mdc-ripple{--md-ripple-focus-color:var(--_selected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_selected-focus-state-layer-opacity);--md-ripple-hover-color:var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_selected-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_selected-pressed-state-layer-opacity)}.mdc-checkbox .error .mdc-ripple{--md-ripple-focus-color:var(--_error-focus-state-layer-color);--md-ripple-focus-opacity:var(--_error-focus-state-layer-opacity);--md-ripple-hover-color:var(--_error-hover-state-layer-color);--md-ripple-hover-opacity:var(--_error-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_error-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_error-pressed-state-layer-opacity)}.mdc-checkbox .mdc-focus{--md-focus-ring-color:var(--_unselected-outline-color);border-radius:inherit;height:var(--_icon-size);left:50%;margin-left:calc(var(--_icon-size)*-1/2);margin-top:calc(var(--_icon-size)*-1/2);top:50%;width:var(--_icon-size)}.mdc-checkbox .selected .mdc-focus{--md-focus-ring-color:var(--_selected-focus-state-layer-color)}.mdc-checkbox .error .mdc-focus{--md-focus-ring-color:var(--_error-focus-state-layer-color)}.mdc-checkbox .icon{fill:var(--_selected-icon-color);height:var(--_icon-size);width:var(--_icon-size)}.mdc-checkbox .mark.short{height:2px;transition-property:transform,height;width:2px}.mdc-checkbox .mark.long{height:2px;transition-property:transform,width;width:10px}.mdc-checkbox .mark{animation-duration:.15s;animation-timing-function:cubic-bezier(.3,0,.8,.15);transition-duration:.15s;transition-timing-function:cubic-bezier(.3,0,.8,.15)}.mdc-checkbox .selected .mark{animation-duration:.35s;animation-timing-function:cubic-bezier(.05,.7,.1,1);transition-duration:.35s;transition-timing-function:cubic-bezier(.05,.7,.1,1)}.mdc-checkbox .checked .mark,.mdc-checkbox .prev-checked.unselected .mark{transform:scaleY(-1) translate(7px,-14px) rotate(45deg)}.mdc-checkbox .checked .mark.short,.mdc-checkbox .prev-checked.unselected .mark.short{height:5.6568542495px}.mdc-checkbox .checked .mark.long,.mdc-checkbox .prev-checked.unselected .mark.long{width:11.313708499px}.mdc-checkbox .indeterminate .mark,.mdc-checkbox .prev-indeterminate.unselected .mark{transform:scaleY(-1) translate(4px,-10px) rotate(0deg)}.mdc-checkbox .prev-unselected .mark{transition-property:none}.mdc-checkbox .prev-unselected.checked .mark.long{animation-name:prev-unselected-to-checked}@keyframes prev-unselected-to-checked{0%{width:0}}.mdc-checkbox .error .outline{border-color:var(--_unselected-error-outline-color)}.mdc-checkbox .error .background{background:var(--_selected-error-container-color)}.mdc-checkbox .error .icon{fill:var(--_selected-error-icon-color)}.mdc-checkbox:hover .outline{border-color:var(--_unselected-hover-outline-color);border-width:var(--_unselected-hover-outline-width)}.mdc-checkbox:hover .background{background:var(--_selected-hover-container-color)}.mdc-checkbox:hover .icon{fill:var(--_selected-hover-icon-color)}.mdc-checkbox:hover .error .outline{border-color:var(--_unselected-error-hover-outline-color)}.mdc-checkbox:hover .error .background{background:var(--_selected-error-hover-container-color)}.mdc-checkbox:hover .error .icon{fill:var(--_selected-error-hover-icon-color)}.mdc-checkbox:focus-within .outline{border-color:var(--_unselected-focus-outline-color);border-width:var(--_unselected-focus-outline-width)}.mdc-checkbox:focus-within .background{background:var(--_selected-focus-container-color)}.mdc-checkbox:focus-within .icon{fill:var(--_selected-focus-icon-color)}.mdc-checkbox:focus-within .error .outline{border-color:var(--_unselected-error-focus-outline-color)}.mdc-checkbox:focus-within .error .background{background:var(--_selected-error-focus-container-color)}.mdc-checkbox:focus-within .error .icon{fill:var(--_selected-error-focus-icon-color)}.mdc-checkbox:active .outline{border-color:var(--_unselected-pressed-outline-color);border-width:var(--_unselected-pressed-outline-width)}.mdc-checkbox:active .background{background:var(--_selected-pressed-container-color)}.mdc-checkbox:active .icon{fill:var(--_selected-pressed-icon-color)}.mdc-checkbox:active .error .outline{border-color:var(--_unselected-error-pressed-outline-color)}.mdc-checkbox:active .error .background{background:var(--_selected-error-pressed-container-color)}.mdc-checkbox:active .error .icon{fill:var(--_selected-error-pressed-icon-color)}.mdc-checkbox .prev-disabled .background,.mdc-checkbox .prev-disabled .icon,.mdc-checkbox .prev-disabled .mark,.mdc-checkbox.disabled .background,.mdc-checkbox.disabled .icon,.mdc-checkbox.disabled .mark{animation-duration:0s;transition-duration:0s}.mdc-checkbox.disabled .outline{border-color:var(--_unselected-disabled-outline-color);border-width:var(--_unselected-disabled-outline-width);opacity:var(--_unselected-disabled-container-opacity)}.mdc-checkbox.disabled .selected .outline{visibility:hidden}.mdc-checkbox.disabled .selected .background{background:var(--_selected-disabled-container-color);opacity:var(--_selected-disabled-container-opacity)}.mdc-checkbox.disabled .icon{fill:var(--_selected-disabled-icon-color)}@media (forced-colors:active){.mdc-checkbox{--md-checkbox-selected-container-color:CanvasText;--md-checkbox-selected-disabled-container-color:GrayText;--md-checkbox-selected-disabled-container-opacity:1;--md-checkbox-selected-disabled-icon-color:Canvas;--md-checkbox-selected-error-container-color:CanvasText;--md-checkbox-selected-error-focus-container-color:CanvasText;--md-checkbox-selected-error-focus-icon-color:Canvas;--md-checkbox-selected-error-hover-container-color:CanvasText;--md-checkbox-selected-error-hover-icon-color:Canvas;--md-checkbox-selected-error-icon-color:Canvas;--md-checkbox-selected-error-pressed-container-color:CanvasText;--md-checkbox-selected-error-pressed-icon-color:Canvas;--md-checkbox-selected-focus-container-color:CanvasText;--md-checkbox-selected-focus-icon-color:Canvas;--md-checkbox-selected-hover-container-color:CanvasText;--md-checkbox-selected-hover-icon-color:Canvas;--md-checkbox-selected-icon-color:Canvas;--md-checkbox-selected-pressed-container-color:CanvasText;--md-checkbox-selected-pressed-icon-color:Canvas;--md-checkbox-unselected-disabled-container-opacity:1;--md-checkbox-unselected-disabled-outline-color:GrayText;--md-checkbox-unselected-error-focus-outline-color:CanvasText;--md-checkbox-unselected-error-hover-outline-color:CanvasText;--md-checkbox-unselected-error-outline-color:CanvasText;--md-checkbox-unselected-error-pressed-outline-color:CanvasText;--md-checkbox-unselected-focus-outline-color:CanvasText;--md-checkbox-unselected-hover-outline-color:CanvasText;--md-checkbox-unselected-outline-color:CanvasText;--md-checkbox-unselected-pressed-outline-color:CanvasText}}";
styleInject(css_248z$t);

var Checkbox = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var value = _ref.value,
    disabled = _ref.disabled,
    indeterminate = _ref.indeterminate,
    name = _ref.name,
    className = _ref.className;
  var $el = ref || React.useRef(null);
  var _useState = React.useState(value || false),
    _useState2 = _slicedToArray(_useState, 2),
    checked = _useState2[0],
    setChecked = _useState2[1];
  var classNames = classnames(CSS_CLASSES$l.ROOT, className, _defineProperty({}, CSS_CLASSES$l.DISABLED, disabled));
  var container = React.useMemo(function () {
    var _classnames2;
    return classnames(CSS_CLASSES$l.CONTAINER, {}, (_classnames2 = {}, _defineProperty(_classnames2, CSS_CLASSES$l.CHECKED, checked), _defineProperty(_classnames2, CSS_CLASSES$l.SELECTED, checked), _defineProperty(_classnames2, CSS_CLASSES$l.UNSELECTED, !checked), _defineProperty(_classnames2, CSS_CLASSES$l.PREV_CHECKED, !checked), _defineProperty(_classnames2, CSS_CLASSES$l.PREV_UNSELECTED, checked), _defineProperty(_classnames2, CSS_CLASSES$l.INDETERMINATE, indeterminate), _classnames2));
  }, [checked]);
  var doChange = function doChange(e) {
    setChecked(e.target.checked);
  };
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    ref: $el,
    children: [jsxRuntime.exports.jsxs("div", {
      className: container,
      children: [jsxRuntime.exports.jsx("div", {
        className: "outline"
      }), jsxRuntime.exports.jsx("div", {
        className: "background"
      }), jsxRuntime.exports.jsx(Ripple, {
        parent: $el
      }), jsxRuntime.exports.jsx(Focus, {
        parent: $el
      }), jsxRuntime.exports.jsxs("svg", {
        className: "icon",
        viewBox: "0 0 18 18",
        children: [jsxRuntime.exports.jsx("rect", {
          className: "mark short"
        }), jsxRuntime.exports.jsx("rect", {
          className: "mark long"
        })]
      })]
    }), jsxRuntime.exports.jsx("input", {
      type: "checkbox",
      disabled: disabled,
      name: name,
      checked: checked,
      onChange: doChange
    })]
  });
});

var CSS_CLASSES$k = {
  ROOT: 'mdc-label'
};

var css_248z$s = ".mdc-label{align-items:center;display:inline-flex;flex-direction:row;justify-content:flex-start}";
styleInject(css_248z$s);

var Label = function Label(_ref) {
  var children = _ref.children,
    className = _ref.className;
  var classNames = classnames(CSS_CLASSES$k.ROOT, className, {});
  return jsxRuntime.exports.jsx("label", {
    className: classNames,
    children: children
  });
};

function _isPlaceholder(a) {
  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}

/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */

function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */

function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
          return fn(a, _b);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}

/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      const defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42(false);  //=> false
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */

var defaultTo = /*#__PURE__*/
_curry2(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});

var CSS_CLASSES$j = {
  ROOT: 'mdc-progress',
  TYPE_LINEAR: 'linear',
  TYPE_CIRCULAR: 'circular',
  LINEARRoot: 'mdc-line-progress',
  LINEAR: 'linear-progress',
  INDETERMINATE: 'indeterminate',
  ANIMATION_READY: 'animation-ready',
  FOUR_COLORS: 'four-colors'
};

var css_248z$r = ".mdc-line-progress{--_active-indicator-color:var(\n    --md-linear-progress-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-height:var(\n    --md-linear-progress-active-indicator-height,4px\n  );--_four-color-active-indicator-four-color:var(\n    --md-linear-progress-four-color-active-indicator-four-color,var(--md-sys-color-tertiary-container,#ffd8e4)\n  );--_four-color-active-indicator-one-color:var(\n    --md-linear-progress-four-color-active-indicator-one-color,var(--md-sys-color-primary,#6750a4)\n  );--_four-color-active-indicator-three-color:var(\n    --md-linear-progress-four-color-active-indicator-three-color,var(--md-sys-color-tertiary,#7d5260)\n  );--_four-color-active-indicator-two-color:var(\n    --md-linear-progress-four-color-active-indicator-two-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_track-color:var(\n    --md-linear-progress-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_track-height:var(--md-linear-progress-track-height,4px);--_track-shape:var(--md-linear-progress-track-shape,0px);block-size:var(--_track-height);contain:strict;content-visibility:auto;display:block;min-inline-size:80px;position:relative}.mdc-line-progress .bar,.mdc-line-progress .bar-inner,.mdc-line-progress .buffer-bar,.mdc-line-progress .linear-progress,.mdc-line-progress .track{position:absolute}.mdc-line-progress .linear-progress{align-items:center;border-radius:var(--_track-shape);display:flex;inset:0;outline:1px solid transparent;overflow:hidden}.mdc-line-progress .bar{animation:none;block-size:var(--_active-indicator-height);inline-size:100%;transform-origin:left center;transition:transform .25s cubic-bezier(.4,0,.6,1);will-change:transform}.mdc-line-progress .secondary-bar{display:none}.mdc-line-progress .bar-inner{animation:none;background:var(--_active-indicator-color);inset:0}.mdc-line-progress .buffer-bar{background:var(--_track-color);transform-origin:left center;transition:transform .25s cubic-bezier(.4,0,.6,1)}.mdc-line-progress .buffer-bar,.mdc-line-progress .track{inset:0;will-change:transform}.mdc-line-progress .track{animation:.25s linear infinite;animation-name:buffering;background:0/calc(var(--_track-height)/2*5) 100% radial-gradient(circle at calc(var(--_track-height)/2*2),var(--_track-color) 0,var(--_track-color) calc(var(--_track-height)/2),transparent calc(var(--_track-height)/2))}.mdc-line-progress .indeterminate .bar{transition:none}.mdc-line-progress .indeterminate .primary-bar{inset-inline-start:-145.167%}.mdc-line-progress .indeterminate .secondary-bar{display:block;inset-inline-start:-54.8889%}.mdc-line-progress .indeterminate .track{display:none}.mdc-line-progress .indeterminate.animation-ready .primary-bar{animation:2s linear infinite;animation-name:primary-indeterminate-translate;will-change:transform}.mdc-line-progress .indeterminate.animation-ready .primary-bar>.bar-inner{animation:primary-indeterminate-scale 2s linear infinite;will-change:transform}.mdc-line-progress .indeterminate.animation-ready.four-colors .primary-bar>.bar-inner{animation-duration:2s,4s;animation-name:primary-indeterminate-scale,four-colors}.mdc-line-progress .indeterminate.animation-ready .secondary-bar{animation:2s linear infinite;animation-name:secondary-indeterminate-translate;will-change:transform}.mdc-line-progress .indeterminate.animation-ready .secondary-bar>.bar-inner{animation:secondary-indeterminate-scale 2s linear infinite;will-change:transform}.mdc-line-progress .indeterminate.animation-ready.four-colors .secondary-bar>.bar-inner{animation-duration:2s,4s;animation-name:secondary-indeterminate-scale,four-colors}.mdc-line-progress :host-context([dir=rtl]) .linear-progress .bar{transform-origin:right center}.mdc-line-progress :host-context([dir=rtl]) .linear-progress .buffer-bar{transform-origin:right center}.mdc-line-progress :host-context([dir=rtl]) .linear-progress .track{animation-name:buffering-rtl}.mdc-line-progress :host-context([dir=rtl]) .linear-progress.indeterminate.animation-ready .primary-bar{animation-name:primary-indeterminate-translate-rtl}.mdc-line-progress :host-context([dir=rtl]) .linear-progress.indeterminate.animation-ready .secondary-bar{animation-name:secondary-indeterminate-translate-rtl}.mdc-line-progress :host([dir=rtl]) .linear-progress .bar{transform-origin:right center}.mdc-line-progress :host([dir=rtl]) .linear-progress .buffer-bar{transform-origin:right center}.mdc-line-progress :host([dir=rtl]) .linear-progress .track{animation-name:buffering-rtl}.mdc-line-progress :host([dir=rtl]) .linear-progress.indeterminate.animation-ready .primary-bar{animation-name:primary-indeterminate-translate-rtl}.mdc-line-progress :host([dir=rtl]) .linear-progress.indeterminate.animation-ready .secondary-bar{animation-name:secondary-indeterminate-translate-rtl}.mdc-line-progress .linear-progress:dir(rtl) .bar{transform-origin:right center}.mdc-line-progress .linear-progress:dir(rtl) .buffer-bar{transform-origin:right center}.mdc-line-progress .linear-progress:dir(rtl) .track{animation-name:buffering-rtl}.mdc-line-progress .linear-progress:dir(rtl).indeterminate.animation-ready .primary-bar{animation-name:primary-indeterminate-translate-rtl}.mdc-line-progress .linear-progress:dir(rtl).indeterminate.animation-ready .secondary-bar{animation-name:secondary-indeterminate-translate-rtl}@keyframes primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.334731,.12482,.785844,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.661479)}to{transform:scaleX(.08)}}@keyframes secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.205028,.057051,.57661,.453971);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.152313,.196432,.648374,1.00432);transform:scaleX(.457104)}44.15%{animation-timing-function:cubic-bezier(.257759,-.003163,.211762,1.38179);transform:scaleX(.72796)}to{transform:scaleX(.08)}}@keyframes buffering{0%{transform:translateX(calc(var(--_track-height)/2*5*1))}}@keyframes primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(83.6714%)}to{transform:translateX(200.611%)}}@keyframes secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.515058,.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.284058,.8,.733712);transform:translateX(37.6519%)}48.35%{animation-timing-function:cubic-bezier(.4,.627035,.6,.902026);transform:translateX(84.3862%)}to{transform:translateX(160.278%)}}@keyframes buffering-rtl{0%{transform:translateX(calc(var(--_track-height)/2*5*-1))}}@keyframes primary-indeterminate-translate-rtl{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(-83.6714%)}to{transform:translateX(-200.611%)}}@keyframes secondary-indeterminate-translate-rtl{0%{animation-timing-function:cubic-bezier(.15,0,.515058,.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.284058,.8,.733712);transform:translateX(-37.6519%)}48.35%{animation-timing-function:cubic-bezier(.4,.627035,.6,.902026);transform:translateX(-84.3862%)}to{transform:translateX(-160.278%)}}@keyframes four-colors{0%{background:var(--_four-color-active-indicator-one-color)}15%{background:var(--_four-color-active-indicator-one-color)}25%{background:var(--_four-color-active-indicator-two-color)}40%{background:var(--_four-color-active-indicator-two-color)}50%{background:var(--_four-color-active-indicator-three-color)}65%{background:var(--_four-color-active-indicator-three-color)}75%{background:var(--_four-color-active-indicator-four-color)}90%{background:var(--_four-color-active-indicator-four-color)}to{background:var(--_four-color-active-indicator-one-color)}}@media screen and (forced-colors:active){.mdc-line-progress .linear-progress{--_active-indicator-color:canvastext;--_track-color:graytext;border:1px solid canvastext}.mdc-line-progress .indeterminate.linear-progress{--_track-color:canvas}}.mdc-circular-progress{--_active-indicator-color:var(\n    --md-circular-progress-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-width:var(\n    --md-circular-progress-active-indicator-width,8.33\n  );--_four-color-active-indicator-four-color:var(\n    --md-circular-progress-four-color-active-indicator-four-color,var(--md-sys-color-tertiary-container,#ffd8e4)\n  );--_four-color-active-indicator-one-color:var(\n    --md-circular-progress-four-color-active-indicator-one-color,var(--md-sys-color-primary,#6750a4)\n  );--_four-color-active-indicator-three-color:var(\n    --md-circular-progress-four-color-active-indicator-three-color,var(--md-sys-color-tertiary,#7d5260)\n  );--_four-color-active-indicator-two-color:var(\n    --md-circular-progress-four-color-active-indicator-two-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_size:var(--md-circular-progress-size,48px);align-items:center;contain:strict;content-visibility:auto;display:inline-flex;justify-content:center;min-block-size:var(--_size);min-inline-size:var(--_size);position:relative;vertical-align:middle}.mdc-circular-progress .circular-progress{align-self:stretch;flex:1;margin:4px}.mdc-circular-progress .circle,.mdc-circular-progress .circular-progress,.mdc-circular-progress .left,.mdc-circular-progress .progress,.mdc-circular-progress .right,.mdc-circular-progress .spinner,.mdc-circular-progress .track,.mdc-circular-progress svg{inset:0;position:absolute}.mdc-circular-progress svg{transform:rotate(-90deg)}.mdc-circular-progress circle{cx:50%;cy:50%;r:calc(50%*(1 - var(--_active-indicator-width)/100));stroke-width:calc(var(--_active-indicator-width)*1%);stroke-dasharray:100;fill:transparent}.mdc-circular-progress .progress{stroke:var(--_active-indicator-color);transition:stroke-dashoffset .5s cubic-bezier(0,0,.2,1)}.mdc-circular-progress .track{stroke:transparent}.mdc-circular-progress .circular-progress.indeterminate{animation:linear-rotate linear infinite;animation-duration:1.5682352941s;will-change:transform}.mdc-circular-progress .spinner{animation:rotate-arc infinite both;animation-duration:5332ms;animation-timing-function:cubic-bezier(.4,0,.2,1);will-change:transform}.mdc-circular-progress .left{inset:0 50% 0 0}.mdc-circular-progress .left,.mdc-circular-progress .right{overflow:hidden}.mdc-circular-progress .right{inset:0 0 0 50%}.mdc-circular-progress .circle{animation:expand-arc;animation-duration:1333ms,5332ms;animation-fill-mode:both;animation-iteration-count:infinite;animation-timing-function:cubic-bezier(.4,0,.2,1);border:solid calc(var(--_active-indicator-width)/100*(var(--_size) - 8px));border-color:var(--_active-indicator-color) var(--_active-indicator-color) transparent transparent;border-radius:50%;box-sizing:border-box;will-change:transform}.mdc-circular-progress .four-color .circle{animation-name:expand-arc,four-color}.mdc-circular-progress .left .circle{inset:0 -100% 0 0;rotate:135deg}.mdc-circular-progress .right .circle{animation-delay:-.6665s,0ms;inset:0 0 0 -100%;rotate:100deg}@media screen and (forced-colors:active){.mdc-circular-progress .progress{stroke:CanvasText}.mdc-circular-progress .circle{border-color:CanvasText CanvasText Canvas Canvas}}@keyframes expand-arc{0%{transform:rotate(265deg)}50%{transform:rotate(130deg)}to{transform:rotate(265deg)}}@keyframes rotate-arc{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}to{transform:rotate(3turn)}}@keyframes linear-rotate{to{transform:rotate(1turn)}}@keyframes four-color{0%{border-right-color:var(--_four-color-active-indicator-one-color);border-top-color:var(--_four-color-active-indicator-one-color)}15%{border-right-color:var(--_four-color-active-indicator-one-color);border-top-color:var(--_four-color-active-indicator-one-color)}25%{border-right-color:var(--_four-color-active-indicator-two-color);border-top-color:var(--_four-color-active-indicator-two-color)}40%{border-right-color:var(--_four-color-active-indicator-two-color);border-top-color:var(--_four-color-active-indicator-two-color)}50%{border-right-color:var(--_four-color-active-indicator-three-color);border-top-color:var(--_four-color-active-indicator-three-color)}65%{border-right-color:var(--_four-color-active-indicator-three-color);border-top-color:var(--_four-color-active-indicator-three-color)}75%{border-right-color:var(--_four-color-active-indicator-four-color);border-top-color:var(--_four-color-active-indicator-four-color)}90%{border-right-color:var(--_four-color-active-indicator-four-color);border-top-color:var(--_four-color-active-indicator-four-color)}to{border-right-color:var(--_four-color-active-indicator-one-color);border-top-color:var(--_four-color-active-indicator-one-color)}}.mdc-progress.linear{align-items:center;display:flex;flex-direction:row;justify-content:flex-start;width:100%}.mdc-progress.linear .mdc-line-progress{flex:1}.mdc-progress.linear .text{padding-left:4px}.mdc-progress.circular{display:inline-block;position:relative;width:auto}.mdc-progress.circular .text{align-items:center;bottom:0;display:flex;flex-direction:column;justify-content:center;left:0;position:absolute;right:0;top:0}.mdc-progress.circular .text label{line-height:30px}";
styleInject(css_248z$r);

var _excluded$8 = ["buffer", "fourColors", "text", "type", "className"];
var Progress = function Progress(_ref) {
  var _classnames, _classnames2;
  var _ref$buffer = _ref.buffer,
    buffer = _ref$buffer === void 0 ? 1 : _ref$buffer,
    _ref$fourColors = _ref.fourColors,
    fourColors = _ref$fourColors === void 0 ? false : _ref$fourColors,
    text = _ref.text,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'linear' : _ref$type,
    className = _ref.className,
    props = _objectWithoutProperties(_ref, _excluded$8);
  var value = defaultTo(0)(props.value);
  var indeterminate = defaultTo(false)(props.indeterminate);
  var _useState = React.useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    animationReady = _useState2[0],
    setanimationReady = _useState2[1];
  var classNames = classnames(CSS_CLASSES$j.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$j.TYPE_LINEAR, type === 'linear'), _defineProperty(_classnames, CSS_CLASSES$j.TYPE_CIRCULAR, type === 'circular'), _classnames));
  var progressStyles = {
    transform: "scaleX(".concat((indeterminate ? 1 : value) * 100, "%)")
  };
  var bufferStyles = {
    transform: "scaleX(".concat((indeterminate ? 1 : buffer) * 100, "%)")
  };
  var linear = classnames(CSS_CLASSES$j.LINEAR, {}, (_classnames2 = {}, _defineProperty(_classnames2, CSS_CLASSES$j.INDETERMINATE, indeterminate), _defineProperty(_classnames2, CSS_CLASSES$j.ANIMATION_READY, animationReady), _defineProperty(_classnames2, CSS_CLASSES$j.FOUR_COLORS, fourColors), _classnames2));
  var renderIndeterminateContainer = function renderIndeterminateContainer() {
    return jsxRuntime.exports.jsxs("div", {
      className: "spinner",
      children: [jsxRuntime.exports.jsx("div", {
        className: "left",
        children: jsxRuntime.exports.jsx("div", {
          className: "circle"
        })
      }), jsxRuntime.exports.jsx("div", {
        className: "right",
        children: jsxRuntime.exports.jsx("div", {
          className: "circle"
        })
      })]
    });
  };
  var renderDeterminateContainer = function renderDeterminateContainer() {
    var dashOffset = (1 - value) * 100;
    var pathLength = 100;
    return jsxRuntime.exports.jsxs("svg", {
      viewBox: "0 0 4800 4800",
      children: [jsxRuntime.exports.jsx("circle", {
        className: "track",
        pathLength: pathLength
      }), jsxRuntime.exports.jsx("circle", {
        className: "progress",
        pathLength: pathLength,
        strokeDashoffset: dashOffset
      })]
    });
  };
  React.useEffect(function () {
    setanimationReady(true);
  }, []);
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    children: [type === 'linear' ? jsxRuntime.exports.jsx("div", {
      className: "mdc-line-progress",
      children: jsxRuntime.exports.jsxs("div", {
        className: linear,
        children: [jsxRuntime.exports.jsx("div", {
          className: "track"
        }), jsxRuntime.exports.jsx("div", {
          className: "buffer-bar",
          style: bufferStyles
        }), jsxRuntime.exports.jsx("div", {
          className: "bar primary-bar",
          style: progressStyles,
          children: jsxRuntime.exports.jsx("div", {
            className: "bar-inner"
          })
        }), jsxRuntime.exports.jsx("div", {
          className: "bar secondary-bar",
          children: jsxRuntime.exports.jsx("div", {
            className: "bar-inner"
          })
        })]
      })
    }) : null, type === 'circular' ? jsxRuntime.exports.jsx("div", {
      className: "mdc-circular-progress",
      children: indeterminate ? renderIndeterminateContainer() : renderDeterminateContainer()
    }) : null, text ? jsxRuntime.exports.jsx("div", {
      className: 'text',
      children: jsxRuntime.exports.jsx("label", {
        children: text
      })
    }) : null]
  });
};

var CSS_CLASSES$i = {
  ROOT: 'mdc-elevation'
};

var css_248z$q = ".mdc-elevation{--_level:var(--md-elevation-level,0);--_shadow-color:var(\n    --md-elevation-shadow-color,var(--md-sys-color-shadow,#000)\n  );display:flex;pointer-events:none}.mdc-elevation,.mdc-elevation .shadow,.mdc-elevation .shadow:after,.mdc-elevation .shadow:before{border-radius:inherit;inset:0;position:absolute;transition-duration:inherit;transition-timing-function:inherit}.mdc-elevation .shadow:after,.mdc-elevation .shadow:before{content:\"\";transition-property:box-shadow,opacity}.mdc-elevation .shadow:before{box-shadow:0 calc(1px*(clamp(0, var(--_level), 1) + clamp(0, var(--_level) - 3, 1) + clamp(0, var(--_level) - 4, 1)*2)) calc(1px*(2*clamp(0, var(--_level), 1) + clamp(0, var(--_level) - 2, 1) + clamp(0, var(--_level) - 4, 1))) 0 var(--_shadow-color);opacity:.3}.mdc-elevation .shadow:after{box-shadow:0 calc(1px*(clamp(0, var(--_level), 1) + clamp(0, var(--_level) - 1, 1) + clamp(0, var(--_level) - 2, 3)*2)) calc(1px*(clamp(0, var(--_level), 2)*3 + clamp(0, var(--_level) - 2, 3)*2)) calc(1px*(clamp(0, var(--_level), 4) + 2*clamp(0, var(--_level) - 4, 1))) var(--_shadow-color);opacity:.15}";
styleInject(css_248z$q);

var Elevation = function Elevation(_ref) {
  var className = _ref.className;
  var classNames = classnames(CSS_CLASSES$i.ROOT, className, {});
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    children: jsxRuntime.exports.jsx("div", {
      className: 'shadow'
    })
  });
};

var CSS_CLASSES$h = {
  ROOT: 'mdc-chip',
  CONTAINER: 'container',
  DISABLED: 'disabled',
  ELEVATED: 'elevated',
  SELECTED: 'selected'
};

var css_248z$p = ".mdc-chip{--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);--md-focus-ring-shape-start-start:var(--_container-shape-start-start);--md-focus-ring-shape-start-end:var(--_container-shape-start-end);--md-focus-ring-shape-end-end:var(--_container-shape-end-end);--md-focus-ring-shape-end-start:var(--_container-shape-end-start);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start);display:inline-flex;height:var(--_container-height)}.mdc-chip .container{border-radius:inherit;box-sizing:border-box;display:flex;height:100%;position:relative;width:100%}.mdc-chip .container:before{border-radius:inherit;content:\"\";inset:0;pointer-events:none;position:absolute}.mdc-chip .container:not(.disabled){cursor:pointer}.mdc-chip .container.disabled{pointer-events:none}.mdc-chip .action{align-items:baseline;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;border-radius:inherit;display:flex;gap:8px;outline:none;padding:0;position:relative;text-decoration:none}.mdc-chip .primary.action{-webkit-padding-start:8px;-webkit-padding-end:16px;padding-inline-end:16px;padding-inline-start:8px}.mdc-chip .touch{height:48px;inset:50% 0 0;transform:translateY(-50%);width:100%}.mdc-chip .outline,.mdc-chip .touch{position:absolute}.mdc-chip .outline{border:var(--_outline-width) solid var(--_outline-color);border-radius:inherit;inset:0;pointer-events:none}.mdc-chip:focus .outline{border-color:var(--_focus-outline-color)}.mdc-chip .disabled .outline{border-color:var(--_disabled-outline-color);opacity:var(--_disabled-outline-opacity)}.mdc-chip .mdc-ripple{border-radius:inherit}.mdc-chip .icon,.mdc-chip .label,.mdc-chip .touch{z-index:1}.mdc-chip .label{align-items:center;color:var(--_label-text-color);display:flex;font:var(--_label-text-type);height:100%;position:relative;text-overflow:ellipsis;-webkit-user-select:none;-moz-user-select:none;user-select:none;white-space:nowrap}.mdc-chip:hover .label{color:var(--_hover-label-text-color)}.mdc-chip:focus .label{color:var(--_focus-label-text-color)}.mdc-chip:active .label{color:var(--_pressed-label-text-color)}.mdc-chip .disabled .label{color:var(--_disabled-label-text-color);opacity:var(--_disabled-label-text-opacity)}.mdc-chip .icon{align-self:center;display:flex;position:relative}.mdc-chip .icon ::slotted(:first-child){font-size:var(--_icon-size);height:var(--_icon-size);width:var(--_icon-size)}.mdc-chip .leading.icon{color:var(--_leading-icon-color)}.mdc-chip:hover .leading.icon{color:var(--_hover-leading-icon-color)}.mdc-chip:focus .leading.icon{color:var(--_focus-leading-icon-color)}.mdc-chip:active .leading.icon{color:var(--_pressed-leading-icon-color)}.mdc-chip .disabled .leading.icon{color:var(--_disabled-leading-icon-color);opacity:var(--_disabled-leading-icon-opacity)}.mdc-assist-chip{--_container-height:var(--md-assist-chip-container-height,32px);--_container-shape:var(--md-assist-chip-container-shape,8px);--_disabled-label-text-color:var(\n    --md-assist-chip-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-assist-chip-disabled-label-text-opacity,0.38\n  );--_elevated-container-color:var(\n    --md-assist-chip-elevated-container-color,var(--md-sys-color-surface-container-low,#f7f2fa)\n  );--_elevated-container-elevation:var(\n    --md-assist-chip-elevated-container-elevation,1\n  );--_elevated-container-shadow-color:var(\n    --md-assist-chip-elevated-container-shadow-color,var(--md-sys-color-shadow,#000)\n  );--_elevated-disabled-container-color:var(\n    --md-assist-chip-elevated-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_elevated-disabled-container-elevation:var(\n    --md-assist-chip-elevated-disabled-container-elevation,0\n  );--_elevated-disabled-container-opacity:var(\n    --md-assist-chip-elevated-disabled-container-opacity,0.12\n  );--_elevated-focus-container-elevation:var(\n    --md-assist-chip-elevated-focus-container-elevation,1\n  );--_elevated-hover-container-elevation:var(\n    --md-assist-chip-elevated-hover-container-elevation,2\n  );--_elevated-pressed-container-elevation:var(\n    --md-assist-chip-elevated-pressed-container-elevation,1\n  );--_focus-label-text-color:var(\n    --md-assist-chip-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-state-layer-color:var(\n    --md-assist-chip-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-state-layer-opacity:var(\n    --md-assist-chip-focus-state-layer-opacity,0.12\n  );--_hover-label-text-color:var(\n    --md-assist-chip-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-color:var(\n    --md-assist-chip-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-assist-chip-hover-state-layer-opacity,0.08\n  );--_label-text-color:var(\n    --md-assist-chip-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_label-text-type:var(\n    --md-assist-chip-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_pressed-label-text-color:var(\n    --md-assist-chip-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_pressed-state-layer-color:var(\n    --md-assist-chip-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_pressed-state-layer-opacity:var(\n    --md-assist-chip-pressed-state-layer-opacity,0.12\n  );--_disabled-outline-color:var(\n    --md-assist-chip-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-assist-chip-disabled-outline-opacity,0.12\n  );--_focus-outline-color:var(\n    --md-assist-chip-focus-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_outline-color:var(\n    --md-assist-chip-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-assist-chip-outline-width,1px);--_disabled-leading-icon-color:var(\n    --md-assist-chip-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-icon-opacity:var(\n    --md-assist-chip-disabled-leading-icon-opacity,0.38\n  );--_focus-leading-icon-color:var(\n    --md-assist-chip-focus-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-leading-icon-color:var(\n    --md-assist-chip-hover-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_leading-icon-color:var(\n    --md-assist-chip-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_icon-size:var(--md-assist-chip-icon-size,18px);--_pressed-leading-icon-color:var(\n    --md-assist-chip-pressed-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_container-shape-start-start:var(\n    --md-assist-chip-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-assist-chip-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-assist-chip-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-assist-chip-container-shape-end-start,var(--_container-shape)\n  )}.mdc-filter-chip{--_container-height:var(--md-filter-chip-container-height,32px);--_container-shape:var(--md-filter-chip-container-shape,8px);--_disabled-label-text-color:var(\n    --md-filter-chip-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-filter-chip-disabled-label-text-opacity,0.38\n  );--_elevated-container-elevation:var(\n    --md-filter-chip-elevated-container-elevation,1\n  );--_elevated-container-shadow-color:var(\n    --md-filter-chip-elevated-container-shadow-color,var(--md-sys-color-shadow,#000)\n  );--_elevated-disabled-container-color:var(\n    --md-filter-chip-elevated-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_elevated-disabled-container-elevation:var(\n    --md-filter-chip-elevated-disabled-container-elevation,0\n  );--_elevated-disabled-container-opacity:var(\n    --md-filter-chip-elevated-disabled-container-opacity,0.12\n  );--_elevated-focus-container-elevation:var(\n    --md-filter-chip-elevated-focus-container-elevation,1\n  );--_elevated-hover-container-elevation:var(\n    --md-filter-chip-elevated-hover-container-elevation,2\n  );--_elevated-pressed-container-elevation:var(\n    --md-filter-chip-elevated-pressed-container-elevation,1\n  );--_elevated-selected-container-color:var(\n    --md-filter-chip-elevated-selected-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_label-text-type:var(\n    --md-filter-chip-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_selected-focus-label-text-color:var(\n    --md-filter-chip-selected-focus-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-state-layer-color:var(\n    --md-filter-chip-selected-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-state-layer-opacity:var(\n    --md-filter-chip-selected-focus-state-layer-opacity,0.12\n  );--_selected-hover-label-text-color:var(\n    --md-filter-chip-selected-hover-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-state-layer-color:var(\n    --md-filter-chip-selected-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-state-layer-opacity:var(\n    --md-filter-chip-selected-hover-state-layer-opacity,0.08\n  );--_selected-label-text-color:var(\n    --md-filter-chip-selected-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-label-text-color:var(\n    --md-filter-chip-selected-pressed-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-state-layer-color:var(\n    --md-filter-chip-selected-pressed-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_selected-pressed-state-layer-opacity:var(\n    --md-filter-chip-selected-pressed-state-layer-opacity,0.12\n  );--_elevated-container-color:var(\n    --md-filter-chip-elevated-container-color,var(--md-sys-color-surface-container-low,#f7f2fa)\n  );--_disabled-outline-color:var(\n    --md-filter-chip-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-filter-chip-disabled-outline-opacity,0.12\n  );--_disabled-selected-container-color:var(\n    --md-filter-chip-disabled-selected-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-selected-container-opacity:var(\n    --md-filter-chip-disabled-selected-container-opacity,0.12\n  );--_focus-outline-color:var(\n    --md-filter-chip-focus-outline-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_outline-color:var(\n    --md-filter-chip-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-filter-chip-outline-width,1px);--_selected-container-color:var(\n    --md-filter-chip-selected-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_selected-outline-width:var(--md-filter-chip-selected-outline-width,0px);--_focus-label-text-color:var(\n    --md-filter-chip-focus-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-state-layer-color:var(\n    --md-filter-chip-focus-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-state-layer-opacity:var(\n    --md-filter-chip-focus-state-layer-opacity,0.12\n  );--_hover-label-text-color:var(\n    --md-filter-chip-hover-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-color:var(\n    --md-filter-chip-hover-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-opacity:var(\n    --md-filter-chip-hover-state-layer-opacity,0.08\n  );--_label-text-color:var(\n    --md-filter-chip-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-label-text-color:var(\n    --md-filter-chip-pressed-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-state-layer-color:var(\n    --md-filter-chip-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_pressed-state-layer-opacity:var(\n    --md-filter-chip-pressed-state-layer-opacity,0.12\n  );--_icon-size:var(--md-filter-chip-icon-size,18px);--_disabled-leading-icon-color:var(\n    --md-filter-chip-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-icon-opacity:var(\n    --md-filter-chip-disabled-leading-icon-opacity,0.38\n  );--_selected-focus-leading-icon-color:var(\n    --md-filter-chip-selected-focus-leading-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-leading-icon-color:var(\n    --md-filter-chip-selected-hover-leading-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-leading-icon-color:var(\n    --md-filter-chip-selected-leading-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-leading-icon-color:var(\n    --md-filter-chip-selected-pressed-leading-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_focus-leading-icon-color:var(\n    --md-filter-chip-focus-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-leading-icon-color:var(\n    --md-filter-chip-hover-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_leading-icon-color:var(\n    --md-filter-chip-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-leading-icon-color:var(\n    --md-filter-chip-pressed-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_disabled-trailing-icon-color:var(\n    --md-filter-chip-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-trailing-icon-opacity:var(\n    --md-filter-chip-disabled-trailing-icon-opacity,0.38\n  );--_selected-focus-trailing-icon-color:var(\n    --md-filter-chip-selected-focus-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-trailing-icon-color:var(\n    --md-filter-chip-selected-hover-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-trailing-icon-color:var(\n    --md-filter-chip-selected-pressed-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-trailing-icon-color:var(\n    --md-filter-chip-selected-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_focus-trailing-icon-color:var(\n    --md-filter-chip-focus-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-trailing-icon-color:var(\n    --md-filter-chip-hover-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-trailing-icon-color:var(\n    --md-filter-chip-pressed-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_trailing-icon-color:var(\n    --md-filter-chip-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_container-shape-start-start:var(\n    --md-filter-chip-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-filter-chip-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-filter-chip-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-filter-chip-container-shape-end-start,var(--_container-shape)\n  )}.mdc-filter-chip .selected.elevated:before{background:var(--_elevated-selected-container-color)}.mdc-filter-chip .checkmark{height:var(--_icon-size);width:var(--_icon-size)}.mdc-filter-chip .disabled .checkmark{opacity:var(--_disabled-leading-icon-opacity)}.mdc-input-chip{--_container-height:var(--md-input-chip-container-height,32px);--_container-shape:var(--md-input-chip-container-shape,8px);--_disabled-label-text-color:var(\n    --md-input-chip-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-input-chip-disabled-label-text-opacity,0.38\n  );--_disabled-selected-container-color:var(\n    --md-input-chip-disabled-selected-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-selected-container-opacity:var(\n    --md-input-chip-disabled-selected-container-opacity,0.12\n  );--_label-text-type:var(\n    --md-input-chip-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_selected-container-color:var(\n    --md-input-chip-selected-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_selected-focus-label-text-color:var(\n    --md-input-chip-selected-focus-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-state-layer-color:var(\n    --md-input-chip-selected-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-state-layer-opacity:var(\n    --md-input-chip-selected-focus-state-layer-opacity,0.12\n  );--_selected-hover-label-text-color:var(\n    --md-input-chip-selected-hover-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-state-layer-color:var(\n    --md-input-chip-selected-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-state-layer-opacity:var(\n    --md-input-chip-selected-hover-state-layer-opacity,0.08\n  );--_selected-label-text-color:var(\n    --md-input-chip-selected-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-outline-width:var(--md-input-chip-selected-outline-width,0px);--_selected-pressed-label-text-color:var(\n    --md-input-chip-selected-pressed-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-state-layer-color:var(\n    --md-input-chip-selected-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-state-layer-opacity:var(\n    --md-input-chip-selected-pressed-state-layer-opacity,0.12\n  );--_disabled-outline-color:var(\n    --md-input-chip-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-input-chip-disabled-outline-opacity,0.12\n  );--_focus-label-text-color:var(\n    --md-input-chip-focus-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-outline-color:var(\n    --md-input-chip-focus-outline-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-state-layer-color:var(\n    --md-input-chip-focus-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-state-layer-opacity:var(\n    --md-input-chip-focus-state-layer-opacity,0.12\n  );--_hover-label-text-color:var(\n    --md-input-chip-hover-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-color:var(\n    --md-input-chip-hover-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-opacity:var(\n    --md-input-chip-hover-state-layer-opacity,0.08\n  );--_label-text-color:var(\n    --md-input-chip-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_outline-color:var(\n    --md-input-chip-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-input-chip-outline-width,1px);--_pressed-label-text-color:var(\n    --md-input-chip-pressed-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-state-layer-color:var(\n    --md-input-chip-pressed-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-state-layer-opacity:var(\n    --md-input-chip-pressed-state-layer-opacity,0.12\n  );--_avatar-shape:var(--md-input-chip-avatar-shape,9999px);--_avatar-size:var(--md-input-chip-avatar-size,24px);--_disabled-avatar-opacity:var(\n    --md-input-chip-disabled-avatar-opacity,0.38\n  );--_disabled-leading-icon-color:var(\n    --md-input-chip-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-icon-opacity:var(\n    --md-input-chip-disabled-leading-icon-opacity,0.38\n  );--_icon-size:var(--md-input-chip-icon-size,18px);--_selected-focus-leading-icon-color:var(\n    --md-input-chip-selected-focus-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-hover-leading-icon-color:var(\n    --md-input-chip-selected-hover-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-leading-icon-color:var(\n    --md-input-chip-selected-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-pressed-leading-icon-color:var(\n    --md-input-chip-selected-pressed-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-leading-icon-color:var(\n    --md-input-chip-focus-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-leading-icon-color:var(\n    --md-input-chip-hover-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_leading-icon-color:var(\n    --md-input-chip-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-leading-icon-color:var(\n    --md-input-chip-pressed-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_disabled-trailing-icon-color:var(\n    --md-input-chip-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-trailing-icon-opacity:var(\n    --md-input-chip-disabled-trailing-icon-opacity,0.38\n  );--_selected-focus-trailing-icon-color:var(\n    --md-input-chip-selected-focus-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-trailing-icon-color:var(\n    --md-input-chip-selected-hover-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-trailing-icon-color:var(\n    --md-input-chip-selected-pressed-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-trailing-icon-color:var(\n    --md-input-chip-selected-trailing-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_focus-trailing-icon-color:var(\n    --md-input-chip-focus-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-trailing-icon-color:var(\n    --md-input-chip-hover-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-trailing-icon-color:var(\n    --md-input-chip-pressed-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_trailing-icon-color:var(\n    --md-input-chip-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_container-shape-start-start:var(\n    --md-input-chip-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-input-chip-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-input-chip-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-input-chip-container-shape-end-start,var(--_container-shape)\n  )}.mdc-input-chip .avatar .primary.action{-webkit-padding-start:4px;padding-inline-start:4px}.mdc-input-chip .avatar .leading.icon ::slotted(:first-child){border-radius:var(--_avatar-shape);height:var(--_avatar-size);width:var(--_avatar-size)}.mdc-input-chip .disabled.avatar .leading.icon{opacity:var(--_disabled-avatar-opacity)}.mdc-suggestion-chip{--_container-height:var(--md-suggestion-chip-container-height,32px);--_container-shape:var(--md-suggestion-chip-container-shape,8px);--_disabled-label-text-color:var(\n    --md-suggestion-chip-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-suggestion-chip-disabled-label-text-opacity,0.38\n  );--_elevated-container-color:var(\n    --md-suggestion-chip-elevated-container-color,var(--md-sys-color-surface-container-low,#f7f2fa)\n  );--_elevated-container-elevation:var(\n    --md-suggestion-chip-elevated-container-elevation,1\n  );--_elevated-container-shadow-color:var(\n    --md-suggestion-chip-elevated-container-shadow-color,var(--md-sys-color-shadow,#000)\n  );--_elevated-disabled-container-color:var(\n    --md-suggestion-chip-elevated-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_elevated-disabled-container-elevation:var(\n    --md-suggestion-chip-elevated-disabled-container-elevation,0\n  );--_elevated-disabled-container-opacity:var(\n    --md-suggestion-chip-elevated-disabled-container-opacity,0.12\n  );--_elevated-focus-container-elevation:var(\n    --md-suggestion-chip-elevated-focus-container-elevation,1\n  );--_elevated-hover-container-elevation:var(\n    --md-suggestion-chip-elevated-hover-container-elevation,2\n  );--_elevated-pressed-container-elevation:var(\n    --md-suggestion-chip-elevated-pressed-container-elevation,1\n  );--_focus-label-text-color:var(\n    --md-suggestion-chip-focus-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-state-layer-color:var(\n    --md-suggestion-chip-focus-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-state-layer-opacity:var(\n    --md-suggestion-chip-focus-state-layer-opacity,0.12\n  );--_hover-label-text-color:var(\n    --md-suggestion-chip-hover-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-color:var(\n    --md-suggestion-chip-hover-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-opacity:var(\n    --md-suggestion-chip-hover-state-layer-opacity,0.08\n  );--_label-text-color:var(\n    --md-suggestion-chip-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-type:var(\n    --md-suggestion-chip-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_pressed-label-text-color:var(\n    --md-suggestion-chip-pressed-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-state-layer-color:var(\n    --md-suggestion-chip-pressed-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-state-layer-opacity:var(\n    --md-suggestion-chip-pressed-state-layer-opacity,0.12\n  );--_disabled-outline-color:var(\n    --md-suggestion-chip-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-suggestion-chip-disabled-outline-opacity,0.12\n  );--_focus-outline-color:var(\n    --md-suggestion-chip-focus-outline-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_outline-color:var(\n    --md-suggestion-chip-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-suggestion-chip-outline-width,1px);--_disabled-leading-icon-color:var(\n    --md-suggestion-chip-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-icon-opacity:var(\n    --md-suggestion-chip-disabled-leading-icon-opacity,0.38\n  );--_focus-leading-icon-color:var(\n    --md-suggestion-chip-focus-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-leading-icon-color:var(\n    --md-suggestion-chip-hover-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_leading-icon-color:var(\n    --md-suggestion-chip-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-leading-icon-color:var(\n    --md-suggestion-chip-pressed-leading-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_icon-size:var(--md-suggestion-chip-icon-size,18px);--_container-shape-start-start:var(\n    --md-suggestion-chip-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-suggestion-chip-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-suggestion-chip-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-suggestion-chip-container-shape-end-start,var(--_container-shape)\n  )}";
styleInject(css_248z$p);

var Chip = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var disabled = _ref.disabled,
    className = _ref.className,
    href = _ref.href,
    target = _ref.target,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'assist' : _ref$type,
    children = _ref.children;
  var slots = useSlot(children);
  var $el = ref || React.useRef(null);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var classNames = classnames(CSS_CLASSES$h.ROOT, className, (_classnames = {}, _defineProperty(_classnames, 'mdc-filter-chip', type === 'filter'), _defineProperty(_classnames, 'mdc-assist-chip', type === 'assist'), _defineProperty(_classnames, 'mdc-input-chip', type === 'input'), _defineProperty(_classnames, 'mdc-suggestion-chip', type === 'suggestion'), _classnames));
  var elevated = true;
  var container = React.useMemo(function () {
    var _classnames2;
    return classnames(CSS_CLASSES$h.CONTAINER, (_classnames2 = {}, _defineProperty(_classnames2, CSS_CLASSES$h.DISABLED, disabled), _defineProperty(_classnames2, CSS_CLASSES$h.ELEVATED, elevated), _defineProperty(_classnames2, CSS_CLASSES$h.SELECTED, selected), _classnames2));
  }, [selected]);
  var events = type === 'filter' ? {
    onClick: function onClick() {
      setSelected(function (v) {
        return !v;
      });
    }
  } : {};
  var content = jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, {
    children: [jsxRuntime.exports.jsx(Elevation, {}) , jsxRuntime.exports.jsx(Ripple, {
      parent: $el
    }), jsxRuntime.exports.jsx(Focus, {
      parent: $el
    }), jsxRuntime.exports.jsx("span", {
      className: "icon leading",
      children: type === 'filter' && selected ? jsxRuntime.exports.jsx(Icon, {
        className: "checkmark",
        children: "done"
      }) : slots['leadingicon']
    }), jsxRuntime.exports.jsx("span", {
      className: "label",
      children: slots['children']
    }), jsxRuntime.exports.jsx("span", {
      className: "icon trailing",
      children: type === 'input' ? jsxRuntime.exports.jsx(Icon, {
        className: "closemark",
        children: "close"
      }) : slots['trailingicon']
    })]
  });
  return jsxRuntime.exports.jsx("div", _objectSpread2(_objectSpread2({
    className: classNames,
    ref: $el
  }, events), {}, {
    children: href ? jsxRuntime.exports.jsx("a", {
      className: container,
      href: href,
      target: target,
      children: content
    }) : jsxRuntime.exports.jsx("button", {
      className: container,
      children: content
    })
  }));
});

var CSS_CLASSES$g = {
  ROOT: 'mdc-divider',
  INSET: 'inset',
  INSETSTART: 'insetStart',
  INSETEND: 'insetEnd'
};

var css_248z$o = ".mdc-divider{--_color:var(\n    --md-divider-color,var(--md-sys-color-outline-variant,#cac4d0)\n  );--_thickness:var(--md-divider-thickness,1px);box-sizing:border-box;color:var(--_color);display:flex;height:var(--_thickness);width:100%}.mdc-divider.inset,.mdc-divider.insetStart{-webkit-padding-start:16px;padding-inline-start:16px}.mdc-divider.inset,.mdc-divider.insetEnd{-webkit-padding-end:16px;padding-inline-end:16px}.mdc-divider:before{background:currentColor;content:\"\";height:100%;width:100%}@media (forced-colors:active){.mdc-divider:before{background:CanvasText}}";
styleInject(css_248z$o);

var Divider = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var inset = _ref.inset,
    insetStart = _ref.insetStart,
    insetEnd = _ref.insetEnd,
    className = _ref.className;
  var classNames = classnames('mdc-divider', className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$g.INSET, inset), _defineProperty(_classnames, CSS_CLASSES$g.INSETEND, insetEnd), _defineProperty(_classnames, CSS_CLASSES$g.INSETSTART, insetStart), _classnames));
  return jsxRuntime.exports.jsx("hr", {
    className: classNames,
    ref: ref
  });
});

var CSS_CLASSES$f = {
  ROOT: 'mdc-list',
  INSET: 'inset',
  INSETSTART: 'insetStart',
  INSETEND: 'insetEnd'
};

var css_248z$n = ".mdc-list{--_container-color:var(\n    --md-list-container-color,var(--md-sys-color-surface,#fef7ff)\n  );background-color:var(--_container-color);border-radius:inherit;color:unset;display:block;list-style-type:none;margin:0;min-width:300px;min-width:inherit;outline:none;padding:8px 0;position:relative}@media (forced-colors:active){.mdc-list-item{--md-list-item-list-item-disabled-label-text-opacity:1;--md-list-item-list-item-disabled-leading-icon-opacity:1;--md-list-item-list-item-disabled-trailing-icon-opacity:1}}.mdc-list-item{--_list-item-container-color:var(\n    --md-list-item-list-item-container-color,var(--md-sys-color-surface,#fef7ff)\n  );--_list-item-container-shape:var(\n    --md-list-item-list-item-container-shape,0px\n  );--_list-item-disabled-label-text-color:var(\n    --md-list-item-list-item-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-disabled-label-text-opacity:var(\n    --md-list-item-list-item-disabled-label-text-opacity,0.3\n  );--_list-item-disabled-leading-icon-color:var(\n    --md-list-item-list-item-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-disabled-leading-icon-opacity:var(\n    --md-list-item-list-item-disabled-leading-icon-opacity,0.38\n  );--_list-item-disabled-trailing-icon-color:var(\n    --md-list-item-list-item-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-disabled-trailing-icon-opacity:var(\n    --md-list-item-list-item-disabled-trailing-icon-opacity,0.38\n  );--_list-item-focus-label-text-color:var(\n    --md-list-item-list-item-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-focus-leading-icon-icon-color:var(\n    --md-list-item-list-item-focus-leading-icon-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-focus-state-layer-color:var(\n    --md-list-item-list-item-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-focus-state-layer-opacity:var(\n    --md-list-item-list-item-focus-state-layer-opacity,0.12\n  );--_list-item-focus-trailing-icon-icon-color:var(\n    --md-list-item-list-item-focus-trailing-icon-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-hover-label-text-color:var(\n    --md-list-item-list-item-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-hover-leading-icon-icon-color:var(\n    --md-list-item-list-item-hover-leading-icon-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-hover-state-layer-color:var(\n    --md-list-item-list-item-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-hover-state-layer-opacity:var(\n    --md-list-item-list-item-hover-state-layer-opacity,0.08\n  );--_list-item-hover-trailing-icon-icon-color:var(\n    --md-list-item-list-item-hover-trailing-icon-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-label-text-color:var(\n    --md-list-item-list-item-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-label-text-line-height:var(\n    --md-list-item-list-item-label-text-line-height,1.5rem\n  );--_list-item-label-text-type:var(\n    --md-list-item-list-item-label-text-type,var(\n      --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_list-item-large-leading-video-height:var(\n    --md-list-item-list-item-large-leading-video-height,69px\n  );--_list-item-leading-avatar-label-color:var(\n    --md-list-item-list-item-leading-avatar-label-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_list-item-leading-avatar-label-type:var(\n    --md-list-item-list-item-leading-avatar-label-type,var(\n      --md-sys-typescale-title-medium,500 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_list-item-leading-avatar-color:var(\n    --md-list-item-list-item-leading-avatar-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_list-item-leading-avatar-shape:var(\n    --md-list-item-list-item-leading-avatar-shape,9999px\n  );--_list-item-leading-avatar-size:var(\n    --md-list-item-list-item-leading-avatar-size,40px\n  );--_list-item-leading-icon-color:var(\n    --md-list-item-list-item-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-leading-icon-size:var(\n    --md-list-item-list-item-leading-icon-size,18px\n  );--_list-item-leading-image-height:var(\n    --md-list-item-list-item-leading-image-height,56px\n  );--_list-item-leading-image-shape:var(\n    --md-list-item-list-item-leading-image-shape,0px\n  );--_list-item-leading-image-width:var(\n    --md-list-item-list-item-leading-image-width,56px\n  );--_list-item-leading-video-shape:var(\n    --md-list-item-list-item-leading-video-shape,0px\n  );--_list-item-leading-video-width:var(\n    --md-list-item-list-item-leading-video-width,100px\n  );--_list-item-one-line-container-height:var(\n    --md-list-item-list-item-one-line-container-height,56px\n  );--_list-item-pressed-label-text-color:var(\n    --md-list-item-list-item-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-pressed-leading-icon-icon-color:var(\n    --md-list-item-list-item-pressed-leading-icon-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-pressed-state-layer-color:var(\n    --md-list-item-list-item-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_list-item-pressed-state-layer-opacity:var(\n    --md-list-item-list-item-pressed-state-layer-opacity,0.12\n  );--_list-item-pressed-trailing-icon-icon-color:var(\n    --md-list-item-list-item-pressed-trailing-icon-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-small-leading-video-height:var(\n    --md-list-item-list-item-small-leading-video-height,56px\n  );--_list-item-supporting-text-color:var(\n    --md-list-item-list-item-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-supporting-text-type:var(\n    --md-list-item-list-item-supporting-text-type,var(\n      --md-sys-typescale-body-medium,400 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_list-item-three-line-container-height:var(\n    --md-list-item-list-item-three-line-container-height,88px\n  );--_list-item-trailing-icon-color:var(\n    --md-list-item-list-item-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-trailing-icon-size:var(\n    --md-list-item-list-item-trailing-icon-size,24px\n  );--_list-item-trailing-supporting-text-color:var(\n    --md-list-item-list-item-trailing-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_list-item-trailing-supporting-text-line-height:var(\n    --md-list-item-list-item-trailing-supporting-text-line-height,1rem\n  );--_list-item-trailing-supporting-text-type:var(\n    --md-list-item-list-item-trailing-supporting-text-type,var(\n      --md-sys-typescale-label-small,500 0.688rem/1rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_list-item-two-line-container-height:var(\n    --md-list-item-list-item-two-line-container-height,72px\n  );--_list-item-leading-element-leading-space:var(\n    --md-list-item-list-item-leading-element-leading-space,16px\n  );--_list-item-leading-space:var(--md-list-item-list-item-leading-space,16px);--_list-item-leading-video-leading-space:var(\n    --md-list-item-list-item-leading-video-leading-space,0px\n  );--_list-item-trailing-element-headline-trailing-element-space:var(\n    --md-list-item-list-item-trailing-element-headline-trailing-element-space,16px\n  );--_list-item-trailing-space:var(\n    --md-list-item-list-item-trailing-space,16px\n  );--md-focus-ring-offset:-3px;--md-focus-ring-shape:4px;--md-ripple-hover-color:var(--_list-item-hover-state-layer-color);--md-ripple-hover-opacity:var(--_list-item-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_list-item-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_list-item-pressed-state-layer-opacity);--md-ripple-focus-color:var(--_list-item-focus-state-layer-color);--md-ripple-focus-opacity:var(--_list-item-focus-state-layer-opacity);color:unset}.mdc-list-item .list-item{align-items:center;background-color:var(--_list-item-container-color);border-radius:var(--_list-item-container-shape);box-sizing:border-box;display:flex;outline:none;position:relative;text-decoration:none;width:100%}.mdc-list-item .list-item:not(.disabled){cursor:pointer}.mdc-list-item .list-item.disabled{pointer-events:none}.mdc-list-item .content-wrapper{display:flex;position:relative;width:100%}.mdc-list-item .content-wrapper,.mdc-list-item .mdc-ripple{border-radius:inherit}.mdc-list-item .with-one-line{min-height:var(--_list-item-one-line-container-height)}.mdc-list-item .with-two-line{min-height:var(--_list-item-two-line-container-height)}.mdc-list-item .with-three-line{min-height:var(--_list-item-three-line-container-height)}.mdc-list-item .start{align-items:center;display:inline-flex;flex:0 0 auto;flex-direction:column;justify-content:center;z-index:1}.mdc-list-item .start .avatar,.mdc-list-item .start .mdc-icon,.mdc-list-item .start img{-webkit-margin-start:var(--_list-item-leading-element-leading-space);margin-inline-start:var(--_list-item-leading-element-leading-space)}.mdc-list-item .with-three-line .start{justify-content:start}.mdc-list-item .body{-webkit-padding-start:var(--_list-item-leading-space);-webkit-padding-end:var(--_list-item-trailing-space);box-sizing:border-box;flex:1 0 0;flex-direction:column;padding-inline-end:var(--_list-item-trailing-space);padding-inline-start:var(--_list-item-leading-space)}.mdc-list-item .body,.mdc-list-item .end{display:inline-flex;justify-content:center;z-index:1}.mdc-list-item .end{flex:0 0 auto;flex-direction:column}.mdc-list-item .with-three-line .end{justify-content:start}.mdc-list-item .end>*,.mdc-list-item .trailing-supporting-text{-webkit-margin-end:var(--_list-item-trailing-element-headline-trailing-element-space);margin-inline-end:var(--_list-item-trailing-element-headline-trailing-element-space)}.mdc-list-item .label-text{color:var(--_list-item-label-text-color);display:flex;font:var(--_list-item-label-text-type)}.mdc-list-item:hover{cursor:pointer}.mdc-list-item:hover .label-text{color:var(--_list-item-hover-label-text-color)}.mdc-list-item:focus .label-text{color:var(--_list-item-focus-label-text-color)}.mdc-list-item:active .label-text{color:var(--_list-item-pressed-label-text-color)}.mdc-list-item .disabled .label-text{color:var(--_list-item-disabled-label-text-color);opacity:var(--_list-item-disabled-label-text-opacity)}.mdc-list-item .supporting-text{-webkit-box-orient:vertical;-webkit-line-clamp:1;color:var(--_list-item-supporting-text-color);display:-webkit-box;font:var(--_list-item-supporting-text-type);overflow:hidden;text-overflow:ellipsis;white-space:normal;width:100%}.mdc-list-item .disabled .supporting-text{color:var(--_list-item-disabled-label-text-color);opacity:var(--_list-item-disabled-label-text-opacity)}.mdc-list-item .supporting-text--multi-line{-webkit-line-clamp:2}.mdc-list-item .trailing-supporting-text{-webkit-padding-start:16px;font:var(--_list-item-trailing-supporting-text-type);padding-inline-start:16px}.mdc-list-item .list-item:not(.disabled) .trailing-supporting-text{color:var(--_list-item-trailing-supporting-text-color)}.mdc-list-item .disabled .trailing-supporting-text{color:var(--_list-item-disabled-label-text-color);opacity:var(--_list-item-disabled-label-text-opacity)}.mdc-list-item .with-three-line .trailing-supporting-text{-webkit-padding-before:calc((var(--_list-item-label-text-line-height) - var(--_list-item-trailing-supporting-text-line-height))/2);padding-block-start:calc((var(--_list-item-label-text-line-height) - var(--_list-item-trailing-supporting-text-line-height))/2)}.mdc-list-item .focus-ring{z-index:1}.mdc-list-item img{border-radius:var(--_list-item-leading-image-shape);display:inline-flex;height:var(--_list-item-leading-image-height);padding-block:calc((var(--_list-item-two-line-container-height) - var(--_list-item-leading-image-height))/2);width:var(--_list-item-leading-image-width)}.mdc-list-item .with-three-line img{padding-block:0}.mdc-list-item .start .mdc-icon{--md-icon-color:var(--_list-item-leading-icon-color);--md-icon-size:var(--_list-item-leading-icon-size)}.mdc-list-item .with-three-line .start .mdc-icon{-webkit-padding-before:calc((var(--_list-item-label-text-line-height) - var(--_list-item-leading-icon-size))/2);padding-block-start:calc((var(--_list-item-label-text-line-height) - var(--_list-item-leading-icon-size))/2)}.mdc-list-item .end .mdc-icon{--md-icon-color:var(--_list-item-trailing-icon-color);--md-icon-size:var(--_list-item-trailing-icon-size)}.mdc-list-item .with-three-line .end .mdc-icon{-webkit-padding-before:calc((var(--_list-item-label-text-line-height) - var(--_list-item-trailing-icon-size))/2);padding-block-start:calc((var(--_list-item-label-text-line-height) - var(--_list-item-trailing-icon-size))/2)}.mdc-list-item:hover .start .mdc-icon{--md-icon-color:var(--_list-item-hover-leading-icon-icon-color)}.mdc-list-item:hover .end .mdc-icon{--md-icon-color:var(--_list-item-hover-trailing-icon-icon-color)}.mdc-list-item:focus .start .mdc-icon{--md-icon-color:var(--_list-item-focus-leading-icon-icon-color)}.mdc-list-item:focus .end .mdc-icon{--md-icon-color:var(--_list-item-focus-trailing-icon-icon-color)}.mdc-list-item:active .start .mdc-icon{--md-icon-color:var(--_list-item-pressed-leading-icon-icon-color)}.mdc-list-item:active .end .mdc-icon{--md-icon-color:var(--_list-item-pressed-trailing-icon-icon-color)}.mdc-list-item .disabled .start .mdc-icon{--md-icon-color:var(--_list-item-disabled-leading-icon-color);opacity:var(--_list-item-disabled-leading-icon-opacity)}.mdc-list-item .disabled .end .mdc-icon{--md-icon-color:var(--_list-item-disabled-trailing-icon-color);opacity:var(--_list-item-disabled-trailing-icon-opacity)}.mdc-list-item .avatar{align-items:center;background-color:var(--_list-item-leading-avatar-color);border-radius:var(--_list-item-leading-avatar-shape);color:var(--_list-item-leading-avatar-label-color);display:inline-flex;font:var(--_list-item-leading-avatar-label-type);height:var(--_list-item-leading-avatar-size);justify-content:center;width:var(--_list-item-leading-avatar-size)}.mdc-list-item .video,.mdc-list-item .video-large{-webkit-margin-start:var(--_list-item-leading-video-leading-space);border-radius:var(--_list-item-leading-video-shape);display:inline-flex;height:var(--_list-item-small-leading-video-height);margin-inline-start:var(--_list-item-leading-video-leading-space);-o-object-fit:cover;object-fit:cover;padding-block:calc((var(--_list-item-three-line-container-height) - var(--_list-item-small-leading-video-height))/2);width:var(--_list-item-leading-video-width)}.mdc-list-item .with-three-line .video,.mdc-list-item .with-three-line .video-large{padding-block:0}.mdc-list-item .video-large{height:var(--_list-item-large-leading-video-height);padding-block:calc((var(--_list-item-three-line-container-height) - var(--_list-item-large-leading-video-height))/2)}";
styleInject(css_248z$n);

var _excluded$7 = ["disabled", "className", "children"];
var Item$1 = function Item(_ref) {
  var disabled = _ref.disabled,
    className = _ref.className,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded$7);
  var slots = useSlot(children);
  var li = React.useRef(null);
  var supportingTextClasses = classnames('supporting-text', _defineProperty({}, 'supporting-text--multi-line', slots['multiLineSupportingText']));
  var classNames = React.useMemo(function () {
    var _classnames2;
    return classnames('mdc-list-item list-item', className, (_classnames2 = {}, _defineProperty(_classnames2, 'with-one-line', !slots['supportingText']), _defineProperty(_classnames2, 'with-two-line', slots['supportingText'] && !slots['multiLineSupportingText']), _defineProperty(_classnames2, 'with-three-line', slots['supportingText'] && slots['multiLineSupportingText']), _defineProperty(_classnames2, 'disabled', disabled), _classnames2));
  }, [slots]);
  return jsxRuntime.exports.jsx("li", _objectSpread2(_objectSpread2({
    ref: li,
    className: classNames
  }, props), {}, {
    children: jsxRuntime.exports.jsxs("div", {
      className: "content-wrapper",
      children: [jsxRuntime.exports.jsx("div", {
        className: "start",
        children: slots.start
      }), jsxRuntime.exports.jsxs("div", {
        className: "body",
        children: [jsxRuntime.exports.jsx("span", {
          className: "label-text",
          children: children
        }), slots['supportingText'] ? jsxRuntime.exports.jsx("span", {
          className: supportingTextClasses,
          children: slots['supportingText']
        }) : null]
      }), jsxRuntime.exports.jsx("div", {
        className: "end",
        children: slots['trailingSupportingText'] ? jsxRuntime.exports.jsx("span", {
          className: "trailing-supporting-text",
          children: slots['trailingSupportingText']
        }) : slots['end']
      }), jsxRuntime.exports.jsx(Ripple, {
        parent: li
      }), jsxRuntime.exports.jsx(Focus, {
        className: "focus-ring",
        parent: li
      })]
    })
  }));
};

var List = function List(_ref) {
  var className = _ref.className,
    children = _ref.children;
  var classNames = classnames(CSS_CLASSES$f.ROOT, className, {});
  return jsxRuntime.exports.jsx("ul", {
    className: classNames,
    children: children
  });
};
List.Item = Item$1;

var $export$3 = _export;
var fails$1 = _fails;
var defined$1 = _defined;
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined$1(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
var _stringHtml = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export$3($export$3.P + $export$3.F * fails$1(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

// B.2.3.6 String.prototype.fixed()
_stringHtml('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

var CSS_CLASSES$e = {
  ROOT: 'mdc-menu'
};

var MenuContext = /*#__PURE__*/React.createContext({});

var Item = function Item(_ref) {
  var _children = _ref.children,
    value = _ref.value,
    onClick = _ref.onClick;
  return jsxRuntime.exports.jsx(MenuContext.Consumer, {
    children: function children(_ref2) {
      var setOpen = _ref2.setOpen,
        onChange = _ref2.onChange;
      function doClick(e) {
        if (onClick) {
          onClick(e);
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(value || _children);
        }
        setOpen(false);
      }
      return jsxRuntime.exports.jsx(List.Item, {
        onClick: doClick,
        children: _children
      });
    }
  });
};

// helper for String#{startsWith, endsWith, includes}
var isRegExp = _isRegexp;
var defined = _defined;
var _stringContext = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

var _failsIsRegexp;
var hasRequired_failsIsRegexp;

function require_failsIsRegexp () {
	if (hasRequired_failsIsRegexp) return _failsIsRegexp;
	hasRequired_failsIsRegexp = 1;
	var MATCH = _wks.exports('match');
	_failsIsRegexp = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) {/* empty */}
	  }
	  return true;
	};
	return _failsIsRegexp;
}

var $export$2 = _export;
var context = _stringContext;
var INCLUDES = 'includes';
$export$2($export$2.P + $export$2.F * require_failsIsRegexp()(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://github.com/tc39/Array.prototype.includes
var $export$1 = _export;
var $includes = _arrayIncludes(true);
$export$1($export$1.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_addToUnscopables('includes');

var _excluded$6 = ["multiple"];
function useMenu(_ref) {
  var _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    params = _objectWithoutProperties(_ref, _excluded$6);
  var _useState = React.useState(params.value || []),
    _useState2 = _slicedToArray(_useState, 2),
    value = _useState2[0],
    setValue = _useState2[1];
  function doSelect(v) {
    if (!(value !== null && value !== void 0 && value.includes(v))) {
      if (multiple) {
        setValue(function (result) {
          return result.concat([v]);
        });
      } else {
        setValue([v]);
      }
    }
  }
  React.useEffect(function () {
    if (params.value) {
      setValue(params.value);
    }
  }, [params.value]);
  return {
    value: value,
    doSelect: doSelect
  };
}

var css_248z$m = "@media (forced-colors:active){.menu{border:1px solid CanvasText}}.mdc-menu{--_container-color:var(\n    --md-menu-container-color,var(--md-sys-color-surface-container,#f3edf7)\n  );--_container-elevation:var(--md-menu-container-elevation,2);--_container-shadow-color:var(\n    --md-menu-container-shadow-color,var(--md-sys-color-shadow,#000)\n  );--_container-shape:var(--md-menu-container-shape,4px);--md-list-container-color:var(--_container-color);--md-elevation-level:var(--_container-elevation);--md-elevation-shadow-color:var(--_container-shadow-color);--md-focus-ring-shape:var(--_container-shape)}.mdc-menu .menu{border-radius:var(--_container-shape);display:none;height:inherit;max-height:inherit;min-width:300px;opacity:0;position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:20}.mdc-menu .menu.open{display:block;opacity:1}.mdc-menu .menu.fixed{position:fixed}.mdc-menu .menu .mdc-list{border-radius:inherit;display:block;height:inherit;max-height:inherit;min-width:inherit;overflow:auto}.mdc-menu .menu.has-overflow .mdc-list{overflow:visible}.mdc-menu .menu.animating md-list{overflow:hidden;pointer-events:none}.mdc-menu .menu.animating ::slotted(.hidden){opacity:0}.mdc-menu .menu slot{display:block;height:inherit;max-height:inherit}@media (forced-colors:active){.list-item{position:relative}.selected .list-item:not(:has(.focus-ring[visible])):before{border:3px double CanvasText;border-radius:inherit;box-sizing:border-box;content:\"\";inset:0;pointer-events:none;position:absolute}}.mdc-menu-item{--_list-item-selected-container-color:var(\n    --md-menu-item-list-item-selected-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_list-item-container-color:var(\n    --md-menu-item-list-item-container-color,var(--md-sys-color-surface-container,#f3edf7)\n  );--md-list-item-list-item-container-color:var(--_list-item-container-color)}.mdc-menu-item .selected .list-item{background-color:var(--_list-item-selected-container-color)}.mdc-menu-item .list-item:has(.submenu:hover){--md-ripple-hover-opacity:0}";
styleInject(css_248z$m);

var _excluded$5 = ["hasOverflow", "fixed", "className", "onChange", "children", "multiple"];
var Menu = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var hasOverflow = _ref.hasOverflow,
    fixed = _ref.fixed,
    className = _ref.className,
    onChange = _ref.onChange,
    children = _ref.children,
    multiple = _ref.multiple,
    props = _objectWithoutProperties(_ref, _excluded$5);
  var parent = React.useRef(null);
  var _useMenu = useMenu({
      multiple: multiple,
      value: props.value
    }),
    value = _useMenu.value,
    doSelect = _useMenu.doSelect;
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var classNames = classnames(CSS_CLASSES$e.ROOT, className);
  var menu = React.useMemo(function () {
    var _classnames;
    return classnames('menu', (_classnames = {}, _defineProperty(_classnames, 'open', open), _defineProperty(_classnames, 'fixed', fixed), _defineProperty(_classnames, 'has-overflow', hasOverflow), _classnames));
  }, [open]);
  React.useImperativeHandle(ref, function () {
    return {
      open: function open() {
        setOpen(true);
      },
      close: function close() {
        setOpen(false);
      }
    };
  }, []);
  function doChangeItem(v) {
    doSelect(v);
    onChange === null || onChange === void 0 ? void 0 : onChange(v);
  }
  return jsxRuntime.exports.jsx(MenuContext.Provider, {
    value: {
      open: open,
      setOpen: setOpen,
      onChange: doChangeItem,
      value: value
    },
    children: jsxRuntime.exports.jsx("div", {
      className: classNames,
      children: jsxRuntime.exports.jsxs("div", {
        className: menu,
        children: [jsxRuntime.exports.jsx(Elevation, {}), jsxRuntime.exports.jsx(List, {
          children: children
        }), jsxRuntime.exports.jsx(Focus, {
          parent: parent
        })]
      })
    })
  });
});
Menu.Item = Item;

var CSS_CLASSES$d = {
  ROOT: 'mdc-select'
};

var css_248z$l = ".mdc-select{color:unset}.mdc-select .field{cursor:pointer;outline:none}.mdc-select .select{position:relative}.mdc-select .field,.mdc-select .select{width:100%}.mdc-select .no-label .label{display:flex}.mdc-select{display:inline-flex}.mdc-select .label{width:100%}.mdc-select .content{height:24px;line-height:24px}.mdc-select[disabled]{pointer-events:none}@media (forced-colors:active){.mdc-filled-select{--md-filled-select-text-field-disabled-active-indicator-color:GrayText;--md-filled-select-text-field-disabled-active-indicator-opacity:1;--md-filled-select-text-field-disabled-input-text-color:GrayText;--md-filled-select-text-field-disabled-input-text-opacity:1;--md-filled-select-text-field-disabled-label-text-color:GrayText;--md-filled-select-text-field-disabled-label-text-opacity:1;--md-filled-select-text-field-disabled-leading-icon-color:GrayText;--md-filled-select-text-field-disabled-leading-icon-opacity:1;--md-filled-select-text-field-disabled-supporting-text-color:GrayText;--md-filled-select-text-field-disabled-supporting-text-opacity:1;--md-filled-select-text-field-disabled-trailing-icon-color:GrayText;--md-filled-select-text-field-disabled-trailing-icon-opacity:1}}.mdc-filled-select{--_text-field-active-indicator-color:var(\n    --md-filled-select-text-field-active-indicator-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-active-indicator-height:var(\n    --md-filled-select-text-field-active-indicator-height,1px\n  );--_text-field-container-color:var(\n    --md-filled-select-text-field-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_text-field-container-shape-start-start:var(\n    --md-filled-select-text-field-container-shape-start-start,var(--md-filled-select-text-field-container-shape,4px)\n  );--_text-field-container-shape-start-end:var(\n    --md-filled-select-text-field-container-shape-start-end,var(--md-filled-select-text-field-container-shape,4px)\n  );--_text-field-container-shape-end-end:var(\n    --md-filled-select-text-field-container-shape-end-end,var(--md-filled-select-text-field-container-shape,0px)\n  );--_text-field-container-shape-end-start:var(\n    --md-filled-select-text-field-container-shape-end-start,var(--md-filled-select-text-field-container-shape,0px)\n  );--_text-field-disabled-active-indicator-color:var(\n    --md-filled-select-text-field-disabled-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-active-indicator-height:var(\n    --md-filled-select-text-field-disabled-active-indicator-height,1px\n  );--_text-field-disabled-active-indicator-opacity:var(\n    --md-filled-select-text-field-disabled-active-indicator-opacity,0.38\n  );--_text-field-disabled-container-color:var(\n    --md-filled-select-text-field-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-container-opacity:var(\n    --md-filled-select-text-field-disabled-container-opacity,0.04\n  );--_text-field-disabled-input-text-color:var(\n    --md-filled-select-text-field-disabled-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-input-text-opacity:var(\n    --md-filled-select-text-field-disabled-input-text-opacity,0.38\n  );--_text-field-disabled-label-text-color:var(\n    --md-filled-select-text-field-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-label-text-opacity:var(\n    --md-filled-select-text-field-disabled-label-text-opacity,0.38\n  );--_text-field-disabled-leading-icon-color:var(\n    --md-filled-select-text-field-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-leading-icon-opacity:var(\n    --md-filled-select-text-field-disabled-leading-icon-opacity,0.38\n  );--_text-field-disabled-supporting-text-color:var(\n    --md-filled-select-text-field-disabled-supporting-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-supporting-text-opacity:var(\n    --md-filled-select-text-field-disabled-supporting-text-opacity,0.38\n  );--_text-field-disabled-trailing-icon-color:var(\n    --md-filled-select-text-field-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-trailing-icon-opacity:var(\n    --md-filled-select-text-field-disabled-trailing-icon-opacity,0.38\n  );--_text-field-error-active-indicator-color:var(\n    --md-filled-select-text-field-error-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-active-indicator-color:var(\n    --md-filled-select-text-field-error-focus-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-input-text-color:var(\n    --md-filled-select-text-field-error-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-focus-label-text-color:var(\n    --md-filled-select-text-field-error-focus-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-leading-icon-color:var(\n    --md-filled-select-text-field-error-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-error-focus-supporting-text-color:var(\n    --md-filled-select-text-field-error-focus-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-trailing-icon-color:var(\n    --md-filled-select-text-field-error-focus-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-hover-active-indicator-color:var(\n    --md-filled-select-text-field-error-hover-active-indicator-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_text-field-error-hover-input-text-color:var(\n    --md-filled-select-text-field-error-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-hover-label-text-color:var(\n    --md-filled-select-text-field-error-hover-label-text-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_text-field-error-hover-leading-icon-color:var(\n    --md-filled-select-text-field-error-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-error-hover-state-layer-color:var(\n    --md-filled-select-text-field-error-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-hover-state-layer-opacity:var(\n    --md-filled-select-text-field-error-hover-state-layer-opacity,0.08\n  );--_text-field-error-hover-supporting-text-color:var(\n    --md-filled-select-text-field-error-hover-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-hover-trailing-icon-color:var(\n    --md-filled-select-text-field-error-hover-trailing-icon-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_text-field-error-input-text-color:var(\n    --md-filled-select-text-field-error-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-label-text-color:var(\n    --md-filled-select-text-field-error-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-leading-icon-color:var(\n    --md-filled-select-text-field-error-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-error-supporting-text-color:var(\n    --md-filled-select-text-field-error-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-trailing-icon-color:var(\n    --md-filled-select-text-field-error-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-focus-active-indicator-color:var(\n    --md-filled-select-text-field-focus-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_text-field-focus-active-indicator-height:var(\n    --md-filled-select-text-field-focus-active-indicator-height,2px\n  );--_text-field-focus-input-text-color:var(\n    --md-filled-select-text-field-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-focus-label-text-color:var(\n    --md-filled-select-text-field-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_text-field-focus-leading-icon-color:var(\n    --md-filled-select-text-field-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-focus-supporting-text-color:var(\n    --md-filled-select-text-field-focus-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-focus-trailing-icon-color:var(\n    --md-filled-select-text-field-focus-trailing-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_text-field-hover-active-indicator-color:var(\n    --md-filled-select-text-field-hover-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-active-indicator-height:var(\n    --md-filled-select-text-field-hover-active-indicator-height,1px\n  );--_text-field-hover-input-text-color:var(\n    --md-filled-select-text-field-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-label-text-color:var(\n    --md-filled-select-text-field-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-leading-icon-color:var(\n    --md-filled-select-text-field-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-hover-state-layer-color:var(\n    --md-filled-select-text-field-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-state-layer-opacity:var(\n    --md-filled-select-text-field-hover-state-layer-opacity,0.08\n  );--_text-field-hover-supporting-text-color:var(\n    --md-filled-select-text-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-hover-trailing-icon-color:var(\n    --md-filled-select-text-field-hover-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-input-text-color:var(\n    --md-filled-select-text-field-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-input-text-type:var(\n    --md-filled-select-text-field-input-text-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_text-field-label-text-color:var(\n    --md-filled-select-text-field-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-label-text-populated-line-height:var(\n    --md-filled-select-text-field-label-text-populated-line-height,1rem\n  );--_text-field-label-text-populated-size:var(\n    --md-filled-select-text-field-label-text-populated-size,0.75rem\n  );--_text-field-label-text-type:var(\n    --md-filled-select-text-field-label-text-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_text-field-leading-icon-color:var(\n    --md-filled-select-text-field-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-leading-icon-size:var(\n    --md-filled-select-text-field-leading-icon-size,20px\n  );--_text-field-supporting-text-color:var(\n    --md-filled-select-text-field-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-supporting-text-type:var(\n    --md-filled-select-text-field-supporting-text-type,400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n  );--_text-field-trailing-icon-color:var(\n    --md-filled-select-text-field-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-trailing-icon-size:var(\n    --md-filled-select-text-field-trailing-icon-size,24px\n  );--md-filled-field-active-indicator-color:var(\n    --_text-field-active-indicator-color\n  );--md-filled-field-active-indicator-height:var(\n    --_text-field-active-indicator-height\n  );--md-filled-field-container-color:var(--_text-field-container-color);--md-filled-field-container-shape-end-end:var(\n    --_text-field-container-shape-end-end\n  );--md-filled-field-container-shape-end-start:var(\n    --_text-field-container-shape-end-start\n  );--md-filled-field-container-shape-start-end:var(\n    --_text-field-container-shape-start-end\n  );--md-filled-field-container-shape-start-start:var(\n    --_text-field-container-shape-start-start\n  );--md-filled-field-content-color:var(--_text-field-input-text-color);--md-filled-field-content-type:var(--_text-field-input-text-type);--md-filled-field-disabled-active-indicator-color:var(\n    --_text-field-disabled-active-indicator-color\n  );--md-filled-field-disabled-active-indicator-height:var(\n    --_text-field-disabled-active-indicator-height\n  );--md-filled-field-disabled-active-indicator-opacity:var(\n    --_text-field-disabled-active-indicator-opacity\n  );--md-filled-field-disabled-container-color:var(\n    --_text-field-disabled-container-color\n  );--md-filled-field-disabled-container-opacity:var(\n    --_text-field-disabled-container-opacity\n  );--md-filled-field-disabled-content-color:var(\n    --_text-field-disabled-input-text-color\n  );--md-filled-field-disabled-content-opacity:var(\n    --_text-field-disabled-input-text-opacity\n  );--md-filled-field-disabled-label-text-color:var(\n    --_text-field-disabled-label-text-color\n  );--md-filled-field-disabled-label-text-opacity:var(\n    --_text-field-disabled-label-text-opacity\n  );--md-filled-field-disabled-leading-content-color:var(\n    --_text-field-disabled-leading-icon-color\n  );--md-filled-field-disabled-leading-content-opacity:var(\n    --_text-field-disabled-leading-icon-opacity\n  );--md-filled-field-disabled-supporting-text-color:var(\n    --_text-field-disabled-supporting-text-color\n  );--md-filled-field-disabled-supporting-text-opacity:var(\n    --_text-field-disabled-supporting-text-opacity\n  );--md-filled-field-disabled-trailing-content-color:var(\n    --_text-field-disabled-trailing-icon-color\n  );--md-filled-field-disabled-trailing-content-opacity:var(\n    --_text-field-disabled-trailing-icon-opacity\n  );--md-filled-field-error-active-indicator-color:var(\n    --_text-field-error-active-indicator-color\n  );--md-filled-field-error-content-color:var(\n    --_text-field-error-input-text-color\n  );--md-filled-field-error-focus-active-indicator-color:var(\n    --_text-field-error-focus-active-indicator-color\n  );--md-filled-field-error-focus-content-color:var(\n    --_text-field-error-focus-input-text-color\n  );--md-filled-field-error-focus-label-text-color:var(\n    --_text-field-error-focus-label-text-color\n  );--md-filled-field-error-focus-leading-content-color:var(\n    --_text-field-error-focus-leading-icon-color\n  );--md-filled-field-error-focus-supporting-text-color:var(\n    --_text-field-error-focus-supporting-text-color\n  );--md-filled-field-error-focus-trailing-content-color:var(\n    --_text-field-error-focus-trailing-icon-color\n  );--md-filled-field-error-hover-active-indicator-color:var(\n    --_text-field-error-hover-active-indicator-color\n  );--md-filled-field-error-hover-content-color:var(\n    --_text-field-error-hover-input-text-color\n  );--md-filled-field-error-hover-label-text-color:var(\n    --_text-field-error-hover-label-text-color\n  );--md-filled-field-error-hover-leading-content-color:var(\n    --_text-field-error-hover-leading-icon-color\n  );--md-filled-field-error-hover-state-layer-color:var(\n    --_text-field-error-hover-state-layer-color\n  );--md-filled-field-error-hover-state-layer-opacity:var(\n    --_text-field-error-hover-state-layer-opacity\n  );--md-filled-field-error-hover-supporting-text-color:var(\n    --_text-field-error-hover-supporting-text-color\n  );--md-filled-field-error-hover-trailing-content-color:var(\n    --_text-field-error-hover-trailing-icon-color\n  );--md-filled-field-error-label-text-color:var(\n    --_text-field-error-label-text-color\n  );--md-filled-field-error-leading-content-color:var(\n    --_text-field-error-leading-icon-color\n  );--md-filled-field-error-supporting-text-color:var(\n    --_text-field-error-supporting-text-color\n  );--md-filled-field-error-trailing-content-color:var(\n    --_text-field-error-trailing-icon-color\n  );--md-filled-field-focus-active-indicator-color:var(\n    --_text-field-focus-active-indicator-color\n  );--md-filled-field-focus-active-indicator-height:var(\n    --_text-field-focus-active-indicator-height\n  );--md-filled-field-focus-content-color:var(\n    --_text-field-focus-input-text-color\n  );--md-filled-field-focus-label-text-color:var(\n    --_text-field-focus-label-text-color\n  );--md-filled-field-focus-leading-content-color:var(\n    --_text-field-focus-leading-icon-color\n  );--md-filled-field-focus-supporting-text-color:var(\n    --_text-field-focus-supporting-text-color\n  );--md-filled-field-focus-trailing-content-color:var(\n    --_text-field-focus-trailing-icon-color\n  );--md-filled-field-hover-active-indicator-color:var(\n    --_text-field-hover-active-indicator-color\n  );--md-filled-field-hover-active-indicator-height:var(\n    --_text-field-hover-active-indicator-height\n  );--md-filled-field-hover-content-color:var(\n    --_text-field-hover-input-text-color\n  );--md-filled-field-hover-label-text-color:var(\n    --_text-field-hover-label-text-color\n  );--md-filled-field-hover-leading-content-color:var(\n    --_text-field-hover-leading-icon-color\n  );--md-filled-field-hover-state-layer-color:var(\n    --_text-field-hover-state-layer-color\n  );--md-filled-field-hover-state-layer-opacity:var(\n    --_text-field-hover-state-layer-opacity\n  );--md-filled-field-hover-supporting-text-color:var(\n    --_text-field-hover-supporting-text-color\n  );--md-filled-field-hover-trailing-content-color:var(\n    --_text-field-hover-trailing-icon-color\n  );--md-filled-field-label-text-color:var(--_text-field-label-text-color);--md-filled-field-label-text-populated-line-height:var(\n    --_text-field-label-text-populated-line-height\n  );--md-filled-field-label-text-populated-size:var(\n    --_text-field-label-text-populated-size\n  );--md-filled-field-label-text-type:var(--_text-field-label-text-type);--md-filled-field-leading-content-color:var(\n    --_text-field-leading-icon-color\n  );--md-filled-field-supporting-text-color:var(\n    --_text-field-supporting-text-color\n  );--md-filled-field-supporting-text-type:var(\n    --_text-field-supporting-text-type\n  );--md-filled-field-trailing-content-color:var(\n    --_text-field-trailing-icon-color\n  )}.mdc-filled-select[hasstart] .icon.leading{font-size:var(--_text-field-leading-icon-size);height:var(--_text-field-leading-icon-size);width:var(--_text-field-leading-icon-size)}.mdc-filled-select[hasend] .icon.trailing{font-size:var(--_text-field-trailing-icon-size);height:var(--_text-field-trailing-icon-size);width:var(--_text-field-trailing-icon-size)}@media (forced-colors:active){.mdc-outlined-select{--md-outlined-select-text-field-disabled-input-text-color:GrayText;--md-outlined-select-text-field-disabled-input-text-opacity:1;--md-outlined-select-text-field-disabled-label-text-color:GrayText;--md-outlined-select-text-field-disabled-label-text-opacity:1;--md-outlined-select-text-field-disabled-leading-icon-color:GrayText;--md-outlined-select-text-field-disabled-leading-icon-opacity:1;--md-outlined-select-text-field-disabled-outline-color:GrayText;--md-outlined-select-text-field-disabled-outline-opacity:1;--md-outlined-select-text-field-disabled-supporting-text-color:GrayText;--md-outlined-select-text-field-disabled-supporting-text-opacity:1;--md-outlined-select-text-field-disabled-trailing-icon-color:GrayText;--md-outlined-select-text-field-disabled-trailing-icon-opacity:1}}.mdc-outlined-select{--_text-field-container-shape:var(\n    --md-outlined-select-text-field-container-shape,4px\n  );--_text-field-disabled-input-text-color:var(\n    --md-outlined-select-text-field-disabled-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-input-text-opacity:var(\n    --md-outlined-select-text-field-disabled-input-text-opacity,0.38\n  );--_text-field-disabled-label-text-color:var(\n    --md-outlined-select-text-field-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-label-text-opacity:var(\n    --md-outlined-select-text-field-disabled-label-text-opacity,0.38\n  );--_text-field-disabled-leading-icon-color:var(\n    --md-outlined-select-text-field-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-leading-icon-opacity:var(\n    --md-outlined-select-text-field-disabled-leading-icon-opacity,0.38\n  );--_text-field-disabled-outline-color:var(\n    --md-outlined-select-text-field-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-outline-opacity:var(\n    --md-outlined-select-text-field-disabled-outline-opacity,0.12\n  );--_text-field-disabled-outline-width:var(\n    --md-outlined-select-text-field-disabled-outline-width,1px\n  );--_text-field-disabled-supporting-text-color:var(\n    --md-outlined-select-text-field-disabled-supporting-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-supporting-text-opacity:var(\n    --md-outlined-select-text-field-disabled-supporting-text-opacity,0.38\n  );--_text-field-disabled-trailing-icon-color:var(\n    --md-outlined-select-text-field-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-disabled-trailing-icon-opacity:var(\n    --md-outlined-select-text-field-disabled-trailing-icon-opacity,0.38\n  );--_text-field-error-focus-input-text-color:var(\n    --md-outlined-select-text-field-error-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-focus-label-text-color:var(\n    --md-outlined-select-text-field-error-focus-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-leading-icon-color:var(\n    --md-outlined-select-text-field-error-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-error-focus-outline-color:var(\n    --md-outlined-select-text-field-error-focus-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-supporting-text-color:var(\n    --md-outlined-select-text-field-error-focus-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-focus-trailing-icon-color:var(\n    --md-outlined-select-text-field-error-focus-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-hover-input-text-color:var(\n    --md-outlined-select-text-field-error-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-hover-label-text-color:var(\n    --md-outlined-select-text-field-error-hover-label-text-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_text-field-error-hover-leading-icon-color:var(\n    --md-outlined-select-text-field-error-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-error-hover-outline-color:var(\n    --md-outlined-select-text-field-error-hover-outline-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_text-field-error-hover-supporting-text-color:var(\n    --md-outlined-select-text-field-error-hover-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-hover-trailing-icon-color:var(\n    --md-outlined-select-text-field-error-hover-trailing-icon-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_text-field-error-input-text-color:var(\n    --md-outlined-select-text-field-error-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-error-label-text-color:var(\n    --md-outlined-select-text-field-error-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-leading-icon-color:var(\n    --md-outlined-select-text-field-error-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-error-outline-color:var(\n    --md-outlined-select-text-field-error-outline-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-supporting-text-color:var(\n    --md-outlined-select-text-field-error-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-error-trailing-icon-color:var(\n    --md-outlined-select-text-field-error-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_text-field-focus-input-text-color:var(\n    --md-outlined-select-text-field-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-focus-label-text-color:var(\n    --md-outlined-select-text-field-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_text-field-focus-leading-icon-color:var(\n    --md-outlined-select-text-field-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-focus-outline-color:var(\n    --md-outlined-select-text-field-focus-outline-color,var(--md-sys-color-primary,#6750a4)\n  );--_text-field-focus-outline-width:var(\n    --md-outlined-select-text-field-focus-outline-width,2px\n  );--_text-field-focus-supporting-text-color:var(\n    --md-outlined-select-text-field-focus-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-focus-trailing-icon-color:var(\n    --md-outlined-select-text-field-focus-trailing-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_text-field-hover-input-text-color:var(\n    --md-outlined-select-text-field-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-label-text-color:var(\n    --md-outlined-select-text-field-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-leading-icon-color:var(\n    --md-outlined-select-text-field-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-hover-outline-color:var(\n    --md-outlined-select-text-field-hover-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-hover-outline-width:var(\n    --md-outlined-select-text-field-hover-outline-width,1px\n  );--_text-field-hover-supporting-text-color:var(\n    --md-outlined-select-text-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-hover-trailing-icon-color:var(\n    --md-outlined-select-text-field-hover-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-input-text-color:var(\n    --md-outlined-select-text-field-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_text-field-input-text-type:var(\n    --md-outlined-select-text-field-input-text-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_text-field-label-text-color:var(\n    --md-outlined-select-text-field-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-label-text-populated-line-height:var(\n    --md-outlined-select-text-field-label-text-populated-line-height,1rem\n  );--_text-field-label-text-populated-size:var(\n    --md-outlined-select-text-field-label-text-populated-size,0.75rem\n  );--_text-field-label-text-type:var(\n    --md-outlined-select-text-field-label-text-type,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--_text-field-leading-icon-color:var(\n    --md-outlined-select-text-field-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-leading-icon-size:var(\n    --md-outlined-select-text-field-leading-icon-size,24px\n  );--_text-field-outline-color:var(\n    --md-outlined-select-text-field-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_text-field-outline-width:var(\n    --md-outlined-select-text-field-outline-width,1px\n  );--_text-field-supporting-text-color:var(\n    --md-outlined-select-text-field-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-supporting-text-type:var(\n    --md-outlined-select-text-field-supporting-text-type,400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n  );--_text-field-trailing-icon-color:var(\n    --md-outlined-select-text-field-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_text-field-trailing-icon-size:var(\n    --md-outlined-select-text-field-trailing-icon-size,24px\n  );--_text-field-container-shape-start-start:var(\n    --md-outlined-select-text-field-container-shape-start-start,var(--_text-field-container-shape)\n  );--_text-field-container-shape-start-end:var(\n    --md-outlined-select-text-field-container-shape-start-end,var(--_text-field-container-shape)\n  );--_text-field-container-shape-end-end:var(\n    --md-outlined-select-text-field-container-shape-end-end,var(--_text-field-container-shape)\n  );--_text-field-container-shape-end-start:var(\n    --md-outlined-select-text-field-container-shape-end-start,var(--_text-field-container-shape)\n  );--md-outlined-field-container-shape-end-end:var(\n    --_text-field-container-shape-end-end\n  );--md-outlined-field-container-shape-end-start:var(\n    --_text-field-container-shape-end-start\n  );--md-outlined-field-container-shape-start-end:var(\n    --_text-field-container-shape-start-end\n  );--md-outlined-field-container-shape-start-start:var(\n    --_text-field-container-shape-start-start\n  );--md-outlined-field-content-color:var(--_text-field-input-text-color);--md-outlined-field-content-type:var(--_text-field-input-text-type);--md-outlined-field-disabled-content-color:var(\n    --_text-field-disabled-input-text-color\n  );--md-outlined-field-disabled-content-opacity:var(\n    --_text-field-disabled-input-text-opacity\n  );--md-outlined-field-disabled-label-text-color:var(\n    --_text-field-disabled-label-text-color\n  );--md-outlined-field-disabled-label-text-opacity:var(\n    --_text-field-disabled-label-text-opacity\n  );--md-outlined-field-disabled-leading-content-color:var(\n    --_text-field-disabled-leading-icon-color\n  );--md-outlined-field-disabled-leading-content-opacity:var(\n    --_text-field-disabled-leading-icon-opacity\n  );--md-outlined-field-disabled-outline-color:var(\n    --_text-field-disabled-outline-color\n  );--md-outlined-field-disabled-outline-opacity:var(\n    --_text-field-disabled-outline-opacity\n  );--md-outlined-field-disabled-outline-width:var(\n    --_text-field-disabled-outline-width\n  );--md-outlined-field-disabled-supporting-text-color:var(\n    --_text-field-disabled-supporting-text-color\n  );--md-outlined-field-disabled-supporting-text-opacity:var(\n    --_text-field-disabled-supporting-text-opacity\n  );--md-outlined-field-disabled-trailing-content-color:var(\n    --_text-field-disabled-trailing-icon-color\n  );--md-outlined-field-disabled-trailing-content-opacity:var(\n    --_text-field-disabled-trailing-icon-opacity\n  );--md-outlined-field-error-content-color:var(\n    --_text-field-error-input-text-color\n  );--md-outlined-field-error-focus-content-color:var(\n    --_text-field-error-focus-input-text-color\n  );--md-outlined-field-error-focus-label-text-color:var(\n    --_text-field-error-focus-label-text-color\n  );--md-outlined-field-error-focus-leading-content-color:var(\n    --_text-field-error-focus-leading-icon-color\n  );--md-outlined-field-error-focus-outline-color:var(\n    --_text-field-error-focus-outline-color\n  );--md-outlined-field-error-focus-supporting-text-color:var(\n    --_text-field-error-focus-supporting-text-color\n  );--md-outlined-field-error-focus-trailing-content-color:var(\n    --_text-field-error-focus-trailing-icon-color\n  );--md-outlined-field-error-hover-content-color:var(\n    --_text-field-error-hover-input-text-color\n  );--md-outlined-field-error-hover-label-text-color:var(\n    --_text-field-error-hover-label-text-color\n  );--md-outlined-field-error-hover-leading-content-color:var(\n    --_text-field-error-hover-leading-icon-color\n  );--md-outlined-field-error-hover-outline-color:var(\n    --_text-field-error-hover-outline-color\n  );--md-outlined-field-error-hover-supporting-text-color:var(\n    --_text-field-error-hover-supporting-text-color\n  );--md-outlined-field-error-hover-trailing-content-color:var(\n    --_text-field-error-hover-trailing-icon-color\n  );--md-outlined-field-error-label-text-color:var(\n    --_text-field-error-label-text-color\n  );--md-outlined-field-error-leading-content-color:var(\n    --_text-field-error-leading-icon-color\n  );--md-outlined-field-error-outline-color:var(\n    --_text-field-error-outline-color\n  );--md-outlined-field-error-supporting-text-color:var(\n    --_text-field-error-supporting-text-color\n  );--md-outlined-field-error-trailing-content-color:var(\n    --_text-field-error-trailing-icon-color\n  );--md-outlined-field-focus-content-color:var(\n    --_text-field-focus-input-text-color\n  );--md-outlined-field-focus-label-text-color:var(\n    --_text-field-focus-label-text-color\n  );--md-outlined-field-focus-leading-content-color:var(\n    --_text-field-focus-leading-icon-color\n  );--md-outlined-field-focus-outline-color:var(\n    --_text-field-focus-outline-color\n  );--md-outlined-field-focus-outline-width:var(\n    --_text-field-focus-outline-width\n  );--md-outlined-field-focus-supporting-text-color:var(\n    --_text-field-focus-supporting-text-color\n  );--md-outlined-field-focus-trailing-content-color:var(\n    --_text-field-focus-trailing-icon-color\n  );--md-outlined-field-hover-content-color:var(\n    --_text-field-hover-input-text-color\n  );--md-outlined-field-hover-label-text-color:var(\n    --_text-field-hover-label-text-color\n  );--md-outlined-field-hover-leading-content-color:var(\n    --_text-field-hover-leading-icon-color\n  );--md-outlined-field-hover-outline-color:var(\n    --_text-field-hover-outline-color\n  );--md-outlined-field-hover-outline-width:var(\n    --_text-field-hover-outline-width\n  );--md-outlined-field-hover-supporting-text-color:var(\n    --_text-field-hover-supporting-text-color\n  );--md-outlined-field-hover-trailing-content-color:var(\n    --_text-field-hover-trailing-icon-color\n  );--md-outlined-field-label-text-color:var(--_text-field-label-text-color);--md-outlined-field-label-text-populated-line-height:var(\n    --_text-field-label-text-populated-line-height\n  );--md-outlined-field-label-text-populated-size:var(\n    --_text-field-label-text-populated-size\n  );--md-outlined-field-label-text-type:var(--_text-field-label-text-type);--md-outlined-field-leading-content-color:var(\n    --_text-field-leading-icon-color\n  );--md-outlined-field-outline-color:var(--_text-field-outline-color);--md-outlined-field-outline-width:var(--_text-field-outline-width);--md-outlined-field-supporting-text-color:var(\n    --_text-field-supporting-text-color\n  );--md-outlined-field-supporting-text-type:var(\n    --_text-field-supporting-text-type\n  );--md-outlined-field-trailing-content-color:var(\n    --_text-field-trailing-icon-color\n  )}.mdc-outlined-select[hasstart] .icon.leading{font-size:var(--_text-field-leading-icon-size);height:var(--_text-field-leading-icon-size);width:var(--_text-field-leading-icon-size)}.mdc-outlined-select[hasend] .icon.trailing{font-size:var(--_text-field-trailing-icon-size);height:var(--_text-field-trailing-icon-size);width:var(--_text-field-trailing-icon-size)}";
styleInject(css_248z$l);

var Select = function Select(_ref) {
  var _classnames, _classnames2;
  var value = _ref.value,
    variant = _ref.variant,
    prefixText = _ref.prefixText,
    defalutValue = _ref.defalutValue,
    required = _ref.required,
    label = _ref.label,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'select' : _ref$type,
    error = _ref.error,
    errorText = _ref.errorText,
    disabled = _ref.disabled,
    className = _ref.className,
    children = _ref.children,
    onChange = _ref.onChange;
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var slots = useSlot(children);
  var menu = React.useRef(null);
  var _useState3 = React.useState(value || defalutValue),
    _useState4 = _slicedToArray(_useState3, 2),
    currentValue = _useState4[0],
    setCurrentValue = _useState4[1];
  var _useState5 = React.useState(errorText),
    _useState6 = _slicedToArray(_useState5, 2),
    errorMessage = _useState6[0],
    setErrorMessage = _useState6[1];
  var classNames = classnames(CSS_CLASSES$d.ROOT, className, (_classnames = {}, _defineProperty(_classnames, 'mdc-filled-select', variant === 'filled'), _defineProperty(_classnames, 'mdc-outlined-select', variant === 'outlined'), _classnames));
  var select = classnames('select', (_classnames2 = {}, _defineProperty(_classnames2, 'disabled', disabled), _defineProperty(_classnames2, 'error', error), _classnames2));
  var doBlur = function doBlur(e) {
    if (!!required && !currentValue) {
      setErrorMessage('必填！');
    }
    var currentTarget = e.currentTarget;
    requestAnimationFrame(function () {
      if (!currentTarget.contains(document.activeElement)) {
        var _menu$current;
        setOpen(false);
        (_menu$current = menu.current) === null || _menu$current === void 0 ? void 0 : _menu$current.close();
      }
    });
  };
  var doFocus = function doFocus() {
    var _menu$current2;
    setOpen(true);
    (_menu$current2 = menu.current) === null || _menu$current2 === void 0 ? void 0 : _menu$current2.open();
  };
  var doChange = function doChange(v) {
    if (type === 'select') {
      setCurrentValue(v);
      onChange === null || onChange === void 0 ? void 0 : onChange(v);
    }
  };
  var getLable = function getLable(v) {
    var _res$;
    if (!slots.children.length) {
      return label || v;
    }
    var res = slots.children.filter(function (child) {
      return child.props.value === v;
    });
    return ((_res$ = res[0]) === null || _res$ === void 0 ? void 0 : _res$.props.children) || v;
  };
  React.useEffect(function () {
    setCurrentValue(value);
  }, [value]);
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    tabIndex: 1,
    onBlur: doBlur,
    children: jsxRuntime.exports.jsxs("div", {
      className: select,
      children: [jsxRuntime.exports.jsxs(Field, {
        className: "field",
        onFocus: doFocus,
        label: label,
        disabled: disabled,
        error: error,
        required: required,
        populated: !!currentValue,
        variant: variant,
        children: [jsxRuntime.exports.jsx(_Slot, {
          name: "start",
          children: jsxRuntime.exports.jsx("span", {
            className: "icon leading",
            children: slots['leadingicon']
          })
        }), jsxRuntime.exports.jsx(_Slot, {
          name: "end",
          children: jsxRuntime.exports.jsx(Icon, {
            className: "icon trailing",
            children: open ? 'arrow_drop_down' : 'arrow_right'
          })
        }), jsxRuntime.exports.jsx("div", {
          className: "label",
          children: getLable(currentValue)
        }), jsxRuntime.exports.jsx(_Slot, {
          name: "supporting-text",
          children: jsxRuntime.exports.jsx("span", {
            children: !!errorMessage ? errorMessage : prefixText
          })
        })]
      }), jsxRuntime.exports.jsx(Menu, {
        ref: menu,
        onChange: doChange,
        value: currentValue,
        children: slots.children
      })]
    })
  });
};
Select.Option = Menu.Item;

var SegmentContext = /*#__PURE__*/React.createContext({});

var CSS_CLASSES$c = {
  ROOT: 'mdc-outlined-segmented-button-set',
  LARGE: 'large'
};

var css_248z$k = ".mdc-outlined-segmented-button-set{--_container-height:var(\n    --md-outlined-segmented-button-container-height,40px\n  );--_disabled-icon-color:var(\n    --md-outlined-segmented-button-disabled-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-icon-opacity:var(\n    --md-outlined-segmented-button-disabled-icon-opacity,0.38\n  );--_disabled-label-text-color:var(\n    --md-outlined-segmented-button-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-outlined-segmented-button-disabled-label-text-opacity,0.38\n  );--_disabled-outline-color:var(\n    --md-outlined-segmented-button-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-outlined-segmented-button-disabled-outline-opacity,0.12\n  );--_focus-state-layer-opacity:var(\n    --md-outlined-segmented-button-focus-state-layer-opacity,0.12\n  );--_hover-state-layer-opacity:var(\n    --md-outlined-segmented-button-hover-state-layer-opacity,0.08\n  );--_label-text-type:var(\n    --md-outlined-segmented-button-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_outline-color:var(\n    --md-outlined-segmented-button-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-outlined-segmented-button-outline-width,1px);--_pressed-state-layer-opacity:var(\n    --md-outlined-segmented-button-pressed-state-layer-opacity,0.12\n  );--_selected-container-color:var(\n    --md-outlined-segmented-button-selected-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_selected-focus-icon-color:var(\n    --md-outlined-segmented-button-selected-focus-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-label-text-color:var(\n    --md-outlined-segmented-button-selected-focus-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-state-layer-color:var(\n    --md-outlined-segmented-button-selected-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-icon-color:var(\n    --md-outlined-segmented-button-selected-hover-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-label-text-color:var(\n    --md-outlined-segmented-button-selected-hover-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-state-layer-color:var(\n    --md-outlined-segmented-button-selected-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-label-text-color:var(\n    --md-outlined-segmented-button-selected-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-icon-color:var(\n    --md-outlined-segmented-button-selected-pressed-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-label-text-color:var(\n    --md-outlined-segmented-button-selected-pressed-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-state-layer-color:var(\n    --md-outlined-segmented-button-selected-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-with-icon-icon-color:var(\n    --md-outlined-segmented-button-selected-with-icon-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_shape:var(--md-outlined-segmented-button-shape,9999px);--_unselected-focus-icon-color:var(\n    --md-outlined-segmented-button-unselected-focus-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-label-text-color:var(\n    --md-outlined-segmented-button-unselected-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-state-layer-color:var(\n    --md-outlined-segmented-button-unselected-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-icon-color:var(\n    --md-outlined-segmented-button-unselected-hover-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-label-text-color:var(\n    --md-outlined-segmented-button-unselected-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-state-layer-color:var(\n    --md-outlined-segmented-button-unselected-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-label-text-color:var(\n    --md-outlined-segmented-button-unselected-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-icon-color:var(\n    --md-outlined-segmented-button-unselected-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-label-text-color:var(\n    --md-outlined-segmented-button-unselected-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-state-layer-color:var(\n    --md-outlined-segmented-button-unselected-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-with-icon-icon-color:var(\n    --md-outlined-segmented-button-unselected-with-icon-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_with-icon-icon-size:var(\n    --md-outlined-segmented-button-with-icon-icon-size,18px\n  );--_shape-start-start:var(\n    --md-outlined-segmented-button-shape-start-start,var(--_shape)\n  );--_shape-start-end:var(\n    --md-outlined-segmented-button-shape-start-end,var(--_shape)\n  );--_shape-end-end:var(\n    --md-outlined-segmented-button-shape-end-end,var(--_shape)\n  );--_shape-end-start:var(\n    --md-outlined-segmented-button-shape-end-start,var(--_shape)\n  );display:grid;grid-auto-columns:1fr;grid-auto-flow:column;grid-auto-rows:auto;height:var(--_container-height);width:100%}.mdc-outlined-segmented-button-set .mdc-outlined-segmented-button:first-child{border-end-start-radius:var(--_shape-end-start);border-start-start-radius:var(--_shape-start-start)}.mdc-outlined-segmented-button-set .mdc-outlined-segmented-button:last-child{border-end-end-radius:var(--_shape-end-end);border-start-end-radius:var(--_shape-start-end)}";
styleInject(css_248z$k);

var SegmentedButtonSet = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var multiple = _ref.multiple,
    className = _ref.className,
    children = _ref.children;
  var _useState = React.useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var classNames = classnames(CSS_CLASSES$c.ROOT, className, {});
  function doSelect(key) {
    if (multiple) {
      setSelected(function (res) {
        return Array.from(new Set(res.concat([key])));
      });
    } else {
      setSelected([key]);
    }
  }
  function updateSelect(key) {
    setSelected(function (res) {
      return Array.from(new Set(res.concat([key])));
    });
  }
  React.useImperativeHandle(ref, function () {
    return {};
  }, []);
  return jsxRuntime.exports.jsx(SegmentContext.Provider, {
    value: {
      selected: selected,
      doSelect: doSelect,
      updateSelect: updateSelect
    },
    children: jsxRuntime.exports.jsx("span", {
      role: "group",
      ref: ref,
      className: classNames,
      children: children
    })
  });
});

var CSS_CLASSES$b = {
  ROOT: 'mdc-outlined-segmented-button',
  LARGE: 'large'
};

var css_248z$j = ".mdc-outlined-segmented-button{--_container-height:var(--md-segmented-button-container-height,40px);--_disabled-icon-color:var(\n    --md-segmented-button-disabled-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-icon-opacity:var(\n    --md-segmented-button-disabled-icon-opacity,0.38\n  );--_disabled-label-text-color:var(\n    --md-segmented-button-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-segmented-button-disabled-label-text-opacity,0.38\n  );--_disabled-outline-color:var(\n    --md-segmented-button-disabled-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-outline-opacity:var(\n    --md-segmented-button-disabled-outline-opacity,0.12\n  );--_focus-state-layer-opacity:var(\n    --md-segmented-button-focus-state-layer-opacity,0.12\n  );--_hover-state-layer-opacity:var(\n    --md-segmented-button-hover-state-layer-opacity,0.08\n  );--_label-text-type:var(\n    --md-segmented-button-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_outline-color:var(\n    --md-segmented-button-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-segmented-button-outline-width,1px);--_pressed-state-layer-opacity:var(\n    --md-segmented-button-pressed-state-layer-opacity,0.12\n  );--_selected-container-color:var(\n    --md-segmented-button-selected-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_selected-focus-icon-color:var(\n    --md-segmented-button-selected-focus-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-label-text-color:var(\n    --md-segmented-button-selected-focus-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-focus-state-layer-color:var(\n    --md-segmented-button-selected-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-icon-color:var(\n    --md-segmented-button-selected-hover-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-label-text-color:var(\n    --md-segmented-button-selected-hover-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-hover-state-layer-color:var(\n    --md-segmented-button-selected-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-label-text-color:var(\n    --md-segmented-button-selected-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-icon-color:var(\n    --md-segmented-button-selected-pressed-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-label-text-color:var(\n    --md-segmented-button-selected-pressed-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-pressed-state-layer-color:var(\n    --md-segmented-button-selected-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_selected-with-icon-icon-color:var(\n    --md-segmented-button-selected-with-icon-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_shape:var(--md-segmented-button-shape,9999px);--_unselected-focus-icon-color:var(\n    --md-segmented-button-unselected-focus-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-label-text-color:var(\n    --md-segmented-button-unselected-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-state-layer-color:var(\n    --md-segmented-button-unselected-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-icon-color:var(\n    --md-segmented-button-unselected-hover-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-label-text-color:var(\n    --md-segmented-button-unselected-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-state-layer-color:var(\n    --md-segmented-button-unselected-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-label-text-color:var(\n    --md-segmented-button-unselected-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-icon-color:var(\n    --md-segmented-button-unselected-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-label-text-color:var(\n    --md-segmented-button-unselected-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-state-layer-color:var(\n    --md-segmented-button-unselected-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-with-icon-icon-color:var(\n    --md-segmented-button-unselected-with-icon-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_with-icon-icon-size:var(--md-segmented-button-with-icon-icon-size,18px);--_spacing-leading:var(--md-segmented-button-spacing-leading,12px);--_spacing-trailing:var(--md-segmented-button-spacing-trailing,12px)}.mdc-outlined-segmented-button .md3-segmented-button__outline{border-radius:inherit;border-style:solid;border-width:1px;inset:0 -.5px;pointer-events:none;position:absolute}@keyframes md3-segmented-button-checkmark-selection-draw-in{0%{stroke-dashoffset:29.7833385}to{stroke-dashoffset:0}}@keyframes md3-segmented-button-simple-fade-out{0%{opacity:1}to{opacity:0}}@keyframes md3-segmented-button-simple-fade-in{0%{opacity:0}to{opacity:1}}.mdc-outlined-segmented-button{-webkit-padding-start:var(--_spacing-leading);-webkit-padding-end:var(--_spacing-trailing);align-items:center;background:transparent;border:none;border-radius:inherit;display:flex;flex:1;justify-content:center;outline:none;padding-inline-end:var(--_spacing-trailing);padding-inline-start:var(--_spacing-leading);position:relative;vertical-align:middle}.mdc-outlined-segmented-button .md3-segmented-button__outline{border-color:var(--_outline-color)}.mdc-outlined-segmented-button:disabled .md3-segmented-button__outline{border-color:var(--_disabled-outline-color)}.mdc-outlined-segmented-button .md3-segmented-button__checkmark,.mdc-outlined-segmented-button .md3-segmented-button__graphic,.mdc-outlined-segmented-button .md3-segmented-button__icon,.mdc-outlined-segmented-button .md3-segmented-button__icon ::slotted([slot=icon]){font-size:var(--_with-icon-icon-size);height:var(--_with-icon-icon-size);width:var(--_with-icon-icon-size)}.mdc-outlined-segmented-button.md3-segmented-button--selected.md3-segmented-button--with-label.md3-segmented-button--with-checkmark .md3-segmented-button__graphic,.mdc-outlined-segmented-button.md3-segmented-button--selected.md3-segmented-button--without-label.md3-segmented-button--with-checkmark .md3-segmented-button__graphic,.mdc-outlined-segmented-button.md3-segmented-button--with-icon.md3-segmented-button--with-label .md3-segmented-button__graphic{width:calc(var(--_with-icon-icon-size) + 8px)}.mdc-outlined-segmented-button .md3-segmented-button .md3-segmented-button__label-text{font:var(--_label-text-type)}.mdc-outlined-segmented-button.md3-segmented-button--selected:enabled .md3-segmented-button__label-text{color:var(--_selected-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:enabled:hover .md3-segmented-button__label-text{color:var(--_selected-hover-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:enabled:focus .md3-segmented-button__label-text{color:var(--_selected-focus-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:enabled:active .md3-segmented-button__label-text{color:var(--_selected-pressed-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:enabled .md3-segmented-button__label-text{color:var(--_unselected-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:enabled:hover .md3-segmented-button__label-text{color:var(--_unselected-hover-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:enabled:focus .md3-segmented-button__label-text{color:var(--_unselected-focus-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:enabled:active .md3-segmented-button__label-text{color:var(--_unselected-pressed-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button:disabled .md3-segmented-button__label-text{color:var(--_disabled-label-text-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected{--md-ripple-hover-color:var(--_unselected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-focus-color:var(--_unselected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-pressed-color:var(--_unselected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity)}.mdc-outlined-segmented-button.md3-segmented-button--unselected .md3-segmented-button__icon{color:var(--_unselected-with-icon-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:hover .md3-segmented-button__icon{color:var(--_unselected-hover-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:focus .md3-segmented-button__icon{color:var(--_unselected-focus-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:active .md3-segmented-button__icon{color:var(--_unselected-pressed-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--unselected:disabled .md3-segmented-button__icon{color:var(--_disabled-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected{--md-ripple-hover-color:var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-focus-color:var(--_selected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-pressed-color:var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);background-color:var(--_selected-container-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected .md3-segmented-button__icon{color:var(--_selected-with-icon-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected .md3-segmented-button__checkmark-path{stroke:var(--_selected-with-icon-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:hover .md3-segmented-button__checkmark-path{stroke:var(--_selected-hover-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:focus .md3-segmented-button__checkmark-path{stroke:var(--_selected-focus-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:active .md3-segmented-button__checkmark-path{stroke:var(--_selected-pressed-icon-color)}.mdc-outlined-segmented-button.md3-segmented-button--selected:disabled .md3-segmented-button__checkmark-path{stroke:var(--_disabled-icon-color)}.mdc-outlined-segmented-button .md3-segmented-button:enabled{cursor:pointer}.mdc-outlined-segmented-button .md3-segmented-button__focus-ring{z-index:1}.mdc-outlined-segmented-button .md3-segmented-button__ripple{border-radius:inherit;z-index:0}.mdc-outlined-segmented-button .md3-segmented-button__touch{height:48px;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);width:100%}.mdc-outlined-segmented-button .md3-segmented-button__graphic,.mdc-outlined-segmented-button .md3-segmented-button__leading{align-items:center;display:inline-flex;justify-content:flex-start}.mdc-outlined-segmented-button .md3-segmented-button__graphic{overflow:hidden;position:relative;transition:width .15s cubic-bezier(.4,0,.2,1)}.mdc-outlined-segmented-button.md3-segmented-button--selected.md3-segmented-button--without-checkmark .md3-segmented-button__graphic,.mdc-outlined-segmented-button.md3-segmented-button--unselected.md3-segmented-button--with-label .md3-segmented-button__graphic,.mdc-outlined-segmented-button.md3-segmented-button--unselected.md3-segmented-button--without-label .md3-segmented-button__graphic{width:0}.mdc-outlined-segmented-button.md3-segmented-button--selected.md3-segmented-button--with-label .md3-segmented-button__icon,.mdc-outlined-segmented-button.md3-segmented-button--unselected .md3-segmented-button__checkmark{opacity:0}.mdc-outlined-segmented-button.md3-segmented-button--with-label .md3-segmented-button__checkmark{display:inline-flex;position:absolute}.mdc-outlined-segmented-button .md3-segmented-button__checkmark-path{stroke-width:2px;stroke-dasharray:29.7833385}.mdc-outlined-segmented-button.md3-segmented-button--selecting .md3-segmented-button__checkmark-path{stroke-dashoffset:29.7833385;animation:md3-segmented-button-checkmark-selection-draw-in;animation-delay:50ms;animation-duration:.15s;animation-fill-mode:forwards;animation-timing-function:cubic-bezier(.4,0,.2,1)}.mdc-outlined-segmented-button.md3-segmented-button--selecting.md3-segmented-button--with-label .md3-segmented-button__icon{animation:md3-segmented-button-simple-fade-out;animation-duration:75ms;animation-fill-mode:forwards;animation-timing-function:linear}.mdc-outlined-segmented-button.md3-segmented-button--deselecting .md3-segmented-button__checkmark{animation:md3-segmented-button-simple-fade-out;animation-duration:50ms;animation-fill-mode:forwards;animation-timing-function:linear}.mdc-outlined-segmented-button.md3-segmented-button--deselecting.md3-segmented-button--with-label .md3-segmented-button__icon{animation:md3-segmented-button-simple-fade-in;animation-delay:50ms;animation-duration:.15s;animation-fill-mode:forwards;animation-timing-function:linear;opacity:0}";
styleInject(css_248z$j);

var _excluded$4 = ["noCheckmark", "hasIcon", "value", "disabled", "className", "label", "children"];
var SegmentedButton = function SegmentedButton(_ref) {
  var _classnames;
  var noCheckmark = _ref.noCheckmark,
    hasIcon = _ref.hasIcon,
    value = _ref.value,
    disabled = _ref.disabled,
    className = _ref.className,
    label = _ref.label,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded$4);
  var _useState = React.useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    animState = _useState2[0],
    setAnimState = _useState2[1];
  var ref = React.useRef(null);
  var _useContext = React.useContext(SegmentContext),
    selected = _useContext.selected,
    doSelect = _useContext.doSelect,
    updateSelect = _useContext.updateSelect;
  var isSelected = React.useMemo(function () {
    return selected.includes(value) || props.selected;
  }, [selected, props.selected]);
  var classNames = classnames(CSS_CLASSES$b.ROOT, className, (_classnames = {}, _defineProperty(_classnames, 'md3-segmented-button--selected', isSelected), _defineProperty(_classnames, 'md3-segmented-button--unselected', !isSelected), _defineProperty(_classnames, 'md3-segmented-button--with-label', children !== '' || label !== ''), _defineProperty(_classnames, 'md3-segmented-button--without-label', children === '' || label === ''), _defineProperty(_classnames, 'md3-segmented-button--with-icon', hasIcon), _defineProperty(_classnames, 'md3-segmented-button--with-checkmark', !noCheckmark), _defineProperty(_classnames, 'md3-segmented-button--without-checkmark', noCheckmark), _defineProperty(_classnames, 'md3-segmented-button--selecting', animState === 'selecting'), _defineProperty(_classnames, 'md3-segmented-button--deselecting', animState === 'deselecting'), _classnames));
  function doClick() {
    setAnimState('selecting');
    doSelect(value);
  }
  function renderLeadingWithLabel() {
    return jsxRuntime.exports.jsx("span", {
      className: "md3-segmented-button__leading",
      "aria-hidden": "true",
      children: jsxRuntime.exports.jsxs("span", {
        className: "md3-segmented-button__graphic",
        children: [jsxRuntime.exports.jsx("svg", {
          className: "md3-segmented-button__checkmark",
          viewBox: "0 0 24 24",
          children: jsxRuntime.exports.jsx("path", {
            className: "md3-segmented-button__checkmark-path",
            fill: "none",
            d: "M1.73,12.91 8.1,19.28 22.79,4.59"
          })
        }), jsxRuntime.exports.jsx("span", {
          className: "md3-segmented-button__icon",
          "aria-hidden": "true",
          children: jsxRuntime.exports.jsx("slot", {
            name: "icon"
          })
        })]
      })
    });
  }
  function renderLeadingWithoutLabel() {
    return jsxRuntime.exports.jsxs("span", {
      className: "md3-segmented-button__leading",
      "aria-hidden": "true",
      children: [jsxRuntime.exports.jsx("span", {
        className: "md3-segmented-button__graphic",
        children: jsxRuntime.exports.jsx("svg", {
          className: "md3-segmented-button__checkmark",
          viewBox: "0 0 24 24",
          children: jsxRuntime.exports.jsx("path", {
            className: "md3-segmented-button__checkmark-path",
            fill: "none",
            d: "M1.73,12.91 8.1,19.28 22.79,4.59"
          })
        })
      }), jsxRuntime.exports.jsx("span", {
        className: "md3-segmented-button__icon",
        "aria-hidden": "true",
        children: jsxRuntime.exports.jsx("slot", {
          name: "icon"
        })
      })]
    });
  }
  React.useEffect(function () {
    if (props.selected) {
      updateSelect(value);
    }
  }, [props.selected]);
  React.useEffect(function () {
    if (!isSelected) {
      setAnimState('deselecting');
    }
  }, [isSelected]);
  return jsxRuntime.exports.jsxs("button", {
    ref: ref,
    disabled: disabled,
    onClick: doClick,
    className: classNames,
    children: [jsxRuntime.exports.jsx(Focus, {
      parent: ref,
      className: "md3-segmented-button__focus-ring"
    }), jsxRuntime.exports.jsx(Ripple, {
      parent: ref,
      className: "md3-segmented-button__ripple"
    }), jsxRuntime.exports.jsx("span", {
      className: "md3-segmented-button__outline"
    }), children || label ? renderLeadingWithLabel() : renderLeadingWithoutLabel(), jsxRuntime.exports.jsx("span", {
      className: "md3-segmented-button__label-text",
      children: label || children
    }), jsxRuntime.exports.jsx("span", {
      className: "md3-segmented-button__touch"
    })]
  });
};

var CSS_CLASSES$a = {
  ROOT: 'mdc-icon-button'
};

var css_248z$i = ".mdc-icon-button{display:inline-flex;height:var(--_container-size);width:var(--_container-size)}.mdc-icon-button.mdc-button{--_container-size:40px;--_spacing-leading:0;--_spacing-trailing:0;--_only-icon-icon-size:24px;--_disabled-icon-color:var(--md-sys-color-on-surface);--_disabled-icon-opacity:0.38;--md-focus-ring-shape-start-start:var(--_container-shape-start-start);--md-focus-ring-shape-start-end:var(--_container-shape-start-end);--md-focus-ring-shape-end-end:var(--_container-shape-end-end);--md-focus-ring-shape-end-start:var(--_container-shape-end-start)}.mdc-icon-button[disabled]{pointer-events:none}.mdc-icon-button{align-items:center;background:none;border:none;box-sizing:border-box;cursor:pointer;display:flex;flex:1;justify-content:center;outline:none;position:relative;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:0}.mdc-icon-button,.mdc-icon-button .mdc-ripple{border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start)}.mdc-icon-button .mdc-ripple{z-index:-1}.mdc-icon-button.flip-icon .mdc-icon{transform:scaleX(-1)}.mdc-icon-button.mdc-button .mdc-icon{block-size:var(--_only-icon-icon-size);display:inline-flex;font-size:var(--_only-icon-icon-size);inline-size:var(--_only-icon-icon-size);height:var(--_only-icon-icon-size);width:var(--_only-icon-icon-size)}.mdc-icon-button .link{height:100%;outline:none;width:100%}.mdc-icon-button .link,.mdc-icon-button .touch{position:absolute}.mdc-icon-button .touch{height:48px;left:50%;top:50%;transform:translate(-50%,-50%);width:48px}.mdc-filled-icon-button{--_focus-icon-color:var(\n    --md-filled-icon-button-focus-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_focus-state-layer-color:var(\n    --md-filled-icon-button-focus-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_focus-state-layer-opacity:var(\n    --md-filled-icon-button-focus-state-layer-opacity,0.12\n  );--_hover-icon-color:var(\n    --md-filled-icon-button-hover-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_hover-state-layer-color:var(\n    --md-filled-icon-button-hover-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_hover-state-layer-opacity:var(\n    --md-filled-icon-button-hover-state-layer-opacity,0.08\n  );--_icon-color:var(\n    --md-filled-icon-button-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_icon-size:var(--md-filled-icon-button-icon-size,24px);--_pressed-icon-color:var(\n    --md-filled-icon-button-pressed-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_pressed-state-layer-color:var(\n    --md-filled-icon-button-pressed-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_pressed-state-layer-opacity:var(\n    --md-filled-icon-button-pressed-state-layer-opacity,0.12\n  );--_selected-container-color:var(\n    --md-filled-icon-button-selected-container-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-selected-focus-icon-color:var(\n    --md-filled-icon-button-toggle-selected-focus-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-selected-focus-state-layer-color:var(\n    --md-filled-icon-button-toggle-selected-focus-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-selected-hover-icon-color:var(\n    --md-filled-icon-button-toggle-selected-hover-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-selected-hover-state-layer-color:var(\n    --md-filled-icon-button-toggle-selected-hover-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-selected-icon-color:var(\n    --md-filled-icon-button-toggle-selected-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-selected-pressed-icon-color:var(\n    --md-filled-icon-button-toggle-selected-pressed-icon-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-selected-pressed-state-layer-color:var(\n    --md-filled-icon-button-toggle-selected-pressed-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_toggle-unselected-focus-icon-color:var(\n    --md-filled-icon-button-toggle-unselected-focus-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-unselected-focus-state-layer-color:var(\n    --md-filled-icon-button-toggle-unselected-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-unselected-hover-icon-color:var(\n    --md-filled-icon-button-toggle-unselected-hover-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-unselected-hover-state-layer-color:var(\n    --md-filled-icon-button-toggle-unselected-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-unselected-icon-color:var(\n    --md-filled-icon-button-toggle-unselected-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-unselected-pressed-icon-color:var(\n    --md-filled-icon-button-toggle-unselected-pressed-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_toggle-unselected-pressed-state-layer-color:var(\n    --md-filled-icon-button-toggle-unselected-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_unselected-container-color:var(\n    --md-filled-icon-button-unselected-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_container-shape-start-start:var(\n    --md-filled-icon-button-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-filled-icon-button-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-filled-icon-button-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-filled-icon-button-container-shape-end-start,var(--_container-shape)\n  );--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);color:var(--_icon-color)}.mdc-filled-icon-button:hover{color:var(--_hover-icon-color)}.mdc-filled-icon-button:focus{color:var(--_focus-icon-color)}.mdc-filled-icon-button:active{color:var(--_pressed-icon-color)}.mdc-filled-icon-button:disabled{color:var(--_disabled-icon-color)}.mdc-filled-icon-button:before{background-color:var(--_container-color);border-radius:inherit;content:\"\";inset:0;position:absolute;z-index:-1}.mdc-filled-icon-button:disabled:before{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}.mdc-filled-icon-button:disabled .icon{opacity:var(--_disabled-icon-opacity)}.mdc-filled-icon-button.toggle-filled{--md-ripple-focus-color:var(--_toggle-unselected-focus-state-layer-color);--md-ripple-hover-color:var(--_toggle-unselected-hover-state-layer-color);--md-ripple-pressed-color:var(\n    --_toggle-unselected-pressed-state-layer-color\n  )}.mdc-filled-icon-button.toggle-filled:not(:disabled){color:var(--_toggle-unselected-icon-color)}.mdc-filled-icon-button.toggle-filled:not(:disabled):hover{color:var(--_toggle-unselected-hover-icon-color)}.mdc-filled-icon-button.toggle-filled:not(:disabled):focus{color:var(--_toggle-unselected-focus-icon-color)}.mdc-filled-icon-button.toggle-filled:not(:disabled):active{color:var(--_toggle-unselected-pressed-icon-color)}.mdc-filled-icon-button.toggle-filled:not(:disabled):before{background-color:var(--_unselected-container-color)}.mdc-filled-icon-button .selected{--md-ripple-focus-color:var(--_toggle-selected-focus-state-layer-color);--md-ripple-hover-color:var(--_toggle-selected-hover-state-layer-color);--md-ripple-pressed-color:var(--_toggle-selected-pressed-state-layer-color)}.mdc-filled-icon-button .selected:not(:disabled){color:var(--_toggle-selected-icon-color)}.mdc-filled-icon-button .selected:not(:disabled):hover{color:var(--_toggle-selected-hover-icon-color)}.mdc-filled-icon-button .selected:not(:disabled):focus{color:var(--_toggle-selected-focus-icon-color)}.mdc-filled-icon-button .selected:not(:disabled):active{color:var(--_toggle-selected-pressed-icon-color)}.mdc-filled-icon-button .selected:not(:disabled):before{background-color:var(--_selected-container-color)}.mdc-tonal-icon-button{--_container-color:var(\n    --md-filled-tonal-icon-button-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_disabled-container-color:var(\n    --md-filled-tonal-icon-button-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-container-opacity:var(\n    --md-filled-tonal-icon-button-disabled-container-opacity,0.12\n  );--_disabled-icon-color:var(\n    --md-filled-tonal-icon-button-disabled-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-icon-opacity:var(\n    --md-filled-tonal-icon-button-disabled-icon-opacity,0.38\n  );--_focus-icon-color:var(\n    --md-filled-tonal-icon-button-focus-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_focus-state-layer-color:var(\n    --md-filled-tonal-icon-button-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_focus-state-layer-opacity:var(\n    --md-filled-tonal-icon-button-focus-state-layer-opacity,0.12\n  );--_hover-icon-color:var(\n    --md-filled-tonal-icon-button-hover-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_hover-state-layer-color:var(\n    --md-filled-tonal-icon-button-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_hover-state-layer-opacity:var(\n    --md-filled-tonal-icon-button-hover-state-layer-opacity,0.08\n  );--_icon-color:var(\n    --md-filled-tonal-icon-button-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_icon-size:var(--md-filled-tonal-icon-button-icon-size,24px);--_pressed-icon-color:var(\n    --md-filled-tonal-icon-button-pressed-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_pressed-state-layer-color:var(\n    --md-filled-tonal-icon-button-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_pressed-state-layer-opacity:var(\n    --md-filled-tonal-icon-button-pressed-state-layer-opacity,0.12\n  );--_selected-container-color:var(\n    --md-filled-tonal-icon-button-selected-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_toggle-selected-focus-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-focus-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-selected-focus-state-layer-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-selected-hover-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-hover-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-selected-hover-state-layer-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-selected-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-selected-pressed-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-pressed-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-selected-pressed-state-layer-color:var(\n    --md-filled-tonal-icon-button-toggle-selected-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_toggle-unselected-focus-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-focus-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_toggle-unselected-focus-state-layer-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-focus-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_toggle-unselected-hover-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-hover-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_toggle-unselected-hover-state-layer-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-hover-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_toggle-unselected-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_toggle-unselected-pressed-icon-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-pressed-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_toggle-unselected-pressed-state-layer-color:var(\n    --md-filled-tonal-icon-button-toggle-unselected-pressed-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-container-color:var(\n    --md-filled-tonal-icon-button-unselected-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_container-shape-start-start:var(\n    --md-filled-tonal-icon-button-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-filled-tonal-icon-button-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-filled-tonal-icon-button-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-filled-tonal-icon-button-container-shape-end-start,var(--_container-shape)\n  );--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);color:var(--_icon-color)}.mdc-tonal-icon-button:hover{color:var(--_hover-icon-color)}.mdc-tonal-icon-button:focus{color:var(--_focus-icon-color)}.mdc-tonal-icon-button:active{color:var(--_pressed-icon-color)}.mdc-tonal-icon-button:disabled{color:var(--_disabled-icon-color)}.mdc-tonal-icon-button:before{background-color:var(--_container-color);border-radius:inherit;content:\"\";inset:0;position:absolute;z-index:-1}.mdc-tonal-icon-button:disabled:before{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}.mdc-tonal-icon-button:disabled .icon{opacity:var(--_disabled-icon-opacity)}.mdc-tonal-icon-button.toggle-filled-tonal{--md-ripple-focus-color:var(--_toggle-unselected-focus-state-layer-color);--md-ripple-hover-color:var(--_toggle-unselected-hover-state-layer-color);--md-ripple-pressed-color:var(\n    --_toggle-unselected-pressed-state-layer-color\n  )}.mdc-tonal-icon-button.toggle-filled-tonal:not(:disabled){color:var(--_toggle-unselected-icon-color)}.mdc-tonal-icon-button.toggle-filled-tonal:not(:disabled):hover{color:var(--_toggle-unselected-hover-icon-color)}.mdc-tonal-icon-button.toggle-filled-tonal:not(:disabled):focus{color:var(--_toggle-unselected-focus-icon-color)}.mdc-tonal-icon-button.toggle-filled-tonal:not(:disabled):active{color:var(--_toggle-unselected-pressed-icon-color)}.mdc-tonal-icon-button.toggle-filled-tonal:not(:disabled):before{background-color:var(--_unselected-container-color)}.mdc-tonal-icon-button.selected{--md-ripple-focus-color:var(--_toggle-selected-focus-state-layer-color);--md-ripple-hover-color:var(--_toggle-selected-hover-state-layer-color);--md-ripple-pressed-color:var(--_toggle-selected-pressed-state-layer-color)}.mdc-tonal-icon-button.selected:not(:disabled){color:var(--_toggle-selected-icon-color)}.mdc-tonal-icon-button.selected:not(:disabled):hover{color:var(--_toggle-selected-hover-icon-color)}.mdc-tonal-icon-button.selected:not(:disabled):focus{color:var(--_toggle-selected-focus-icon-color)}.mdc-tonal-icon-button.selected:not(:disabled):active{color:var(--_toggle-selected-pressed-icon-color)}.mdc-tonal-icon-button.selected:not(:disabled):before{background-color:var(--_selected-container-color)}.mdc-outlined-icon-button{--_disabled-icon-color:var(\n    --md-outlined-icon-button-disabled-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-icon-opacity:var(\n    --md-outlined-icon-button-disabled-icon-opacity,0.38\n  );--_disabled-selected-container-color:var(\n    --md-outlined-icon-button-disabled-selected-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-selected-container-opacity:var(\n    --md-outlined-icon-button-disabled-selected-container-opacity,0.12\n  );--_disabled-unselected-outline-color:var(\n    --md-outlined-icon-button-disabled-unselected-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-unselected-outline-opacity:var(\n    --md-outlined-icon-button-disabled-unselected-outline-opacity,0.12\n  );--_focus-state-layer-opacity:var(\n    --md-outlined-icon-button-focus-state-layer-opacity,0.08\n  );--_hover-state-layer-opacity:var(\n    --md-outlined-icon-button-hover-state-layer-opacity,0.08\n  );--_icon-size:var(--md-outlined-icon-button-icon-size,24px);--_pressed-state-layer-opacity:var(\n    --md-outlined-icon-button-pressed-state-layer-opacity,0.12\n  );--_selected-container-color:var(\n    --md-outlined-icon-button-selected-container-color,var(--md-sys-color-inverse-surface,#322f35)\n  );--_selected-focus-icon-color:var(\n    --md-outlined-icon-button-selected-focus-icon-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_selected-focus-state-layer-color:var(\n    --md-outlined-icon-button-selected-focus-state-layer-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_selected-hover-icon-color:var(\n    --md-outlined-icon-button-selected-hover-icon-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_selected-hover-state-layer-color:var(\n    --md-outlined-icon-button-selected-hover-state-layer-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_selected-icon-color:var(\n    --md-outlined-icon-button-selected-icon-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_selected-pressed-icon-color:var(\n    --md-outlined-icon-button-selected-pressed-icon-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_selected-pressed-state-layer-color:var(\n    --md-outlined-icon-button-selected-pressed-state-layer-color,var(--md-sys-color-inverse-on-surface,#f5eff7)\n  );--_unselected-focus-icon-color:var(\n    --md-outlined-icon-button-unselected-focus-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-focus-state-layer-color:var(\n    --md-outlined-icon-button-unselected-focus-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-hover-icon-color:var(\n    --md-outlined-icon-button-unselected-hover-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-hover-state-layer-color:var(\n    --md-outlined-icon-button-unselected-hover-state-layer-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-icon-color:var(\n    --md-outlined-icon-button-unselected-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-outline-color:var(\n    --md-outlined-icon-button-unselected-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_unselected-outline-width:var(\n    --md-outlined-icon-button-unselected-outline-width,1px\n  );--_unselected-pressed-icon-color:var(\n    --md-outlined-icon-button-unselected-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-state-layer-color:var(\n    --md-outlined-icon-button-unselected-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_container-shape-start-start:var(\n    --md-outlined-icon-button-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-outlined-icon-button-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-outlined-icon-button-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-outlined-icon-button-container-shape-end-start,var(--_container-shape)\n  )}.mdc-outlined-icon-button.outlined{--md-ripple-focus-color:var(--_unselected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_unselected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_unselected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);background-color:transparent;color:var(--_unselected-icon-color)}.mdc-outlined-icon-button.outlined:before{border-color:var(--_unselected-outline-color);border-width:var(--_unselected-outline-width)}.mdc-outlined-icon-button.outlined:hover{color:var(--_unselected-hover-icon-color)}.mdc-outlined-icon-button.outlined:focus{color:var(--_unselected-focus-icon-color)}.mdc-outlined-icon-button.outlined:active{color:var(--_unselected-pressed-icon-color)}.mdc-outlined-icon-button.outlined:disabled{color:var(--_disabled-icon-color)}.mdc-outlined-icon-button.outlined:disabled:before{border-color:var(--_disabled-unselected-outline-color);opacity:var(--_disabled-unselected-outline-opacity)}.mdc-outlined-icon-button.outlined:disabled .icon{opacity:var(--_disabled-icon-opacity)}.mdc-outlined-icon-button.outlined:before{block-size:100%;border-radius:inherit;border-style:solid;box-sizing:border-box;content:\"\";inline-size:100%;inset:0;pointer-events:none;position:absolute;z-index:-1}.mdc-outlined-icon-button.outlined.selected:before{border-width:0}.mdc-outlined-icon-button.selected{--md-ripple-focus-color:var(--_selected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity)}.mdc-outlined-icon-button.selected:not(:disabled){color:var(--_selected-icon-color)}.mdc-outlined-icon-button.selected:not(:disabled):hover{color:var(--_selected-hover-icon-color)}.mdc-outlined-icon-button.selected:not(:disabled):focus{color:var(--_selected-focus-icon-color)}.mdc-outlined-icon-button.selected:not(:disabled):active{color:var(--_selected-pressed-icon-color)}.mdc-outlined-icon-button.selected:not(:disabled):before{background-color:var(--_selected-container-color)}.mdc-outlined-icon-button.selected:disabled:before{background-color:var(--_disabled-selected-container-color);opacity:var(--_disabled-selected-container-opacity)}@media (forced-colors:active){.mdc-outlined-icon-button.selected:before{border-color:var(--_unselected-outline-color);border-width:var(--_unselected-outline-width)}.mdc-outlined-icon-button.selected:disabled:before{border-color:var(--_disabled-unselected-outline-color);opacity:var(--_disabled-unselected-outline-opacity)}}.md-standard-icon-button{--_selected-focus-icon-color:var(--md-sys-color-primary);--_selected-focus-state-layer-color:var(--md-sys-color-primary);--_selected-focus-state-layer-opacity:0.12;--_selected-hover-icon-color:var(--md-sys-color-primary);--_selected-hover-state-layer-color:var(--md-sys-color-primary);--_selected-hover-state-layer-opacity:0.08;--_selected-icon-color:var(--md-sys-color-primary);--_selected-pressed-icon-color:var(--md-sys-color-primary);--_selected-pressed-state-layer-color:var(--md-sys-color-primary);--_selected-pressed-state-layer-opacity:0.12;--_state-layer-shape:var(--md-icon-button-state-layer-shape,9999px);--_state-layer-size:var(--md-icon-button-state-layer-size,40px);--_unselected-focus-icon-color:var(--md-sys-color-on-surface-variant);--_unselected-focus-state-layer-color:var(--md-sys-color-on-surface-variant);--_unselected-focus-state-layer-opacity:0.12;--_unselected-hover-icon-color:var(--md-sys-color-on-surface-variant);--_unselected-hover-state-layer-color:var(--md-sys-color-on-surface-variant);--_unselected-hover-state-layer-opacity:0.08;--_unselected-icon-color:var(--md-sys-color-on-surface-variant);--_unselected-pressed-icon-color:var(--md-sys-color-on-surface-variant);--_unselected-pressed-state-layer-color:var(--md-sys-color-on-surface-variant);--_unselected-pressed-state-layer-opacity:0.12;--md-focus-ring-shape:var(--_state-layer-shape)}.md-standard-icon-button.standard{--md-ripple-focus-color:var(--_unselected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_unselected-focus-state-layer-opacity);--md-ripple-hover-color:var(--_unselected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_unselected-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_unselected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_unselected-pressed-state-layer-opacity);--md-ripple-shape:var(--_state-layer-shape);background-color:transparent;color:var(--_unselected-icon-color)}.md-standard-icon-button.standard:hover{color:var(--_unselected-hover-icon-color)}.md-standard-icon-button.standard:focus{color:var(--_unselected-focus-icon-color)}.md-standard-icon-button.standard:active{color:var(--_unselected-pressed-icon-color)}.md-standard-icon-button.standard:disabled{color:var(--_disabled-icon-color)}.md-standard-icon-button.standard:disabled .icon{opacity:var(--_disabled-icon-opacity)}.md-standard-icon-button.selected{--md-ripple-focus-color:var(--_selected-focus-state-layer-color);--md-ripple-focus-opacity:var(--_selected-focus-state-layer-opacity);--md-ripple-hover-color:var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity:var(--_selected-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_selected-pressed-state-layer-opacity)}.md-standard-icon-button.selected:not(:disabled){color:var(--_selected-icon-color)}.md-standard-icon-button.selected:not(:disabled):hover{color:var(--_selected-hover-icon-color)}.md-standard-icon-button.selected:not(:disabled):focus{color:var(--_selected-focus-icon-color)}.md-standard-icon-button.selected:not(:disabled):active{color:var(--_selected-pressed-icon-color)}";
styleInject(css_248z$i);

var IconButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var variant = _ref.variant,
    flipIcon = _ref.flipIcon,
    toggle = _ref.toggle,
    active = _ref.active,
    href = _ref.href,
    target = _ref.target,
    className = _ref.className,
    children = _ref.children,
    _onClick = _ref.onClick;
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var slots = useSlot(children);
  var $el = ref || React.useRef(null);
  var classNames = React.useMemo(function () {
    var _classnames;
    return classnames(CSS_CLASSES$a.ROOT, className, (_classnames = {}, _defineProperty(_classnames, 'flip-icon', flipIcon), _defineProperty(_classnames, 'selected', active || toggle && selected), _defineProperty(_classnames, 'toggle-filled', variant === 'filled' && toggle), _defineProperty(_classnames, 'mdc-filled-icon-button filled', variant === 'filled'), _defineProperty(_classnames, 'mdc-tonal-icon-button filled-tonal', variant === 'tonal'), _defineProperty(_classnames, 'toggle-filled-tonal', variant === 'tonal' && toggle), _defineProperty(_classnames, 'mdc-outlined-icon-button outlined', variant === 'outlined'), _defineProperty(_classnames, 'md-standard-icon-button standard', variant !== 'filled' && variant !== 'outlined' && variant !== 'tonal'), _classnames));
  }, [selected, active]);
  var isStringChildren = React.useMemo(function () {
    return ! /*#__PURE__*/React.isValidElement(children);
  }, [children]);
  var props = {
    className: classNames,
    onClick: function onClick(e) {
      setSelected(!selected);
      _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);
    },
    ref: $el
  };
  var content = jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, {
    children: [jsxRuntime.exports.jsx(Focus, {
      parent: $el
    }), jsxRuntime.exports.jsx(Ripple, {
      parent: $el
    }), isStringChildren ? jsxRuntime.exports.jsx(Icon, {
      children: children
    }) : jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {
      children: !selected ? jsxRuntime.exports.jsx("span", {
        children: slots['leadingicon']
      }) : jsxRuntime.exports.jsx("span", {
        className: "icon icon--selected",
        children: slots['selectedIcon'] || slots['leadingicon']
      })
    }), jsxRuntime.exports.jsx("span", {
      className: "touch"
    }), href ? jsxRuntime.exports.jsx("a", {
      className: "link",
      href: href,
      target: target
    }) : null]
  });
  return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {
    children: href ? jsxRuntime.exports.jsx("div", _objectSpread2(_objectSpread2({}, props), {}, {
      children: isStringChildren ? content : slots.children + content
    })) : jsxRuntime.exports.jsx("button", _objectSpread2(_objectSpread2({}, props), {}, {
      children: isStringChildren ? content : slots.children + content
    }))
  });
});

var CSS_CLASSES$9 = {
  ROOT: 'mdc-button',
  FILLED: 'mdc-filled-button',
  OUTLINED: 'mdc-outlined-button',
  TEXT: 'mdc-text-button',
  ELEVATION: 'mdc-button--elevation',
  ELEVATED: 'mdc-elevated-button',
  TONAL: 'mdc-tonal-button'
};

var css_248z$h = ".mdc-button{--_container-height:40px;--_container-shape:9999px;--_container-shape-start-start:20px;--_container-shape-start-end:20px;--_container-shape-end-end:20px;--_container-shape-end-start:20px;--_disabled-container-opacity:0.12;--_disabled-container-color:var(--md-sys-color-on-surface);--_label-text-type:var(--md-sys-typescale-label-large);--_label-text-color:var(--md-sys-color-primary);--_hover-label-text-color:var(--md-sys-color-primary);--_focus-label-text-color:var(--md-sys-color-primary);--_pressed-label-text-color:var(--md-sys-color-primary);--_disabled-label-text-color:var(--md-sys-color-on-surface);--_disabled-label-text-opacity:0.38;--_spacing-leading:24px;--_spacing-trailing:24px;--_with-icon-disabled-icon-color:var(--md-sys-color-on-surface);--_with-icon-disabled-icon-opacity:0.38;--_with-icon-focus-icon-color:var(--md-sys-color-primary);--_with-icon-hover-icon-color:var(--md-sys-color-primary);--_with-icon-icon-color:var(--md-sys-color-primary);--_with-icon-icon-size:18px;--_with-icon-pressed-icon-color:var(--md-sys-color-primary);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);--md-focus-ring-shape-start-start:var(--_container-shape-start-start);--md-focus-ring-shape-start-end:var(--_container-shape-start-end);--md-focus-ring-shape-end-end:var(--_container-shape-end-end);--md-focus-ring-shape-end-start:var(--_container-shape-end-start);-webkit-padding-start:var(--_spacing-leading);-webkit-padding-end:var(--_spacing-trailing);align-items:center;-webkit-appearance:none;background:transparent;block-size:var(--_container-height);border:none;box-sizing:border-box;color:var(--_label-text-color);display:inline-flex;font:var(--_label-text-type);gap:8px;justify-content:center;outline:none;overflow:hidden;padding-inline-end:var(--_spacing-trailing);padding-inline-start:var(--_spacing-leading);position:relative;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle;z-index:0}.mdc-button.disabled{cursor:default;pointer-events:none}.mdc-button:before{background-color:var(--_container-color);border-radius:inherit;content:\"\";inset:0;position:absolute}.mdc-button::-moz-focus-inner{border:0;padding:0}.mdc-button:hover{color:var(--_hover-label-text-color);cursor:pointer}.mdc-button:focus{color:var(--_focus-label-text-color)}.mdc-button:active{color:var(--_pressed-label-text-color);outline:none}.mdc-button .md3-button__label{position:relative}.mdc-button:disabled .md3-button__label{color:var(--_disabled-label-text-color);opacity:var(--_disabled-label-text-opacity)}.mdc-button:disabled:before{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}@media (forced-colors:active){.mdc-button:before{border:1px solid transparent;border-radius:inherit;box-sizing:border-box;content:\"\";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}}.mdc-button,.mdc-button .md3-button__ripple{border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start)}.mdc-button .md3-button__ripple,.mdc-button .mdc-elevation,.mdc-button:after,.mdc-button:before{z-index:-1}.mdc-button .md3-button--icon-leading{-webkit-padding-start:var(--_with-icon-spacing-leading);-webkit-padding-end:var(--_with-icon-spacing-trailing);padding-inline-end:var(--_with-icon-spacing-trailing);padding-inline-start:var(--_with-icon-spacing-leading)}.mdc-button .md3-button--icon-trailing{-webkit-padding-start:var(--_with-trailing-icon-spacing-leading);-webkit-padding-end:var(--_with-trailing-icon-spacing-trailing);padding-inline-end:var(--_with-trailing-icon-spacing-trailing);padding-inline-start:var(--_with-trailing-icon-spacing-leading)}.mdc-button .md3-link-button-wrapper{inline-size:100%}.mdc-button .mdc-icon{fill:currentColor;align-items:center;block-size:var(--_with-icon-icon-size);color:var(--_label-text-color);display:inline-flex;font-size:var(--_with-icon-icon-size);inline-size:var(--_with-icon-icon-size);justify-content:center;position:relative;writing-mode:horizontal-tb}.mdc-button:hover .mdc-icon{color:var(--_hover-label-text-color)}.mdc-button:focus .mdc-icon{color:var(--_with-icon-focus-icon-color)}.mdc-button:active .mdc-icon{color:var(--_with-icon-pressed-icon-color)}.mdc-button:disabled .mdc-icon{color:var(--_with-icon-disabled-icon-color);opacity:var(--_with-icon-disabled-icon-opacity)}.mdc-button .md3-button__touch{height:48px;left:0;position:absolute;right:0;top:50%;transform:translateY(-50%)}.mdc-filled-button{--md-filled-button-container-shape-start-start:12px;--md-filled-button-container-shape-start-end:12px;--md-filled-button-container-shape-end-end:12px;--md-filled-button-container-shape-end-start:12px;--md-filled-button-container-shape:8px;--_container-color:var(--md-sys-color-primary);--_container-elevation:var(--md-filled-button-container-elevation,0);--_container-shadow-color:var(--md-sys-color-shadow);--_disabled-container-elevation:var(\n    --md-filled-button-disabled-container-elevation,0\n  );--_focus-container-elevation:var(\n    --md-filled-button-focus-container-elevation,0\n  );--_focus-label-text-color:var(--md-sys-color-on-primary);--_focus-state-layer-color:var(\n    --md-filled-button-focus-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_hover-container-elevation:var(\n    --md-filled-button-hover-container-elevation,1\n  );--_hover-label-text-color:var(\n    --md-filled-button-hover-label-text-color,var(--md-sys-color-on-primary,#fff)\n  );--_hover-state-layer-color:var(\n    --md-filled-button-hover-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_label-text-color:var(\n    --md-filled-button-label-text-color,var(--md-sys-color-on-primary,#fff)\n  );--_pressed-container-elevation:var(\n    --md-filled-button-pressed-container-elevation,0\n  );--_pressed-label-text-color:var(--md-sys-color-on-primary);--_pressed-state-layer-color:var(\n    --md-filled-button-pressed-state-layer-color,var(--md-sys-color-on-primary,#fff)\n  );--_with-icon-icon-color:var(\n    --md-filled-button-with-icon-icon-color,var(--md-sys-color-on-primary,#fff)\n  )}.mdc-outlined-button{--_disabled-outline-color:var(--md-sys-color-on-surface);--_focus-outline-color:var(--md-sys-color-primary);--_hover-outline-color:var(\n    --md-outlined-button-hover-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_hover-state-layer-color:var(--md-sys-color-primary);--_outline-color:var(\n    --md-outlined-button-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_outline-width:var(--md-outlined-button-outline-width,1px);--_pressed-outline-color:var(\n    --md-outlined-button-pressed-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_pressed-state-layer-color:var(\n    --md-outlined-button-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  )}.mdc-outlined-button .md3-button__outline{border-color:var(--_outline-color);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start);border-style:solid;box-sizing:border-box;inset:0;position:absolute}.mdc-outlined-button:active .md3-button__outline{border-color:var(--_pressed-outline-color)}.mdc-outlined-button:disabled .md3-button__outline{border-color:var(--_disabled-outline-color);opacity:var(--_disabled-outline-opacity)}.mdc-outlined-button .md3-button__outline,.mdc-outlined-button .md3-button__ripple{border-width:var(--_outline-width)}.mdc-outlined-button .md3-button__ripple{block-size:calc(100% - var(--_outline-width)*2);border-color:transparent;border-style:solid;inline-size:calc(100% - var(--_outline-width)*2)}.mdc-text-button{--_disabled-label-text-color:var(\n    --md-text-button-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-color:var(\n    --md-text-button-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-color:var(\n    --md-text-button-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_spacing-leading:12px;--_spacing-trailing:12px;--_with-icon-spacing-leading:12px;--_with-icon-spacing-trailing:16px;--_with-trailing-icon-spacing-leading:16px;--_with-trailing-icon-spacing-trailing:12px;--_container-color:none;--_disabled-container-color:none;--_disabled-container-opacity:0}.mdc-tonal-button{--_container-color:var(--md-sys-color-secondary-container);--_container-elevation:var(--md-tonal-button-container-elevation,0);--_container-shadow-color:var(--md-sys-color-shadow);--_focus-container-elevation:var(\n    --md-tonal-button-focus-container-elevation,0\n  );--_focus-label-text-color:var(--md-sys-color-on-secondary-container);--_focus-state-layer-color:var(\n    --md-tonal-button-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_hover-container-elevation:var(\n    --md-tonal-button-hover-container-elevation,1\n  );--_hover-label-text-color:var(\n    --md-tonal-button-hover-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_hover-state-layer-color:var(\n    --md-tonal-button-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_label-text-color:var(\n    --md-tonal-button-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_pressed-container-elevation:var(\n    --md-tonal-button-pressed-container-elevation,0\n  );--_pressed-label-text-color:var(--md-sys-color-on-secondary-container);--_pressed-state-layer-color:var(\n    --md-tonal-button-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_with-icon-focus-icon-color:var(--md-sys-color-on-secondary-container);--_with-icon-hover-icon-color:var(--md-sys-color-on-secondary-container);--_with-icon-icon-color:var(--md-sys-color-on-secondary-container);--_with-icon-pressed-icon-color:var(--md-sys-color-on-secondary-container)}.mdc-button--elevation{--md-elevation-level:var(--_container-elevation);--md-elevation-shadow-color:var(--_container-shadow-color)}.mdc-button--elevation .mdc-elevation{transition-duration:.28s}.mdc-button--elevation:focus{--md-elevation-level:var(--_focus-container-elevation)}.mdc-button--elevation:hover{--md-elevation-level:var(--_hover-container-elevation)}.mdc-button--elevation:active{--md-elevation-level:var(--_pressed-container-elevation)}.mdc-button--elevation:disabled{--md-elevation-level:var(--_disabled-container-elevation)}.mdc-elevated-button{--_container-color:var(--md-sys-color-surface-container-low);--_container-elevation:var(--md-elevated-button-container-elevation,1);--_container-shadow-color:var(--md-sys-color-shadow);--_disabled-container-elevation:var(\n    --md-elevated-button-disabled-container-elevation,0\n  );--_focus-container-elevation:var(\n    --md-elevated-button-focus-container-elevation,1\n  );--_hover-container-elevation:var(\n    --md-elevated-button-hover-container-elevation,2\n  );--_hover-state-layer-color:var(\n    --md-elevated-button-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-container-elevation:var(\n    --md-elevated-button-pressed-container-elevation,1\n  );--_pressed-state-layer-color:var(\n    --md-elevated-button-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  )}";
styleInject(css_248z$h);

var Button = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var multiple = _ref.multiple,
    type = _ref.type,
    variant = _ref.variant,
    className = _ref.className,
    disabled = _ref.disabled,
    active = _ref.active,
    href = _ref.href,
    target = _ref.target,
    children = _ref.children,
    onClick = _ref.onClick;
  var $el = ref || React.useRef(null);
  var slots = useSlot(children);
  var classNames = classnames(CSS_CLASSES$9.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$9.FILLED, variant === 'filled'), _defineProperty(_classnames, CSS_CLASSES$9.OUTLINED, variant === 'outlined'), _defineProperty(_classnames, CSS_CLASSES$9.ELEVATED, variant === 'elevated'), _defineProperty(_classnames, CSS_CLASSES$9.TONAL, variant === 'tonal'), _defineProperty(_classnames, CSS_CLASSES$9.TEXT, type === 'link'), _defineProperty(_classnames, CSS_CLASSES$9.ELEVATION, variant === 'filled' || variant === 'elevated' || variant === 'tonal'), _defineProperty(_classnames, 'md3-button--icon-leading', slots['leadingicon']), _defineProperty(_classnames, 'md3-button--icon-trailing', slots['trailingicon']), _classnames));
  var isDisabled = disabled && !href;
  var props = {
    className: classNames,
    disabled: isDisabled,
    ref: $el,
    onClick: onClick,
    active: active
  };
  var content = jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, {
    children: [jsxRuntime.exports.jsx(Focus, {
      parent: $el
    }), jsxRuntime.exports.jsx(Elevation, {}), type || variant ? jsxRuntime.exports.jsx(Ripple, {
      parent: $el,
      className: "md3-button__ripple"
    }) : null, variant === 'outlined' ? jsxRuntime.exports.jsx("span", {
      className: "md3-button__outline"
    }) : null, jsxRuntime.exports.jsx("span", {
      className: "md3-button__touch"
    }), slots['leadingicon'], slots['children'].length ? jsxRuntime.exports.jsx("span", {
      className: "md3-button__label",
      children: slots['children']
    }) : null, slots['trailingicon']]
  });
  function renderBaseBtn() {
    return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {
      children: href ? jsxRuntime.exports.jsx("a", _objectSpread2(_objectSpread2({}, props), {}, {
        href: href,
        target: target,
        children: content
      })) : jsxRuntime.exports.jsx("button", _objectSpread2(_objectSpread2({}, props), {}, {
        type: "button",
        children: content
      }))
    });
  }
  return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, {
    children: [type === 'segment' ? jsxRuntime.exports.jsx(SegmentedButtonSet, _objectSpread2(_objectSpread2({
      multiple: multiple
    }, props), {}, {
      children: children
    })) : null, type === 'icon' ? jsxRuntime.exports.jsx(IconButton, _objectSpread2(_objectSpread2({
      variant: variant
    }, props), {}, {
      children: children
    })) : null, type !== 'segment' && type !== 'icon' ? renderBaseBtn() : null]
  });
});
Button.Item = SegmentedButton;
Button.displayName = 'Button';

var CSS_CLASSES$8 = {
  ROOT: 'mdc-fab',
  LARGE: 'large'
};

var css_248z$g = ".mdc-fab{--_container-color:var(\n    --md-fab-container-color,var(--md-sys-color-surface-container-high,#ece6f0)\n  );--_container-elevation:var(--md-fab-container-elevation,3);--_container-height:var(--md-fab-container-height,56px);--_container-shadow-color:var(\n    --md-fab-container-shadow-color,var(--md-sys-color-shadow,#000)\n  );--_container-shape:var(--md-fab-container-shape,16px);--_container-width:var(--md-fab-container-width,56px);--_focus-container-elevation:var(--md-fab-focus-container-elevation,3);--_focus-icon-color:var(\n    --md-fab-focus-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-state-layer-color:var(\n    --md-fab-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-state-layer-opacity:var(--md-fab-focus-state-layer-opacity,0.12);--_hover-container-elevation:var(--md-fab-hover-container-elevation,4);--_hover-icon-color:var(\n    --md-fab-hover-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-state-layer-color:var(\n    --md-fab-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-state-layer-opacity:var(--md-fab-hover-state-layer-opacity,0.08);--_icon-color:var(--md-fab-icon-color,var(--md-sys-color-primary,#6750a4));--_icon-size:var(--md-fab-icon-size,24px);--_lowered-container-color:var(\n    --md-fab-lowered-container-color,var(--md-sys-color-surface-container-low,#f7f2fa)\n  );--_lowered-container-elevation:var(--md-fab-lowered-container-elevation,1);--_lowered-focus-container-elevation:var(\n    --md-fab-lowered-focus-container-elevation,1\n  );--_lowered-hover-container-elevation:var(\n    --md-fab-lowered-hover-container-elevation,2\n  );--_lowered-pressed-container-elevation:var(\n    --md-fab-lowered-pressed-container-elevation,1\n  );--_pressed-container-elevation:var(--md-fab-pressed-container-elevation,3);--_pressed-icon-color:var(\n    --md-fab-pressed-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-color:var(\n    --md-fab-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-opacity:var(\n    --md-fab-pressed-state-layer-opacity,0.12\n  );--_focus-label-text-color:var(\n    --md-fab-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-label-text-color:var(\n    --md-fab-hover-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_label-text-color:var(\n    --md-fab-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_label-text-type:var(\n    --md-fab-label-text-type,var(\n      --md-sys-typescale-label-large,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_large-container-height:var(--md-fab-large-container-height,96px);--_large-container-shape:var(--md-fab-large-container-shape,28px);--_large-container-width:var(--md-fab-large-container-width,96px);--_large-icon-size:var(--md-fab-large-icon-size,36px);--_pressed-label-text-color:var(\n    --md-fab-pressed-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_primary-container-color:var(\n    --md-fab-primary-container-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_primary-focus-icon-color:var(\n    --md-fab-primary-focus-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-focus-label-text-color:var(\n    --md-fab-primary-focus-label-text-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-focus-state-layer-color:var(\n    --md-fab-primary-focus-state-layer-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-hover-icon-color:var(\n    --md-fab-primary-hover-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-hover-label-text-color:var(\n    --md-fab-primary-hover-label-text-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-hover-state-layer-color:var(\n    --md-fab-primary-hover-state-layer-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-icon-color:var(\n    --md-fab-primary-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-label-text-color:var(\n    --md-fab-primary-label-text-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-pressed-icon-color:var(\n    --md-fab-primary-pressed-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-pressed-label-text-color:var(\n    --md-fab-primary-pressed-label-text-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_primary-pressed-state-layer-color:var(\n    --md-fab-primary-pressed-state-layer-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_secondary-container-color:var(\n    --md-fab-secondary-container-color,var(--md-sys-color-secondary-container,#e8def8)\n  );--_secondary-focus-icon-color:var(\n    --md-fab-secondary-focus-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-focus-label-text-color:var(\n    --md-fab-secondary-focus-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-focus-state-layer-color:var(\n    --md-fab-secondary-focus-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-hover-icon-color:var(\n    --md-fab-secondary-hover-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-hover-label-text-color:var(\n    --md-fab-secondary-hover-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-hover-state-layer-color:var(\n    --md-fab-secondary-hover-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-icon-color:var(\n    --md-fab-secondary-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-label-text-color:var(\n    --md-fab-secondary-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-pressed-icon-color:var(\n    --md-fab-secondary-pressed-icon-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-pressed-label-text-color:var(\n    --md-fab-secondary-pressed-label-text-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_secondary-pressed-state-layer-color:var(\n    --md-fab-secondary-pressed-state-layer-color,var(--md-sys-color-on-secondary-container,#1d192b)\n  );--_small-container-height:var(--md-fab-small-container-height,40px);--_small-container-shape:var(--md-fab-small-container-shape,12px);--_small-container-width:var(--md-fab-small-container-width,40px);--_small-icon-size:var(--md-fab-small-icon-size,24px);--_tertiary-container-color:var(\n    --md-fab-tertiary-container-color,var(--md-sys-color-tertiary-container,#ffd8e4)\n  );--_tertiary-focus-icon-color:var(\n    --md-fab-tertiary-focus-icon-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-focus-label-text-color:var(\n    --md-fab-tertiary-focus-label-text-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-focus-state-layer-color:var(\n    --md-fab-tertiary-focus-state-layer-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-hover-icon-color:var(\n    --md-fab-tertiary-hover-icon-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-hover-label-text-color:var(\n    --md-fab-tertiary-hover-label-text-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-hover-state-layer-color:var(\n    --md-fab-tertiary-hover-state-layer-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-icon-color:var(\n    --md-fab-tertiary-icon-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-label-text-color:var(\n    --md-fab-tertiary-label-text-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-pressed-icon-color:var(\n    --md-fab-tertiary-pressed-icon-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-pressed-label-text-color:var(\n    --md-fab-tertiary-pressed-label-text-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_tertiary-pressed-state-layer-color:var(\n    --md-fab-tertiary-pressed-state-layer-color,var(--md-sys-color-on-tertiary-container,#31111d)\n  );--_container-shape-start-start:var(\n    --md-fab-container-shape-start-start,var(--_container-shape)\n  );--_container-shape-start-end:var(\n    --md-fab-container-shape-start-end,var(--_container-shape)\n  );--_container-shape-end-end:var(\n    --md-fab-container-shape-end-end,var(--_container-shape)\n  );--_container-shape-end-start:var(\n    --md-fab-container-shape-end-start,var(--_container-shape)\n  );--_large-container-shape-start-start:var(\n    --md-fab-large-container-shape-start-start,var(--_large-container-shape)\n  );--_large-container-shape-start-end:var(\n    --md-fab-large-container-shape-start-end,var(--_large-container-shape)\n  );--_large-container-shape-end-end:var(\n    --md-fab-large-container-shape-end-end,var(--_large-container-shape)\n  );--_large-container-shape-end-start:var(\n    --md-fab-large-container-shape-end-start,var(--_large-container-shape)\n  );--_small-container-shape-start-start:var(\n    --md-fab-small-container-shape-start-start,var(--_small-container-shape)\n  );--_small-container-shape-start-end:var(\n    --md-fab-small-container-shape-start-end,var(--_small-container-shape)\n  );--_small-container-shape-end-end:var(\n    --md-fab-small-container-shape-end-end,var(--_small-container-shape)\n  );--_small-container-shape-end-start:var(\n    --md-fab-small-container-shape-end-start,var(--_small-container-shape)\n  )}.fab .icon ::slotted(*){color:var(--_icon-color)}.fab:focus{color:var(--_focus-icon-color)}.fab:hover{color:var(--_hover-icon-color)}.fab:active{color:var(--_pressed-icon-color)}.fab.primary{--md-ripple-hover-color:var(--_primary-hover-state-layer-color);--md-ripple-focus-color:var(--_primary-focus-state-layer-color);--md-ripple-pressed-color:var(--_primary-pressed-state-layer-color);background-color:var(--_primary-container-color)}.fab.primary .icon ::slotted(*){color:var(--_primary-icon-color)}.fab.primary:focus{color:var(--_primary-focus-icon-color)}.fab.primary:hover{color:var(--_primary-hover-icon-color)}.fab.primary:active{color:var(--_primary-pressed-icon-color)}.fab.primary .label{color:var(--_primary-label-text-color)}.fab:hover .fab.primary .label{color:var(--_primary-hover-label-text-color)}.fab:focus .fab.primary .label{color:var(--_primary-focus-label-text-color)}.fab:active .fab.primary .label{color:var(--_primary-pressed-label-text-color)}.fab.secondary{--md-ripple-hover-color:var(--_secondary-hover-state-layer-color);--md-ripple-focus-color:var(--_secondary-focus-state-layer-color);--md-ripple-pressed-color:var(--_secondary-pressed-state-layer-color);background-color:var(--_secondary-container-color)}.fab.secondary .icon ::slotted(*){color:var(--_secondary-icon-color)}.fab.secondary:focus{color:var(--_secondary-focus-icon-color)}.fab.secondary:hover{color:var(--_secondary-hover-icon-color)}.fab.secondary:active{color:var(--_secondary-pressed-icon-color)}.fab.secondary .label{color:var(--_secondary-label-text-color)}.fab:hover .fab.secondary .label{color:var(--_secondary-hover-label-text-color)}.fab:focus .fab.secondary .label{color:var(--_secondary-focus-label-text-color)}.fab:active .fab.secondary .label{color:var(--_secondary-pressed-label-text-color)}.fab.tertiary{--md-ripple-hover-color:var(--_tertiary-hover-state-layer-color);--md-ripple-focus-color:var(--_tertiary-focus-state-layer-color);--md-ripple-pressed-color:var(--_tertiary-pressed-state-layer-color);background-color:var(--_tertiary-container-color)}.fab.tertiary .icon ::slotted(*){color:var(--_tertiary-icon-color)}.fab.tertiary:focus{color:var(--_tertiary-focus-icon-color)}.fab.tertiary:hover{color:var(--_tertiary-hover-icon-color)}.fab.tertiary:active{color:var(--_tertiary-pressed-icon-color)}.fab.tertiary .label{color:var(--_tertiary-label-text-color)}.fab:hover .fab.tertiary .label{color:var(--_tertiary-hover-label-text-color)}.fab:focus .fab.tertiary .label{color:var(--_tertiary-focus-label-text-color)}.fab:active .fab.tertiary .label{color:var(--_tertiary-pressed-label-text-color)}.fab.small{height:var(--_small-container-height);width:var(--_small-container-width)}.fab.small .icon ::slotted(*){font-size:var(--_small-icon-size);height:var(--_small-icon-size);width:var(--_small-icon-size)}.fab.small,.fab.small .ripple{--md-focus-ring-shape-start-start:var(--_small-container-shape-start-start);--md-focus-ring-shape-start-end:var(--_small-container-shape-start-end);--md-focus-ring-shape-end-end:var(--_small-container-shape-end-end);--md-focus-ring-shape-end-start:var(--_small-container-shape-end-start);border-end-end-radius:var(--_small-container-shape-end-end);border-end-start-radius:var(--_small-container-shape-end-start);border-start-end-radius:var(--_small-container-shape-start-end);border-start-start-radius:var(--_small-container-shape-start-start)}@media (forced-colors:active){.fab{--md-focus-ring-outward-offset:3px;border:1px solid ButtonText}.fab.extended{-webkit-padding-start:15px;-webkit-padding-end:19px;padding-inline-end:19px;padding-inline-start:15px}}:host{--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);display:inline-flex}.fab,.icon,.icon ::slotted(*){display:flex}.fab{--md-elevation-level:var(--_container-elevation);--md-elevation-shadow-color:var(--_container-shadow-color);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-pressed-color:var(--_pressed-state-layer-color);align-items:center;background-color:var(--_container-color);border-width:0;height:var(--_container-height);justify-content:center;outline:none;padding:0;position:relative;transition-property:background-color;vertical-align:middle;z-index:0}.fab.extended{-webkit-padding-start:16px;-webkit-padding-end:20px;box-sizing:border-box;padding-inline-end:20px;padding-inline-start:16px;width:inherit}.fab:not(.extended){width:var(--_container-width)}.fab.large{height:var(--_large-container-height);width:var(--_large-container-width)}.fab.large .icon ::slotted(*){font-size:var(--_large-icon-size);height:var(--_large-icon-size);width:var(--_large-icon-size)}.fab.large,.fab.large .ripple{--md-focus-ring-shape-start-start:var(--_large-container-shape-start-start);--md-focus-ring-shape-start-end:var(--_large-container-shape-start-end);--md-focus-ring-shape-end-end:var(--_large-container-shape-end-end);--md-focus-ring-shape-end-start:var(--_large-container-shape-end-start);border-end-end-radius:var(--_large-container-shape-end-end);border-end-start-radius:var(--_large-container-shape-end-start);border-start-end-radius:var(--_large-container-shape-start-end);border-start-start-radius:var(--_large-container-shape-start-start)}.fab:focus{--md-elevation-level:var(--_focus-container-elevation)}.fab:hover{--md-elevation-level:var(--_hover-container-elevation)}.fab:active{--md-elevation-level:var(--_pressed-container-elevation)}.fab.lowered{--md-elevation-level:var(--_lowered-container-elevation);background-color:var(--_lowered-container-color)}.fab.lowered:focus{--md-elevation-level:var(--_lowered-focus-container-elevation)}.fab.lowered:hover{--md-elevation-level:var(--_lowered-hover-container-elevation)}.fab.lowered:active{--md-elevation-level:var(--_lowered-pressed-container-elevation)}.fab .label{color:var(--_label-text-color)}.fab:hover .fab .label{color:var(--_hover-label-text-color)}.fab:focus .fab .label{color:var(--_focus-label-text-color)}.fab:active .fab .label{color:var(--_pressed-label-text-color)}.label{-webkit-padding-start:12px;font:var(--_label-text-type);padding-inline-start:12px;text-overflow:ellipsis;white-space:nowrap}.label,.ripple{overflow:hidden}.ripple,md-elevation{z-index:-1}.touch-target{height:48px;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);width:48px}.fab,md-elevation{transition-duration:.28s;transition-timing-function:cubic-bezier(.2,0,0,1)}.fab,.ripple{--md-focus-ring-shape-start-start:var(--_container-shape-start-start);--md-focus-ring-shape-start-end:var(--_container-shape-start-end);--md-focus-ring-shape-end-end:var(--_container-shape-end-end);--md-focus-ring-shape-end-start:var(--_container-shape-end-start);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);border-start-end-radius:var(--_container-shape-start-end);border-start-start-radius:var(--_container-shape-start-start)}.icon ::slotted(*){font-size:var(--_icon-size);height:var(--_icon-size);width:var(--_icon-size)}";
styleInject(css_248z$g);

var FAB = function FAB(_ref) {
  var state = _ref.state,
    className = _ref.className,
    children = _ref.children;
  var classNames = classnames(CSS_CLASSES$8.ROOT, className, {
    'primary': state === 'primary',
    'secondary': state === 'secondary',
    'tertiary': state === 'tertiary'
  });
  return jsxRuntime.exports.jsx(Button, {
    className: classNames,
    children: children
  });
};

var CSS_CLASSES$7 = {
  ROOT: 'mdc-sort-button'
};

var css_248z$f = ".mdc-sort-button{display:inline-block;height:20px;width:20px}";
styleInject(css_248z$f);

var SortButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
    name = _ref.name,
    onChange = _ref.onChange;
  var _useState = React.useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var classNames = classnames(CSS_CLASSES$7.ROOT, className, {});
  function doClick(dir) {
    setSelected(dir);
    onChange === null || onChange === void 0 ? void 0 : onChange({
      dir: dir,
      name: name
    });
  }
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    ref: ref,
    children: [jsxRuntime.exports.jsx(Button, {
      type: "icon",
      onClick: function onClick() {
        return doClick('up');
      },
      active: selected === 'up',
      children: "keyboard_arrow_up"
    }), jsxRuntime.exports.jsx(Button, {
      type: "icon",
      onClick: function onClick() {
        return doClick('down');
      },
      active: selected === 'down',
      children: "keyboard_arrow_down"
    })]
  });
});

var CSS_CLASSES$6 = {
  ROOT: 'mdc-dialog'
};

var css_248z$e = ".mdc-dialog{--_container-color:var(\n    --md-dialog-container-color,var(--md-sys-color-surface-container-high,#ece6f0)\n  );--_container-elevation:var(--md-dialog-container-elevation,3);--_container-shape:var(--md-dialog-container-shape,28px);--_headline-color:var(\n    --md-dialog-headline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_headline-type:var(\n    --md-dialog-headline-type,var(\n      --md-sys-typescale-headline-small,400 1.5rem/2rem var(--md-ref-typeface-brand,Roboto)\n    )\n  );--_supporting-text-color:var(\n    --md-dialog-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_supporting-text-type:var(\n    --md-dialog-supporting-text-type,400 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n  );--_with-icon-icon-color:var(\n    --md-dialog-with-icon-icon-color,var(--md-sys-color-secondary,#625b71)\n  );--_with-icon-icon-size:var(--md-dialog-with-icon-icon-size,24px);--_container-max-inline-size:var(\n    --md-dialog-container-max-inline-size,min(560px,100% - 48px)\n  );--_container-min-inline-size:var(\n    --md-dialog-container-min-inline-size,280px\n  );--_container-max-block-size:var(\n    --md-dialog-container-max-block-size,min(560px,100% - 48px)\n  );--_container-min-block-size:var(--md-dialog-container-min-block-size,140px);--_container-inset-inline-start:var(\n    --md-dialog-container-inset-inline-start,auto\n  );--_container-inset-inline-end:var(\n    --md-dialog-container-inset-inline-end,auto\n  );--_container-inset-block-start:var(\n    --md-dialog-container-inset-block-start,auto\n  );--_container-inset-block-end:var(\n    --md-dialog-container-inset-block-end,auto\n  );--_opening-transition-duration:var(\n    --md-dialog-opening-transition-duration,400ms\n  );--_opening-transition-easing:var(\n    --md-dialog-opening-transition-easing,cubic-bezier(0.05,0.7,0.1,1)\n  );--_closing-transition-duration:var(\n    --md-dialog-closing-transition-duration,200ms\n  );--_closing-transition-easing:var(\n    --md-dialog-closing-transition-easing,cubic-bezier(0.3,0,0.8,0.15)\n  );--_scrim-color:var(--md-dialog-scrim-color,rgba(0,0,0,.32));--_container-block-padding:var(--md-dialog-container-block-padding,24px);--_container-inline-padding:var(--md-dialog-container-inline-padding,24px);--_header-spacing:var(--md-dialog-header-spacing,16px);--_action-spacing:var(--md-dialog-action-spacing,8px);--_content-block-start-spacing:var(\n    --md-dialog-content-block-start-spacing,16px\n  );--_content-block-end-spacing:var(\n    --md-dialog-content-block-end-spacing,24px\n  );--_with-divider-divider-height:var(\n    --md-dialog-with-divider-divider-height,1px\n  );--_with-divider-divider-color:var(\n    --md-dialog-with-divider-divider-color,var(--md-sys-color-outline,#79747e)\n  );--_fullscreen-header-block-size:var(\n    --md-dialog-fullscreen-header-block-size,56px\n  );--_fullscreen-footer-block-size:var(\n    --md-dialog-fullscreen-footer-block-size,56px\n  );--_fullscreen-container-block-padding:var(\n    --md-dialog-fullscreen-container-block-padding,8px\n  );--_container-drag-inline-start:initial;--_container-drag-block-start:initial;align-items:center;background:transparent;block-size:100dvh;border:none;box-sizing:border-box;inline-size:100dvw;inset:0;justify-content:center;margin:0;max-block-size:100dvh;max-inline-size:100dvw;overflow:clip;padding:0;position:fixed}.mdc-dialog:not(:modal){pointer-events:none;z-index:10000}.mdc-dialog[open]{display:flex}.mdc-dialog::backdrop{background:none}.mdc-dialog.hasMask:before{block-size:100dvh;content:\"\";inline-size:100dvw;inset:0;pointer-events:none;position:absolute;z-index:-1}.mdc-dialog .close{-webkit-padding-after:0;-webkit-padding-before:0;padding-block-end:0;padding-block-start:0;position:absolute;right:0;top:10px}.mdc-dialog .close:before{background-color:transparent}.mdc-dialog>.container{-webkit-padding-before:var(--_container-block-padding);-webkit-padding-after:var(--_container-block-padding);background-color:var(--_container-color);border-radius:var(--_container-shape);box-sizing:border-box;display:flex;flex-direction:column;inset-block-end:var(--_container-inset-block-end);inset-block-start:var(--_container-drag-block-start,var(--_container-inset-block-start));inset-inline-end:var(--_container-inset-inline-end);inset-inline-start:var(--_container-drag-inline-start,var(--_container-inset-inline-start));padding-block-end:var(--_container-block-padding);padding-block-start:var(--_container-block-padding);pointer-events:auto;position:relative}.mdc-dialog .mdc-elevation{--md-elevation-level:var(--_container-elevation)}.mdc-dialog>.container>*{-webkit-padding-start:var(--_container-inline-padding);-webkit-padding-end:var(--_container-inline-padding);box-sizing:border-box;padding-inline-end:var(--_container-inline-padding);padding-inline-start:var(--_container-inline-padding)}.mdc-dialog .header{-webkit-font-smoothing:antialiased;align-items:flex-start;color:var(--_headline-color);display:flex;flex-direction:column;font:var(--_headline-type);gap:var(--_header-spacing);position:relative}.mdc-dialog>.content{-webkit-margin-before:var(--_content-block-start-spacing);-webkit-margin-after:var(--_content-block-end-spacing);-webkit-font-smoothing:antialiased;color:var(--_supporting-text-color);flex:1;font:var(--_supporting-text-type);margin-block-end:var(--_content-block-end-spacing);margin-block-start:var(--_content-block-start-spacing);overflow:auto;position:relative}.mdc-dialog .footer{align-items:center;box-sizing:border-box;display:flex;flex-wrap:wrap;gap:var(--_action-spacing);justify-content:flex-end;position:relative}.mdc-dialog.footerHidden{--_content-block-end-spacing:0px}.mdc-dialog.footerHidden .footer{display:none}.mdc-dialog.stacked .footer{align-items:flex-end;flex-direction:column}.mdc-dialog.scrollable>.content{-webkit-border-before:var(--_with-divider-divider-height) solid transparent;-webkit-border-after:var(--_with-divider-divider-height) solid transparent;border-block-end:var(--_with-divider-divider-height) solid transparent;border-block-start:var(--_with-divider-divider-height) solid transparent}.mdc-dialog.scroll-divider-header>.content{border-block-start-color:var(--_with-divider-divider-color)}.mdc-dialog.scroll-divider-footer:not(.footerHidden)>.content{border-block-end-color:var(--_with-divider-divider-color)}.mdc-dialog .dragging{cursor:move;touch-action:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdc-dialog>.container{transition-property:transform}.mdc-dialog>.container,.mdc-dialog>.container>*{will-change:transform,opacity}.mdc-dialog>.container>*{opacity:0;transition-duration:inherit;transition-property:opacity,transform;transition-timing-function:inherit}.mdc-dialog.transition[open]>.container,.mdc-dialog.transition[open]>.container>*{opacity:1;transform:none}.mdc-dialog.hasMask:before{background-color:transparent;transition:background-color linear}.mdc-dialog.hasMask[open]:before{background-color:var(--_scrim-color)}.mdc-dialog.hasMask.opening:before{transition-duration:calc(var(--_opening-transition-duration)/2)}.mdc-dialog.hasMask.closing:before{transition-duration:calc(var(--_closing-transition-duration)/2)}.mdc-dialog.opening>.container{transition-duration:var(--_opening-transition-duration);transition-timing-function:var(--_opening-transition-easing)}.mdc-dialog.closing>.container{transition-duration:var(--_closing-transition-duration);transition-timing-function:var(--_closing-transition-easing)}.mdc-dialog.trasition.closing>.container>*{opacity:0;transform:none}.mdc-dialog.grow-down{--_opening-transform:scaleY(0.1) translateY(-20%);--_closing-transform:scaleY(0.9) translateY(-10%);--_origin:top;--_opening-content-transform:scaleY(2);--_origin-footer:bottom}.mdc-dialog.grow-up{--_opening-transform:scaleY(0.1) translateY(20%);--_closing-transform:scaleY(0.9) translateY(10%);--_origin:bottom;--_opening-content-transform:scaleY(2);--_origin-footer:bottom}.mdc-dialog.grow-left{--_opening-transform:scaleX(0.1) translateX(20%);--_closing-transform:scaleX(0.9) translateX(10%);--_origin:right;--_opening-content-transform:none;--_origin-footer:none}.mdc-dialog.grow-right{--_opening-transform:scaleX(0.1) translateX(-20%);--_closing-transform:scaleX(0.9) translateX(-10%);--_origin:left;--_opening-content-transform:none;--_origin-footer:none}.mdc-dialog.grow-down>.container,.mdc-dialog.grow-left>.container,.mdc-dialog.grow-right>.container,.mdc-dialog.grow-up>.container{transform:var(--_opening-transform);transform-origin:var(--_origin)}.mdc-dialog.grow-down>.container>*,.mdc-dialog.grow-left>.container>*,.mdc-dialog.grow-right>.container>*,.mdc-dialog.grow-up>.container>*{transform:var(--_opening-content-transform);transform-origin:var(--_origin)}.mdc-dialog.grow-down .footer,.mdc-dialog.grow-left .footer,.mdc-dialog.grow-right .footer,.mdc-dialog.grow-up .footer{transform-origin:var(--_origin-footer)}.mdc-dialog.grow-down.closing,.mdc-dialog.grow-left.closing,.mdc-dialog.grow-right.closing,.mdc-dialog.grow-up.closing{transform:var(--_closing-transform)}.mdc-dialog.shrink>.container{transform:scale(1.2)}.mdc-dialog.grow>.container{transform:scale(.8)}.mdc-dialog.grow.closing>.container,.mdc-dialog.shrink.closing>.container{transform:none;transition-duration:0}.mdc-dialog .showing-fullscreen{--_container-max-block-size:none;--_container-max-inline-size:none}.mdc-dialog .showing-fullscreen>.container{-webkit-padding-before:0;-webkit-padding-after:0;block-size:100dvh;border-radius:0;inline-size:100dvw;padding-block-end:0;padding-block-start:0}.mdc-dialog .showing-fullscreen .header{-webkit-padding-before:var(--_fullscreen-container-block-padding);--_header-spacing:4px;flex-direction:row;justify-content:flex-start;max-block-size:var(--_fullscreen-header-block-size);padding-block-start:var(--_fullscreen-container-block-padding);padding-inline:4px}.mdc-dialog .showing-fullscreen>.content{-webkit-margin-before:0;-webkit-margin-after:0;margin-block-end:0;margin-block-start:0}.mdc-dialog .showing-fullscreen .footer{-webkit-padding-after:var(--_fullscreen-container-block-padding);max-block-size:var(--_fullscreen-footer-block-size);padding-block-end:var(--_fullscreen-container-block-padding)}.mdc-dialog .showing-fullscreen.scroll-divider-footer>.content{border-block-end-color:transparent}@media (-ms-high-contrast:active),screen and (forced-colors:active){.mdc-dialog>.container{outline:2px solid windowtext}}.mdc-dialog[name=headline-prefix]::slotted(*),.mdc-dialog[name=headline-suffix]::slotted(*){color:var(--_with-icon-icon-color);font-size:var(--_with-icon-icon-size)}.mdc-dialog[name=header]::slotted(*){align-items:center;align-self:stretch;display:flex;flex:1}.mdc-dialog .showing-fullscreen [name=headline]::slotted(*){flex:1}@media (prefers-reduced-motion:reduce){.mdc-dialog{--_opening-transition-duration:0;--_closing-transition-duration:0}}";
styleInject(css_248z$e);

var Dialog = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var hasFooter = _ref.hasFooter,
    stacked = _ref.stacked,
    className = _ref.className,
    children = _ref.children,
    _ref$transition = _ref.transition,
    transition = _ref$transition === void 0 ? 'grow-down' : _ref$transition,
    title = _ref.title,
    visiable = _ref.visiable,
    _ref$isMessage = _ref.isMessage,
    isMessage = _ref$isMessage === void 0 ? false : _ref$isMessage,
    width = _ref.width,
    height = _ref.height;
  var slots = useSlot(children);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    dragging = _useState2[0],
    setDragging = _useState2[1];
  var _useState3 = React.useState(visiable),
    _useState4 = _slicedToArray(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    opening = _useState6[0],
    setOpening = _useState6[1];
  var _useState7 = React.useState(false),
    _useState8 = _slicedToArray(_useState7, 2),
    closing = _useState8[0],
    setClosing = _useState8[1];
  var contentElement = React.useRef(null);
  var _useMemo = React.useMemo(function () {
      return {
        isScrollable: false,
        isAtScrollTop: false,
        isAtScrollBottom: false
      };
    }, [contentElement.current]),
    isScrollable = _useMemo.isScrollable,
    isAtScrollTop = _useMemo.isAtScrollTop,
    isAtScrollBottom = _useMemo.isAtScrollBottom;
  var classNames = React.useMemo(function () {
    var _classnames;
    return classnames(CSS_CLASSES$6.ROOT, className, (_classnames = {}, _defineProperty(_classnames, 'hasMask', !isMessage), _defineProperty(_classnames, 'stacked', stacked), _defineProperty(_classnames, 'scrollable', isScrollable), _defineProperty(_classnames, 'scroll-divider-header', !isAtScrollTop), _defineProperty(_classnames, 'scroll-divider-footer', !isAtScrollBottom), _defineProperty(_classnames, 'footerHidden', !hasFooter), _defineProperty(_classnames, 'opening', opening), _defineProperty(_classnames, 'closing', closing), _defineProperty(_classnames, 'transition', transition), _defineProperty(_classnames, 'grow-down', transition === 'grow-down'), _defineProperty(_classnames, 'grow-up', transition === 'grow-up'), _defineProperty(_classnames, 'grow-left', transition === 'grow-left'), _defineProperty(_classnames, 'grow-right', transition === 'grow-right'), _defineProperty(_classnames, 'shrink', transition === 'shrink'), _defineProperty(_classnames, 'grow', transition === 'grow'), _classnames));
  }, [opening]);
  var container = React.useMemo(function () {
    return classnames('container', {
      dragging: dragging
    });
  }, [dragging]);
  function doPointerMove(e) {
    console.log('doPointerMove', e);
    // if (!dragging && !this.canStartDrag(e) || !this.containerElement) {
    //   return;
    // }
    // const {top, left, height, width} =
    //     this.containerElement.getBoundingClientRect();
    // if (!this.dragging) {
    //   this.containerElement.setPointerCapture(e.pointerId);
    //   this.dragging = true;
    //   const {x, y} = e;
    //   this.dragInfo = [x, y, top, left];
    // }
    // const [sx, sy, st, sl] = this.dragInfo ?? [0, 0, 0, 0];
    // const dx = e.x - sx;
    // const dy = e.y - sy;
    // const ml = window.innerWidth - width - this.dragMargin;
    // const mt = window.innerHeight - height - this.dragMargin;
    // const l = Math.max(this.dragMargin, Math.min(ml, dx + sl));
    // const t = Math.max(this.dragMargin, Math.min(mt, dy + st));
    // this.style.setProperty('--_container-drag-inline-start', `${l}px`);
    // this.style.setProperty('--_container-drag-block-start', `${t}px`);
  }

  function doDragEnd(e) {
    console.log('doDragEnd', e);
    setDragging(false);
  }
  function doOpen() {
    setOpen(true);
    setOpening(true);
  }
  function doClose() {
    setOpen(false);
    setOpening(false);
    setClosing(true);
  }
  React.useImperativeHandle(ref, function () {
    return {
      open: function open() {
        doOpen();
      },
      close: function close() {
        doClose();
      }
    };
  }, []);
  return jsxRuntime.exports.jsx("dialog", {
    className: classNames,
    open: open,
    children: isMessage ? children : jsxRuntime.exports.jsxs("div", {
      className: container,
      style: {
        width: width,
        height: height
      },
      onPointerMove: function onPointerMove() {
        return doPointerMove;
      },
      onPointerUp: function onPointerUp() {
        return doDragEnd;
      },
      children: [jsxRuntime.exports.jsx(Elevation, {}), jsxRuntime.exports.jsxs("div", {
        className: "header",
        children: [slots['title'] || title, jsxRuntime.exports.jsx(Button, {
          type: "icon",
          onClick: doClose,
          className: "close",
          children: "close"
        })]
      }), jsxRuntime.exports.jsx("div", {
        className: "content",
        ref: contentElement,
        children: slots['children']
      }), jsxRuntime.exports.jsxs("footer", {
        className: "footer",
        children: [slots['footer'], jsxRuntime.exports.jsx(Button, {
          variant: "tonal",
          onClick: doClose,
          children: "\u53D6\u6D88"
        }), jsxRuntime.exports.jsx(Button, {
          variant: "filled",
          onClick: doClose,
          children: "\u786E\u5B9A"
        })]
      })]
    })
  });
});
Dialog.Container = function (_ref2) {
  var children = _ref2.children,
    type = _ref2.type;
  return jsxRuntime.exports.jsxs("div", {
    className: "content",
    children: [jsxRuntime.exports.jsx(Icon, {
      children: type
    }), jsxRuntime.exports.jsx("span", {
      children: children
    })]
  });
};

var CSS_CLASSES$5 = {
  ROOT: 'mdc-switch',
  LARGE: 'large'
};

var css_248z$d = "@media (forced-colors:active){.mdc-switch{--md-switch-disabled-selected-icon-color:GrayText;--md-switch-disabled-selected-icon-opacity:1;--md-switch-disabled-selected-track-color:GrayText;--md-switch-disabled-track-opacity:1;--md-switch-disabled-unselected-handle-color:GrayText;--md-switch-disabled-unselected-handle-opacity:1;--md-switch-disabled-unselected-icon-color:Canvas;--md-switch-disabled-unselected-icon-opacity:1;--md-switch-selected-focus-track-color:ButtonText;--md-switch-selected-hover-track-color:ButtonText;--md-switch-selected-icon-color:ButtonText;--md-switch-selected-hover-icon-color:ButtonText;--md-switch-selected-focus-icon-color:ButtonText;--md-switch-selected-pressed-icon-color:ButtonText;--md-switch-selected-pressed-track-color:ButtonText;--md-switch-selected-track-color:ButtonText;--md-switch-unselected-focus-handle-color:ButtonText;--md-switch-unselected-handle-color:ButtonText;--md-switch-unselected-hover-handle-color:ButtonText;--md-switch-unselected-icon-color:Canvas;--md-switch-unselected-hover-icon-color:Canvas;--md-switch-unselected-focus-icon-color:Canvas;--md-switch-unselected-pressed-icon-color:Canvas;--md-switch-unselected-pressed-handle-color:ButtonText}}.mdc-switch{--_disabled-selected-handle-color:var(\n    --md-switch-disabled-selected-handle-color,var(--md-sys-color-surface,#fef7ff)\n  );--_disabled-selected-handle-opacity:var(\n    --md-switch-disabled-selected-handle-opacity,1\n  );--_disabled-selected-icon-color:var(\n    --md-switch-disabled-selected-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-selected-icon-opacity:var(\n    --md-switch-disabled-selected-icon-opacity,0.38\n  );--_disabled-selected-track-color:var(\n    --md-switch-disabled-selected-track-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-track-opacity:var(--md-switch-disabled-track-opacity,0.12);--_disabled-unselected-handle-color:var(\n    --md-switch-disabled-unselected-handle-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-unselected-handle-opacity:var(\n    --md-switch-disabled-unselected-handle-opacity,0.38\n  );--_disabled-unselected-icon-color:var(\n    --md-switch-disabled-unselected-icon-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_disabled-unselected-icon-opacity:var(\n    --md-switch-disabled-unselected-icon-opacity,0.38\n  );--_disabled-unselected-track-color:var(\n    --md-switch-disabled-unselected-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_disabled-unselected-track-outline-color:var(\n    --md-switch-disabled-unselected-track-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_handle-shape:var(--md-switch-handle-shape,9999px);--_pressed-handle-height:var(--md-switch-pressed-handle-height,28px);--_pressed-handle-width:var(--md-switch-pressed-handle-width,28px);--_selected-focus-handle-color:var(\n    --md-switch-selected-focus-handle-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_selected-focus-icon-color:var(\n    --md-switch-selected-focus-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_selected-focus-state-layer-color:var(\n    --md-switch-selected-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-focus-state-layer-opacity:var(\n    --md-switch-selected-focus-state-layer-opacity,0.12\n  );--_selected-focus-track-color:var(\n    --md-switch-selected-focus-track-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-handle-color:var(\n    --md-switch-selected-handle-color,var(--md-sys-color-on-primary,#fff)\n  );--_selected-handle-height:var(--md-switch-selected-handle-height,24px);--_selected-handle-width:var(--md-switch-selected-handle-width,24px);--_selected-hover-handle-color:var(\n    --md-switch-selected-hover-handle-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_selected-hover-icon-color:var(\n    --md-switch-selected-hover-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_selected-hover-state-layer-color:var(\n    --md-switch-selected-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-hover-state-layer-opacity:var(\n    --md-switch-selected-hover-state-layer-opacity,0.08\n  );--_selected-hover-track-color:var(\n    --md-switch-selected-hover-track-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-icon-color:var(\n    --md-switch-selected-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_selected-icon-size:var(--md-switch-selected-icon-size,16px);--_selected-pressed-handle-color:var(\n    --md-switch-selected-pressed-handle-color,var(--md-sys-color-primary-container,#eaddff)\n  );--_selected-pressed-icon-color:var(\n    --md-switch-selected-pressed-icon-color,var(--md-sys-color-on-primary-container,#21005d)\n  );--_selected-pressed-state-layer-color:var(\n    --md-switch-selected-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-pressed-state-layer-opacity:var(\n    --md-switch-selected-pressed-state-layer-opacity,0.12\n  );--_selected-pressed-track-color:var(\n    --md-switch-selected-pressed-track-color,var(--md-sys-color-primary,#6750a4)\n  );--_selected-track-color:var(\n    --md-switch-selected-track-color,var(--md-sys-color-primary,#6750a4)\n  );--_state-layer-shape:var(--md-switch-state-layer-shape,9999px);--_state-layer-size:var(--md-switch-state-layer-size,40px);--_track-height:var(--md-switch-track-height,32px);--_track-outline-width:var(--md-switch-track-outline-width,2px);--_track-shape:var(--md-switch-track-shape,9999px);--_track-width:var(--md-switch-track-width,52px);--_unselected-focus-handle-color:var(\n    --md-switch-unselected-focus-handle-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-focus-icon-color:var(\n    --md-switch-unselected-focus-icon-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-focus-state-layer-color:var(\n    --md-switch-unselected-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-focus-state-layer-opacity:var(\n    --md-switch-unselected-focus-state-layer-opacity,0.12\n  );--_unselected-focus-track-color:var(\n    --md-switch-unselected-focus-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-focus-track-outline-color:var(\n    --md-switch-unselected-focus-track-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_unselected-handle-color:var(\n    --md-switch-unselected-handle-color,var(--md-sys-color-outline,#79747e)\n  );--_unselected-handle-height:var(--md-switch-unselected-handle-height,16px);--_unselected-handle-width:var(--md-switch-unselected-handle-width,16px);--_unselected-hover-handle-color:var(\n    --md-switch-unselected-hover-handle-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-hover-icon-color:var(\n    --md-switch-unselected-hover-icon-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-hover-state-layer-color:var(\n    --md-switch-unselected-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-hover-state-layer-opacity:var(\n    --md-switch-unselected-hover-state-layer-opacity,0.08\n  );--_unselected-hover-track-color:var(\n    --md-switch-unselected-hover-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-hover-track-outline-color:var(\n    --md-switch-unselected-hover-track-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_unselected-icon-color:var(\n    --md-switch-unselected-icon-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-icon-size:var(--md-switch-unselected-icon-size,16px);--_unselected-pressed-handle-color:var(\n    --md-switch-unselected-pressed-handle-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_unselected-pressed-icon-color:var(\n    --md-switch-unselected-pressed-icon-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-pressed-state-layer-color:var(\n    --md-switch-unselected-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_unselected-pressed-state-layer-opacity:var(\n    --md-switch-unselected-pressed-state-layer-opacity,0.12\n  );--_unselected-pressed-track-color:var(\n    --md-switch-unselected-pressed-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-pressed-track-outline-color:var(\n    --md-switch-unselected-pressed-track-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_unselected-track-color:var(\n    --md-switch-unselected-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_unselected-track-outline-color:var(\n    --md-switch-unselected-track-outline-color,var(--md-sys-color-outline,#79747e)\n  );--_with-icon-handle-height:var(--md-switch-with-icon-handle-height,24px);--_with-icon-handle-width:var(--md-switch-with-icon-handle-width,24px);--_handle-shape-start-start:var(\n    --md-switch-handle-shape-start-start,var(--_handle-shape)\n  );--_handle-shape-start-end:var(\n    --md-switch-handle-shape-start-end,var(--_handle-shape)\n  );--_handle-shape-end-end:var(\n    --md-switch-handle-shape-end-end,var(--_handle-shape)\n  );--_handle-shape-end-start:var(\n    --md-switch-handle-shape-end-start,var(--_handle-shape)\n  );--_track-shape-start-start:var(\n    --md-switch-track-shape-start-start,var(--_track-shape)\n  );--_track-shape-start-end:var(\n    --md-switch-track-shape-start-end,var(--_track-shape)\n  );--_track-shape-end-end:var(\n    --md-switch-track-shape-end-end,var(--_track-shape)\n  );--_track-shape-end-start:var(\n    --md-switch-track-shape-end-start,var(--_track-shape)\n  );--md-focus-ring-shape-start-start:var(--_track-shape-start-start);--md-focus-ring-shape-start-end:var(--_track-shape-start-end);--md-focus-ring-shape-end-end:var(--_track-shape-end-end);--md-focus-ring-shape-end-start:var(--_track-shape-end-start);align-items:center;background:none;border:none;border-end-end-radius:var(--_track-shape-end-end);border-end-start-radius:var(--_track-shape-end-start);border-start-end-radius:var(--_track-shape-start-end);border-start-start-radius:var(--_track-shape-start-start);cursor:pointer;display:inline-flex;flex-shrink:0;height:var(--_track-height);margin:0;outline:none;padding:0;position:relative;width:var(--_track-width)}.mdc-switch .touch{height:48px;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);width:48px}.mdc-switch:disabled{cursor:default;pointer-events:none}.mdc-switch:disabled .track{background-color:transparent;border-color:transparent}.mdc-switch:disabled .track:before{background-clip:content-box}.mdc-switch.switch--selected:disabled .track{background-clip:border-box}.mdc-switch .track{align-items:center;justify-content:center}.mdc-switch .track,.mdc-switch .track:before{border-radius:inherit;box-sizing:border-box;display:flex;height:100%;position:absolute;width:100%}.mdc-switch .track:before{content:\"\";transition-duration:67ms;transition-property:opacity,background-color;transition-timing-function:linear}.mdc-switch:disabled .track:after,.mdc-switch:disabled .track:before{opacity:var(--_disabled-track-opacity);transition:none}.mdc-switch.switch--selected .track:before{background-color:var(--_selected-track-color)}.mdc-switch.switch--selected:hover .track:before{background-color:var(--_selected-hover-track-color)}.mdc-switch.switch--selected:focus-within .track:before{background-color:var(--_selected-focus-track-color)}.mdc-switch.switch--selected:active .track:before{background-color:var(--_selected-pressed-track-color)}.mdc-switch.switch--selected:disabled .track:before{background-color:var(--_disabled-selected-track-color)}.mdc-switch.switch--unselected .track:before{background-color:var(--_unselected-track-color);border-color:var(--_unselected-track-outline-color);border-style:solid;border-width:var(--_track-outline-width)}.mdc-switch.switch--unselected:hover .track:before{background-color:var(--_unselected-hover-track-color);border-color:var(--_unselected-hover-track-outline-color)}.mdc-switch.switch--unselected:focus-visible .track:before{background-color:var(--_unselected-focus-track-color);border-color:var(--_unselected-focus-track-outline-color)}.mdc-switch.switch--unselected:active .track:before{background-color:var(--_unselected-pressed-track-color);border-color:var(--_unselected-pressed-track-outline-color)}.mdc-switch.switch--unselected:disabled .track:before{background-color:var(--_disabled-unselected-track-color);border-color:var(--_disabled-unselected-track-outline-color)}.mdc-switch .handle-container{display:flex;position:relative;transition:margin .3s cubic-bezier(.175,.885,.32,1.275)}.mdc-switch.switch--selected .handle-container{-webkit-margin-start:calc(var(--_track-width) - var(--_track-height));margin-inline-start:calc(var(--_track-width) - var(--_track-height))}.mdc-switch.switch--unselected .handle-container{-webkit-margin-end:calc(var(--_track-width) - var(--_track-height));margin-inline-end:calc(var(--_track-width) - var(--_track-height))}.mdc-switch:disabled .handle-container{transition:none}.mdc-switch .handle{border-end-end-radius:var(--_handle-shape-end-end);border-end-start-radius:var(--_handle-shape-end-start);border-start-end-radius:var(--_handle-shape-start-end);border-start-start-radius:var(--_handle-shape-start-start);height:var(--_unselected-handle-height);transform-origin:center;transition-duration:.25s,.25s;transition-property:height,width;transition-timing-function:cubic-bezier(.2,0,0,1),cubic-bezier(.2,0,0,1);width:var(--_unselected-handle-width);z-index:0}.mdc-switch .handle:before{border-radius:inherit;box-sizing:border-box;content:\"\";display:flex;inset:0;position:absolute;transition:background-color 67ms linear}.mdc-switch:disabled .handle,.mdc-switch:disabled .handle:before{transition:none}.mdc-switch.switch--selected .handle{height:var(--_selected-handle-height);width:var(--_selected-handle-width)}.mdc-switch .handle.with-icon{height:var(--_with-icon-handle-height);width:var(--_with-icon-handle-width)}.mdc-switch.switch--selected:enabled:active .handle,.mdc-switch.switch--unselected:enabled:active .handle{height:var(--_pressed-handle-height);transition-duration:.1s;transition-timing-function:linear;width:var(--_pressed-handle-width)}.mdc-switch.switch--selected .handle:before{background-color:var(--_selected-handle-color)}.mdc-switch.switch--selected:hover .handle:before{background-color:var(--_selected-hover-handle-color)}.mdc-switch.switch--selected:focus-within .handle:before{background-color:var(--_selected-focus-handle-color)}.mdc-switch.switch--selected:active .handle:before{background-color:var(--_selected-pressed-handle-color)}.mdc-switch.switch--selected:disabled .handle:before{background-color:var(--_disabled-selected-handle-color);opacity:var(--_disabled-selected-handle-opacity)}.mdc-switch.switch--unselected .handle:before{background-color:var(--_unselected-handle-color)}.mdc-switch.switch--unselected:hover .handle:before{background-color:var(--_unselected-hover-handle-color)}.mdc-switch.switch--unselected:focus-within .handle:before{background-color:var(--_unselected-focus-handle-color)}.mdc-switch.switch--unselected:active .handle:before{background-color:var(--_unselected-pressed-handle-color)}.mdc-switch.switch--unselected:disabled .handle:before{background-color:var(--_disabled-unselected-handle-color);opacity:var(--_disabled-unselected-handle-opacity)}.mdc-switch .ripple{--md-ripple-shape:var(--_state-layer-shape);display:inline-flex;height:var(--_state-layer-size);left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);width:var(--_state-layer-size)}.mdc-switch.switch--selected .ripple{--md-ripple-hover-color:var(--_selected-hover-state-layer-color);--md-ripple-focus-color:var(--_selected-focus-state-layer-color);--md-ripple-pressed-color:var(--_selected-pressed-state-layer-color);--md-ripple-hover-opacity:var(--_selected-hover-state-layer-opacity);--md-ripple-focus-opacity:var(--_selected-focus-state-layer-opacity);--md-ripple-pressed-opacity:var(--_selected-pressed-state-layer-opacity)}.mdc-switch.switch--unselected .ripple{--md-ripple-hover-color:var(--_unselected-hover-state-layer-color);--md-ripple-focus-color:var(--_unselected-focus-state-layer-color);--md-ripple-pressed-color:var(--_unselected-pressed-state-layer-color);--md-ripple-hover-opacity:var(--_unselected-hover-state-layer-opacity);--md-ripple-focus-opacity:var(--_unselected-focus-state-layer-opacity);--md-ripple-pressed-opacity:var(--_unselected-pressed-state-layer-opacity)}.mdc-switch .icons{height:100%;position:relative;width:100%}.mdc-switch .icon{inset:0;margin:auto;opacity:0;position:absolute;transition:fill 67ms linear,opacity 33ms linear,transform 167ms cubic-bezier(.2,0,0,1)}.mdc-switch:disabled .icon{transition:none}.mdc-switch.switch--selected .icon--on,.mdc-switch.switch--unselected .icon--off{opacity:1}.mdc-switch.switch--unselected .handle:not(.with-icon) .icon--on{transform:rotate(-45deg)}.mdc-switch .icon--off{fill:var(--_unselected-icon-color);height:var(--_unselected-icon-size);width:var(--_unselected-icon-size)}.mdc-switch.switch--unselected:hover .icon--off{fill:var(--_unselected-hover-icon-color)}.mdc-switch.switch--unselected:focus-within .icon--off{fill:var(--_unselected-focus-icon-color)}.mdc-switch.switch--unselected:active .icon--off{fill:var(--_unselected-pressed-icon-color)}.mdc-switch.switch--unselected:disabled .icon--off{fill:var(--_disabled-unselected-icon-color);opacity:var(--_disabled-unselected-icon-opacity)}.mdc-switch .icon--on{fill:var(--_selected-icon-color);height:var(--_selected-icon-size);width:var(--_selected-icon-size)}.mdc-switch.switch--selected:hover .icon--on{fill:var(--_selected-hover-icon-color)}.mdc-switch.switch--selected:focus-within .icon--on{fill:var(--_selected-focus-icon-color)}.mdc-switch.switch--selected:active .icon--on{fill:var(--_selected-pressed-icon-color)}.mdc-switch.switch--selected:disabled .icon--on{fill:var(--_disabled-selected-icon-color);opacity:var(--_disabled-selected-icon-opacity)}";
styleInject(css_248z$d);

var Switch = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var disabled = _ref.disabled,
    hasIcon = _ref.hasIcon,
    className = _ref.className;
  var $el = ref || React.useRef(null);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var classNames = React.useMemo(function () {
    var _classnames;
    return classnames(CSS_CLASSES$5.ROOT, className, (_classnames = {}, _defineProperty(_classnames, 'switch--selected', selected), _defineProperty(_classnames, 'switch--unselected', !selected), _classnames));
  }, [selected]);
  var handle = React.useMemo(function () {
    return classnames('handle', {
      'with-icon': hasIcon && selected
    });
  }, [selected]);
  var shouldShowIcons = hasIcon;
  var OnIcon = jsxRuntime.exports.jsx("svg", {
    className: "icon icon--on",
    viewBox: "0 0 24 24",
    children: jsxRuntime.exports.jsx("path", {
      d: "M9.55 18.2 3.65 12.3 5.275 10.675 9.55 14.95 18.725 5.775 20.35 7.4Z"
    })
  });
  var OffIcon = jsxRuntime.exports.jsx("svg", {
    className: "icon icon--off",
    viewBox: "0 0 24 24",
    children: jsxRuntime.exports.jsx("path", {
      d: "M6.4 19.2 4.8 17.6 10.4 12 4.8 6.4 6.4 4.8 12 10.4 17.6 4.8 19.2 6.4 13.6 12 19.2 17.6 17.6 19.2 12 13.6Z"
    })
  });
  function doClick() {
    if (disabled) {
      return false;
    }
    setSelected(!selected);
  }
  return jsxRuntime.exports.jsxs("button", {
    type: "button",
    className: classNames,
    role: "switch",
    onClick: doClick,
    children: [jsxRuntime.exports.jsx(Focus, {
      parent: $el
    }), jsxRuntime.exports.jsx("span", {
      className: "track",
      children: jsxRuntime.exports.jsxs("span", {
        className: "handle-container",
        children: [jsxRuntime.exports.jsx(Ripple, {
          parent: $el
        }), jsxRuntime.exports.jsxs("span", {
          className: handle,
          children: ["$", shouldShowIcons ? jsxRuntime.exports.jsxs("div", {
            className: "icons",
            children: [OnIcon, !hasIcon ? OffIcon : null]
          }) : null]
        }), jsxRuntime.exports.jsx("span", {
          className: "touch"
        })]
      })
    })]
  });
});

var CSS_CLASSES$4 = {
  ROOT: 'mdc-slider',
  LARGE: 'large'
};

var css_248z$c = ".mdc-slider{--_active-track-color:var(\n    --md-slider-active-track-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-track-height:var(--md-slider-active-track-height,4px);--_active-track-shape:var(--md-slider-active-track-shape,9999px);--_disabled-active-track-color:var(\n    --md-slider-disabled-active-track-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-active-track-opacity:var(\n    --md-slider-disabled-active-track-opacity,0.38\n  );--_disabled-handle-color:var(\n    --md-slider-disabled-handle-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-handle-elevation:var(--md-slider-disabled-handle-elevation,0);--_disabled-inactive-track-color:var(\n    --md-slider-disabled-inactive-track-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-inactive-track-opacity:var(\n    --md-slider-disabled-inactive-track-opacity,0.12\n  );--_focus-handle-color:var(\n    --md-slider-focus-handle-color,var(--md-sys-color-primary,#6750a4)\n  );--_handle-color:var(\n    --md-slider-handle-color,var(--md-sys-color-primary,#6750a4)\n  );--_handle-elevation:var(--md-slider-handle-elevation,1);--_handle-height:var(--md-slider-handle-height,20px);--_handle-shadow-color:var(\n    --md-slider-handle-shadow-color,var(--md-sys-color-shadow,#000)\n  );--_handle-shape:var(--md-slider-handle-shape,9999px);--_handle-width:var(--md-slider-handle-width,20px);--_hover-handle-color:var(\n    --md-slider-hover-handle-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-state-layer-color:var(\n    --md-slider-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_hover-state-layer-opacity:var(\n    --md-slider-hover-state-layer-opacity,0.08\n  );--_inactive-track-color:var(\n    --md-slider-inactive-track-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_inactive-track-height:var(--md-slider-inactive-track-height,4px);--_inactive-track-shape:var(--md-slider-inactive-track-shape,9999px);--_label-container-color:var(\n    --md-slider-label-container-color,var(--md-sys-color-primary,#6750a4)\n  );--_label-container-height:var(--md-slider-label-container-height,28px);--_label-label-text-color:var(\n    --md-slider-label-label-text-color,var(--md-sys-color-on-primary,#fff)\n  );--_label-label-text-type:var(\n    --md-slider-label-label-text-type,var(\n      --md-sys-typescale-label-medium,500 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_pressed-handle-color:var(\n    --md-slider-pressed-handle-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-color:var(\n    --md-slider-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-opacity:var(\n    --md-slider-pressed-state-layer-opacity,0.12\n  );--_state-layer-size:var(--md-slider-state-layer-size,40px);--_with-overlap-handle-outline-color:var(\n    --md-slider-with-overlap-handle-outline-color,var(--md-sys-color-on-primary,#fff)\n  );--_with-overlap-handle-outline-width:var(\n    --md-slider-with-overlap-handle-outline-width,1px\n  );--_with-tick-marks-active-container-color:var(\n    --md-slider-with-tick-marks-active-container-color,var(--md-sys-color-on-primary,#fff)\n  );--_with-tick-marks-container-size:var(\n    --md-slider-with-tick-marks-container-size,2px\n  );--_with-tick-marks-disabled-container-color:var(\n    --md-slider-with-tick-marks-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_with-tick-marks-inactive-container-color:var(\n    --md-slider-with-tick-marks-inactive-container-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--md-elevation-level:var(--_handle-elevation);--md-elevation-shadow-color:var(--_handle-shadow-color);display:inline-flex;min-inline-size:200px;vertical-align:middle}.mdc-slider .mdc-elevation{transition-duration:.25s}@media (prefers-reduced-motion){.mdc-slider .label{transition-duration:0}}.mdc-slider:disabled{--md-elevation-level:var(--_disabled-handle-elevation);opacity:var(--_disabled-active-track-opacity)}.mdc-slider .container{block-size:var(--_state-layer-size);flex:1;pointer-events:none;position:relative;touch-action:none}.mdc-slider .container,.mdc-slider .track{align-items:center;display:flex}.mdc-slider .track{inset:0;position:absolute}.mdc-slider .track:after,.mdc-slider .track:before{background-size:calc((100% - var(--_with-tick-marks-container-size)*2)/var(--slider-tick-count)) 100%;content:\"\";inset-inline-end:calc(var(--_state-layer-size)/2 - var(--_with-tick-marks-container-size));inset-inline-start:calc(var(--_state-layer-size)/2 - var(--_with-tick-marks-container-size));position:absolute}.mdc-slider .track:before{background-color:var(--_inactive-track-color);block-size:var(--_inactive-track-height);border-radius:var(--_inactive-track-shape)}.mdc-slider .track.tickMarks:before{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center,var(--_with-tick-marks-inactive-container-color) 0,var(--_with-tick-marks-inactive-container-color) calc(var(--_with-tick-marks-container-size)/2),transparent calc(var(--_with-tick-marks-container-size)/2))}.mdc-slider[disabled] .track:before{background-color:var(--_disabled-inactive-track-color);opacity:calc(1/var(--_disabled-active-track-opacity)*var(--_disabled-inactive-track-opacity))}.mdc-slider .track:after{background-color:var(--_active-track-color);block-size:var(--_active-track-height);border-radius:var(--_active-track-shape);-webkit-clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))) 0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)));clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))) 0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)))}.mdc-slider[dir=rtl] .track:after{-webkit-clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))));clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))))}.mdc-slider:dir(rtl) .track:after{-webkit-clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))));clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))))}.mdc-slider .track:dir(rtl):after{-webkit-clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))));clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--slider-lower-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--slider-lower-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--slider-upper-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--slider-upper-fraction))))}.mdc-slider .track.tickMarks:after{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center,var(--_with-tick-marks-active-container-color) 0,var(--_with-tick-marks-active-container-color) calc(var(--_with-tick-marks-container-size)/2),transparent calc(var(--_with-tick-marks-container-size)/2))}.mdc-slider:disabled .track:after{background-color:var(--_disabled-active-track-color)}.mdc-slider:disabled .track.tickMarks:after,.mdc-slider:disabled .track.tickMarks:before{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center,var(--_with-tick-marks-disabled-container-color) 0,var(--_with-tick-marks-disabled-container-color) calc(var(--_with-tick-marks-container-size)/2),transparent calc(var(--_with-tick-marks-container-size)/2))}.mdc-slider .handleContainerPadded{padding-inline:calc(var(--_state-layer-size)/2)}.mdc-slider .handleContainerBlock,.mdc-slider .handleContainerPadded{block-size:100%;inline-size:100%;position:relative}.mdc-slider .handleContainer{inline-size:calc(100%*(var(--slider-upper-fraction) - var(--slider-lower-fraction)));inset-block-end:0;inset-block-start:0;inset-inline-start:calc(100%*var(--slider-lower-fraction));position:absolute}.mdc-slider .handle{block-size:var(--_state-layer-size);display:grid;inline-size:var(--_state-layer-size);place-items:center;position:absolute}.mdc-slider .handle,.mdc-slider .handleNub{border-radius:var(--_handle-shape)}.mdc-slider .handleNub{background:var(--_handle-color);height:var(--_handle-height);position:absolute;width:var(--_handle-width)}.mdc-slider:disabled .handleNub{background:var(--_disabled-handle-color)}.mdc-slider input.a:focus~.handleContainerPadded .handle.a>.handleNub,.mdc-slider input.b:focus~.handleContainerPadded .handle.b>.handleNub{background:var(--_focus-handle-color)}.mdc-slider .container>.handleContainerPadded .handle.hover>.handleNub{background:var(--_hover-handle-color)}.mdc-slider:not(disabled) input.a:active~.handleContainerPadded .handle.a>.handleNub,.mdc-slider:not(disabled) input.b:active~.handleContainerPadded .handle.b>.handleNub{background:var(--_pressed-handle-color)}.mdc-slider .onTop.isOverlapping .handleNub,.mdc-slider .onTop.isOverlapping .label,.mdc-slider .onTop.isOverlapping .label:before{border:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}.mdc-slider .handle.lesser{inset-inline-start:calc(0px - var(--_state-layer-size)/2)}.mdc-slider .handle:not(.lesser){inset-inline-end:calc(0px - var(--_state-layer-size)/2)}.mdc-slider .label{background:var(--_label-container-color);border-radius:9999px;box-sizing:border-box;color:var(--_label-label-text-color);display:grid;font:var(--_label-label-text-type);inset-block-end:100%;min-block-size:var(--_label-container-height);min-inline-size:var(--_label-container-height);padding:4px;place-items:center;position:absolute;transform:scale(0);transform-origin:center bottom;transition:transform .1s cubic-bezier(.2,0,0,1)}.mdc-slider .handleContainer.hover .label,.mdc-slider:focus-within .label{transform:scale(1)}.mdc-slider .label:after,.mdc-slider .label:before{background:inherit;content:\"\";display:block;position:absolute}.mdc-slider .label:before{block-size:calc(var(--_label-container-height)/2);bottom:calc(var(--_label-container-height)/-10);inline-size:calc(var(--_label-container-height)/2);transform:rotate(45deg)}.mdc-slider .label:after{border-radius:inherit;inset:0}.mdc-slider .labelContent{z-index:1}.mdc-slider input[type=range]{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent;box-sizing:border-box;cursor:pointer;height:100%;margin:0;opacity:0;pointer-events:auto;position:absolute;width:100%}.mdc-slider input[type=range]:focus{outline:none}.mdc-slider ::-webkit-slider-runnable-track{-webkit-appearance:none}.mdc-slider ::-moz-range-track{-moz-appearance:none;appearance:none}.mdc-slider ::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;block-size:var(--_state-layer-size);inline-size:var(--_state-layer-size);opacity:0;transform:scaleX(0);z-index:2}.mdc-slider ::-moz-range-thumb{-moz-appearance:none;appearance:none;block-size:var(--_state-layer-size);inline-size:var(--_state-layer-size);opacity:0;transform:scaleX(0);z-index:2}.mdc-slider .ranged input.lesser{-webkit-clip-path:inset(0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0);clip-path:inset(0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0)}.mdc-slider[dir=rtl] .ranged input.lesser{-webkit-clip-path:inset(0 0 0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)));clip-path:inset(0 0 0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)))}.mdc-slider:dir(rtl) .ranged input.lesser{-webkit-clip-path:inset(0 0 0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)));clip-path:inset(0 0 0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)))}.mdc-slider .ranged input.lesser:dir(rtl){-webkit-clip-path:inset(0 0 0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)));clip-path:inset(0 0 0 calc(100% - var(--_state-layer-size)/2 - (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)))}.mdc-slider .ranged input:not(.lesser){-webkit-clip-path:inset(0 0 0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)));clip-path:inset(0 0 0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)))}.mdc-slider[dir=rtl] .ranged input:not(.lesser){-webkit-clip-path:inset(0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0);clip-path:inset(0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0)}.mdc-slider:dir(rtl) .ranged input:not(.lesser){-webkit-clip-path:inset(0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0);clip-path:inset(0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0)}.mdc-slider .ranged input:dir(rtl):not(.lesser){-webkit-clip-path:inset(0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0);clip-path:inset(0 calc(var(--_state-layer-size)/2 + (100% - var(--_state-layer-size))*(var(--slider-lower-fraction) + (var(--slider-upper-fraction) - var(--slider-lower-fraction))/2)) 0 0)}.mdc-slider .onTop{z-index:1}.mdc-slider md-focus-ring{--md-focus-ring-outward-offset:-2px}.mdc-slider .handle{--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity)}.mdc-slider .mdc-ripple{height:var(--_state-layer-size);width:var(--_state-layer-size)}@media (forced-colors:active){.mdc-slider{--md-slider-active-track-color:CanvasText;--md-slider-disabled-active-track-color:GrayText;--md-slider-disabled-active-track-opacity:1;--md-slider-disabled-handle-color:GrayText;--md-slider-disabled-inactive-track-color:GrayText;--md-slider-disabled-inactive-track-opacity:1;--md-slider-focus-handle-color:CanvasText;--md-slider-handle-color:CanvasText;--md-slider-handle-shadow-color:Canvas;--md-slider-hover-handle-color:CanvasText;--md-slider-hover-state-layer-color:Canvas;--md-slider-hover-state-layer-opacity:1;--md-slider-inactive-track-color:Canvas;--md-slider-label-container-color:Canvas;--md-slider-label-label-text-color:CanvasText;--md-slider-pressed-handle-color:CanvasText;--md-slider-pressed-state-layer-color:Canvas;--md-slider-pressed-state-layer-opacity:1;--md-slider-with-overlap-handle-outline-color:CanvasText;--md-slider-with-tick-marks-active-container-color:Canvas;--md-slider-with-tick-marks-disabled-container-color:GrayText;--md-slider-with-tick-marks-inactive-container-color:CanvasText}.mdc-slider .label,.mdc-slider .label:before{border:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}.mdc-slider:not(disabled) .track:before{border:1px solid var(--_active-track-color)}}";
styleInject(css_248z$c);

var Slider = function Slider(_ref) {
  var disabled = _ref.disabled,
    _ref$range = _ref.range,
    range = _ref$range === void 0 ? false : _ref$range,
    _ref$hasTickMarks = _ref.hasTickMarks,
    hasTickMarks = _ref$hasTickMarks === void 0 ? false : _ref$hasTickMarks,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    _ref$min = _ref.min,
    min = _ref$min === void 0 ? 0 : _ref$min,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 100 : _ref$max,
    _ref$valueStart = _ref.valueStart,
    valueStart = _ref$valueStart === void 0 ? 25 : _ref$valueStart,
    _ref$valueEnd = _ref.valueEnd,
    valueEnd = _ref$valueEnd === void 0 ? 75 : _ref$valueEnd,
    valueLabel = _ref.valueLabel,
    valueStartLabel = _ref.valueStartLabel,
    valueEndLabel = _ref.valueEndLabel,
    className = _ref.className,
    children = _ref.children;
  var ref = React.useRef(null);
  var inputA = React.useRef(null);
  var inputB = React.useRef(null);
  var rippleA = React.useRef(null);
  var rippleB = React.useRef(null);
  var handlesOverlapping = false;
  // const [handlesOverlapping, setHandlesOverlapping] = useState(false);
  // const [onTopId, setOnTopId] = useState('b');
  var onTopId = 'b';
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    rippleAShowing = _useState2[0];
    _useState2[1];
  var _useState3 = React.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    rippleBShowing = _useState4[0];
    _useState4[1];
  var handleAHover = false;
  var handleBHover = false;
  // const [handleAHover, setHandleAHover] = useState(false);
  // const [handleBHover, setHandleBHover] = useState(false);
  var valueA = 0;
  var valueB = 0;
  // const [valueA, setValueA] = useState(0);
  // const [valueB, setValueB] = useState(0);
  var classNames = classnames(CSS_CLASSES$4.ROOT, className, _defineProperty({}, CSS_CLASSES$4.LARGE, !!children));
  var track = classnames(_defineProperty({}, 'tickMarks', hasTickMarks));
  var handleContainer = React.useMemo(function () {
    return classnames(_defineProperty({}, 'hover', handleBHover));
  }, [handleAHover, handleBHover]);
  function getMetrics() {
    var s = Math.max(step, 1);
    var range = Math.max(max - min, s);
    var lower = Math.min(valueA, valueB);
    var upper = Math.max(valueA, valueB);
    var lowerFraction = (lower - min) / range;
    var upperFraction = (upper - min) / range;
    return {
      step: s,
      range: range,
      lower: lower,
      upper: upper,
      lowerFraction: lowerFraction,
      upperFraction: upperFraction
    };
  }
  var containerStyles = React.useMemo(function () {
    var _getMetrics = getMetrics(),
      lowerFraction = _getMetrics.lowerFraction,
      upperFraction = _getMetrics.upperFraction,
      step = _getMetrics.step,
      range = _getMetrics.range;
    return {
      '--slider-lower-fraction': String(lowerFraction),
      '--slider-upper-fraction': String(upperFraction),
      '--slider-tick-count': String(range / step)
    };
  }, []);
  function renderLabel(value) {
    return jsxRuntime.exports.jsx("div", {
      className: "label",
      children: jsxRuntime.exports.jsx("span", {
        className: "labelContent",
        children: value
      })
    });
  }
  function renderInput(_ref2) {
    var id = _ref2.id,
      lesser = _ref2.lesser,
      value = _ref2.value;
    // const ariaLabelDescriptor = range
    //   ? ` - ${lesser ? `start` : `end`} handle`
    //   : '';
    // const input = classnames({
    //   lesser,
    //   [id]: true,
    // });
    function doChange(e) {
      console.log('doChange', e, value, valueStart, valueEnd);
      // if (inputA) {
      //   valueA = inputA.valueAsNumber ?? 0;
      // }
      // valueB = this.inputB!.valueAsNumber;
      // this.updateOnTop(e);
      // // update value only on interaction
      // const lower = Math.min(this.valueA, this.valueB);
      // const upper = Math.max(this.valueA, this.valueB);
      // if (this.range) {
      //   this.valueStart = lower;
      //   this.valueEnd = upper;
      // } else {
      //   this.value = this.valueB;
      // }
    }

    return jsxRuntime.exports.jsx("input", {
      type: "range",
      ref: id === 'a' ? inputA : inputB,
      disabled: disabled,
      min: String(min),
      max: String(max),
      step: String(step),
      value: String(value),
      tabIndex: lesser ? 1 : 0,
      onChange: doChange
    });
  }
  function renderHandle(_ref3) {
    var _classnames4;
    var id = _ref3.id,
      lesser = _ref3.lesser,
      showRipple = _ref3.showRipple,
      hover = _ref3.hover,
      label = _ref3.label;
    var onTop = !disabled && id === onTopId;
    var isOverlapping = !disabled && handlesOverlapping;
    var handle = classnames('handle', (_classnames4 = {}, _defineProperty(_classnames4, id, true), _defineProperty(_classnames4, "lesser", lesser), _defineProperty(_classnames4, "hover", hover), _defineProperty(_classnames4, "onTop", onTop), _defineProperty(_classnames4, "isOverlapping", isOverlapping), _classnames4));
    return jsxRuntime.exports.jsxs("div", {
      className: handle,
      children: [jsxRuntime.exports.jsx("div", {
        className: "handleNub",
        children: jsxRuntime.exports.jsx(Elevation, {})
      }), label ? renderLabel(label) : null, showRipple ? jsxRuntime.exports.jsx(Ripple, {
        parent: ref,
        className: id,
        ref: id === 'a' ? rippleA : rippleB
      }) : null, jsxRuntime.exports.jsx(Focus, {
        parent: ref
      })]
    });
  }
  var _useMemo = React.useMemo(function () {
      var labelA = String(valueA);
      var labelB = String(valueB);
      if (range) {
        var a = isFlipped ? valueEndLabel : valueStartLabel;
        var b = isFlipped ? valueStartLabel : valueEndLabel;
        labelA = a !== null && a !== void 0 ? a : labelA;
        labelB = b !== null && b !== void 0 ? b : labelB;
      } else {
        labelB = valueLabel !== null && valueLabel !== void 0 ? valueLabel : labelB;
      }
      return {
        labelA: labelA,
        labelB: labelB
      };
    }, [valueA, valueB]),
    labelA = _useMemo.labelA,
    labelB = _useMemo.labelB;
  var isFlipped = valueA > valueB;
  var getRippleA = React.useCallback(function () {
    // bind to this
    {
      return null;
    }
  }, []);
  var getRippleB = React.useCallback(function () {
    // bind to this
    {
      return null;
    }
  }, []);
  var inputAProps = {
    id: 'a',
    lesser: !isFlipped,
    value: valueA,
    label: labelA,
    getRipple: getRippleA
  };
  var inputBProps = {
    id: 'b',
    lesser: isFlipped,
    value: valueB,
    label: labelB,
    getRipple: getRippleB
  };
  var handleAProps = {
    id: 'a',
    lesser: !isFlipped,
    showRipple: rippleAShowing,
    hover: handleAHover,
    label: labelA
  };
  var handleBProps = {
    id: 'b',
    lesser: isFlipped,
    showRipple: rippleBShowing,
    hover: handleBHover,
    label: labelB
  };
  console.log('containerStyles', containerStyles);
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    style: containerStyles,
    children: [range ? renderInput(inputAProps) : null, renderInput(inputBProps), jsxRuntime.exports.jsx("div", {
      className: track
    }), jsxRuntime.exports.jsx("div", {
      className: "handleContainerPadded",
      children: jsxRuntime.exports.jsx("div", {
        className: "handleContainerBlock",
        children: jsxRuntime.exports.jsxs("div", {
          className: handleContainer,
          children: [range ? renderHandle(handleAProps) : null, renderHandle(handleBProps)]
        })
      })
    })]
  });
};

var BASE = 'mdc-top-app-bar';
var SECTION = "".concat(BASE, "__section");
var CSS_CLASSES$3 = {
  ROOT: BASE,
  ROW: "".concat(BASE, "__row"),
  SECTION: SECTION,
  SECTION_START: "".concat(SECTION, " ").concat(SECTION, "--align-start"),
  SECTION_MIDDLE: "".concat(SECTION, " ").concat(SECTION, "--align-middle"),
  SECTION_END: "".concat(SECTION, " ").concat(SECTION, "--align-end"),
  FIXED: "".concat(BASE, "--fixed"),
  SHORT: "".concat(BASE, "--short"),
  SHORT_COLLAPSED: "".concat(BASE, "--short-collapsed"),
  PROMINENT: "".concat(BASE, "--prominent"),
  DENSE: "".concat(BASE, "--dense"),
  TITLE: "".concat(BASE, "__title"),
  ACTION_ITEM: "".concat(BASE, "__action-item"),
  NAV_ICON: "".concat(BASE, "__navigation-icon")
};

var css_248z$b = ".mdc-top-app-bar__title{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-headline6-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1.25rem;font-size:var(--mdc-typography-headline6-font-size,1.25rem);font-weight:500;font-weight:var(--mdc-typography-headline6-font-weight,500);letter-spacing:.0125em;letter-spacing:var(--mdc-typography-headline6-letter-spacing,.0125em);line-height:2rem;line-height:var(--mdc-typography-headline6-line-height,2rem);overflow:hidden;padding-left:20px;padding-right:0;text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline6-text-decoration,inherit);text-decoration:var(--mdc-typography-headline6-text-decoration,inherit);text-overflow:ellipsis;text-transform:inherit;text-transform:var(--mdc-typography-headline6-text-transform,inherit);white-space:nowrap;z-index:1;a,a:-webkit-any-link{color:inherit;text-decoration:none}}.mdc-top-app-bar__title[dir=rtl],[dir=rtl] .mdc-top-app-bar__title{padding-left:0;padding-right:20px}.mdc-top-app-bar--short-collapsed{border-bottom-left-radius:0;border-bottom-right-radius:24px;border-top-left-radius:0;border-top-right-radius:0}.mdc-top-app-bar--short-collapsed[dir=rtl],[dir=rtl] .mdc-top-app-bar--short-collapsed{border-bottom-left-radius:24px;border-bottom-right-radius:0;border-top-left-radius:0;border-top-right-radius:0}.mdc-top-app-bar--short{left:0;right:auto;top:0;transition:width .25s cubic-bezier(.4,0,.2,1);width:100%;.mdc-top-app-bar__row{height:56px}.mdc-top-app-bar__section{padding:4px}.mdc-top-app-bar__title{opacity:1;transition:opacity .2s cubic-bezier(.4,0,.2,1)}}.mdc-top-app-bar--short[dir=rtl],[dir=rtl] .mdc-top-app-bar--short{left:auto;right:0}.mdc-top-app-bar--short-collapsed{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);transition:width .3s cubic-bezier(.4,0,.2,1);width:56px;.mdc-top-app-bar__title{display:none}.mdc-top-app-bar__action-item{transition:padding .15s cubic-bezier(.4,0,.2,1)}&.mdc-top-app-bar--short-has-action-item{width:112px;.mdc-top-app-bar__section--align-end{padding-left:0;padding-right:12px}}}.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end[dir=rtl],[dir=rtl] .mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end{padding-left:12px;padding-right:0}.mdc-top-app-bar--dense{.mdc-top-app-bar__row{height:48px}.mdc-top-app-bar__section{padding:0 4px}.mdc-top-app-bar__title{padding-left:12px;padding-right:0}}.mdc-top-app-bar--dense .mdc-top-app-bar__title[dir=rtl],[dir=rtl] .mdc-top-app-bar--dense .mdc-top-app-bar__title{padding-left:0;padding-right:12px}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent{.mdc-top-app-bar__row{height:96px}.mdc-top-app-bar__section{padding:0 12px}.mdc-top-app-bar__title{padding-bottom:9px;padding-left:20px;padding-right:0}}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title[dir=rtl],[dir=rtl] .mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title{padding-left:0;padding-right:20px}.mdc-top-app-bar--prominent{.mdc-top-app-bar__row{height:128px}.mdc-top-app-bar__title{align-self:flex-end;padding-bottom:2px}.mdc-top-app-bar__action-item,.mdc-top-app-bar__navigation-icon{align-self:flex-start}}.mdc-top-app-bar--fixed{transition:box-shadow .2s linear}.mdc-top-app-bar--fixed-scrolled{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);transition:box-shadow .2s linear}.mdc-top-app-bar--fixed-adjust{padding-top:64px}.mdc-top-app-bar--dense-fixed-adjust{padding-top:48px}.mdc-top-app-bar--short-fixed-adjust{padding-top:56px}.mdc-top-app-bar--prominent-fixed-adjust{padding-top:128px}.mdc-top-app-bar--dense-prominent-fixed-adjust{padding-top:96px}@media (max-width:599px){.mdc-top-app-bar__row{height:56px}.mdc-top-app-bar__section{padding:4px}.mdc-top-app-bar--short{transition:width .2s cubic-bezier(.4,0,.2,1)}.mdc-top-app-bar--short-collapsed{transition:width .25s cubic-bezier(.4,0,.2,1)}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end{padding-left:0;padding-right:12px}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end[dir=rtl],[dir=rtl] .mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end{padding-left:12px;padding-right:0}.mdc-top-app-bar--prominent .mdc-top-app-bar__title{padding-bottom:6px}.mdc-top-app-bar--fixed-adjust{padding-top:56px}}.mdc-top-app-bar{background-color:var(--md-sys-color-surface);box-sizing:border-box;color:#fff;display:flex;flex-direction:column;justify-content:space-between;position:fixed;width:100%;z-index:4}.mdc-top-app-bar .mdc-top-app-bar__action-item,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon{color:var(--md-sys-color-on-primary)}.mdc-top-app-bar .mdc-top-app-bar__action-item:after,.mdc-top-app-bar .mdc-top-app-bar__action-item:before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:before{background-color:#fff;background-color:var(--mdc-ripple-color,var(--md-sys-color-on-primary))}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-surface--hover:before,.mdc-top-app-bar .mdc-top-app-bar__action-item:hover:before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-surface--hover:before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:hover:before{opacity:.08;opacity:var(--mdc-ripple-hover-opacity,.08)}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded--background-focused:before,.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):focus:before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded--background-focused:before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):focus:before{opacity:.24;opacity:var(--mdc-ripple-focus-opacity,.24);transition-duration:75ms}.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):active:after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):active:after{opacity:.24;opacity:var(--mdc-ripple-press-opacity,.24);transition-duration:75ms}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.24)}.mdc-top-app-bar__row{box-sizing:border-box;display:flex;height:64px;justify-content:space-around;position:relative;width:100%}.mdc-top-app-bar__section{align-items:center;display:inline-flex;flex:1;min-width:0;padding:8px 12px;z-index:1}.mdc-top-app-bar__section--align-start{justify-content:flex-start;order:-1}.mdc-top-app-bar__section--align-end{justify-content:flex-end;order:1}";
styleInject(css_248z$b);

var AppBar = function AppBar(_ref) {
  var _classnames;
  var className = _ref.className,
    fixed = _ref.fixed,
    collapsed = _ref.collapsed,
    _short = _ref["short"],
    prominent = _ref.prominent,
    dense = _ref.dense,
    title = _ref.title,
    children = _ref.children;
  var slots = useSlot(children);
  var classNames = classnames(CSS_CLASSES$3.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$3.FIXED, fixed), _defineProperty(_classnames, CSS_CLASSES$3.SHORT, collapsed || _short), _defineProperty(_classnames, CSS_CLASSES$3.SHORT_COLLAPSED, collapsed), _defineProperty(_classnames, CSS_CLASSES$3.PROMINENT, prominent), _defineProperty(_classnames, CSS_CLASSES$3.DENSE, dense), _classnames));
  return jsxRuntime.exports.jsx("header", {
    className: classNames,
    children: jsxRuntime.exports.jsxs("div", {
      className: CSS_CLASSES$3.ROW,
      children: [jsxRuntime.exports.jsxs("div", {
        className: CSS_CLASSES$3.SECTION_START,
        children: [jsxRuntime.exports.jsx(Icon, {
          className: 'menu',
          children: "menu"
        }), jsxRuntime.exports.jsx("span", {
          className: CSS_CLASSES$3.TITLE,
          children: title
        })]
      }), jsxRuntime.exports.jsx("div", {
        className: CSS_CLASSES$3.SECTION_MIDDLE,
        children: slots['children']
      }), jsxRuntime.exports.jsxs("div", {
        className: CSS_CLASSES$3.SECTION_END,
        children: [slots['tools'], jsxRuntime.exports.jsx(Icon, {
          className: 'more',
          children: "more_horiz"
        })]
      })]
    })
  });
};

var CSS_CLASSES$2 = {
  ROOT: 'mdc-layout',
  COLUMN: 'mdc-layout--column',
  ROW: 'mdc-layout--row'
};

var css_248z$a = ".mdc-layout{--mdc-layout-margin-expanded-3:auto;--mdc-layout-margin-expanded-2:200px;--mdc-layout-margin-expanded-1:auto;--mdc-layout-margin-medium:32px;--mdc-layout-margin-compact:16px;--mdc-layout-body-expanded-3:1040px;--mdc-layout-body-expanded-2:auto;--mdc-layout-body-expanded-1:840px;--mdc-layout-body-medium:auto;--mdc-layout-body-compact:auto;background-color:var(--md-sys-color-surface-container-lowest);height:auto;min-height:100vh;overflow:hidden;position:relative;width:100vh;width:100%}.mdc-layout--row header{bottom:0;height:72px;left:0;position:absolute;right:0;top:0}.mdc-layout--row section{display:flex;flex-direction:row;height:auto;min-height:100vh;padding-top:72px;width:100vh;width:100%}.mdc-layout--column header{bottom:0;left:0;position:absolute;right:0;top:0;width:72px}.mdc-layout--column section{height:100vh;overflow:hidden;padding-left:72px;width:100vh}@media (min-width:840px){.mdc-layout header .menu,.mdc-layout header .more{display:none}}";
styleInject(css_248z$a);

var Layout = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var _ref$navs = _ref.navs,
    navs = _ref$navs === void 0 ? [] : _ref$navs,
    _ref$dir = _ref.dir,
    dir = _ref$dir === void 0 ? 'row' : _ref$dir,
    className = _ref.className,
    children = _ref.children;
  var slots = useSlot(children);
  var classNames = classnames(CSS_CLASSES$2.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES$2.COLUMN, dir === 'column'), _defineProperty(_classnames, CSS_CLASSES$2.ROW, dir === 'row'), _classnames));
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    ref: ref,
    children: [jsxRuntime.exports.jsxs(AppBar, {
      title: slots.title,
      children: [navs !== null && navs !== void 0 && navs.length ? jsxRuntime.exports.jsx(Nav, {
        children: navs.map(function (nav) {
          return jsxRuntime.exports.jsx(Nav.Tab, {
            icon: nav.icon,
            children: nav.label
          }, nav.value);
        })
      }) : null, jsxRuntime.exports.jsx(_Slot, {
        name: "tools",
        children: slots.tools
      })]
    }), jsxRuntime.exports.jsx("section", {
      children: children
    })]
  });
});

var css_248z$9 = ".md-slider{border-right:1px solid #ccc;height:100%;width:300px}";
styleInject(css_248z$9);

var Sider = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
    children = _ref.children;
  var classNames = classnames('md-slider', className, {});
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    ref: ref,
    children: children
  });
});

// most Object methods by ES6 should accept primitives
var $export = _export;
var core = _core.exports;
var fails = _fails;
var _objectSap = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

// 19.1.2.14 Object.keys(O)
var toObject = _toObject;
var $keys = _objectKeys;
_objectSap('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

var TabsContext = /*#__PURE__*/React.createContext({});

var css_248z$8 = ".mdc-tab{display:inline-flex;flex:1;outline:none;vertical-align:middle}.mdc-tab.bar{--_active-indicator-color:var(\n    --md-primary-tab-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-height:var(\n    --md-primary-tab-active-indicator-height,3px\n  );--_active-indicator-shape:var(\n    --md-primary-tab-active-indicator-shape,3px 3px 0px 0px\n  );--_active-focus-state-layer-color:var(\n    --md-primary-tab-active-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-focus-state-layer-opacity:var(\n    --md-primary-tab-active-focus-state-layer-opacity,0.12\n  );--_active-hover-state-layer-color:var(\n    --md-primary-tab-active-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-hover-state-layer-opacity:var(\n    --md-primary-tab-active-hover-state-layer-opacity,0.08\n  );--_active-pressed-state-layer-color:var(\n    --md-primary-tab-active-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-pressed-state-layer-opacity:var(\n    --md-primary-tab-active-pressed-state-layer-opacity,0.12\n  );--_container-color:var(\n    --md-primary-tab-container-color,var(--md-sys-color-surface,#fef7ff)\n  );--_container-elevation:var(--md-primary-tab-container-elevation,0);--_container-height:var(--md-primary-tab-container-height,48px);--_container-shape:var(--md-primary-tab-container-shape,0px);--_divider-color:var(\n    --md-primary-tab-divider-color,var(--md-sys-color-outline-variant,#cac4d0)\n  );--_divider-thickness:var(--md-primary-tab-divider-thickness,1px);--_label-text-type:var(\n    --md-primary-tab-label-text-type,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n  );--_focus-state-layer-color:var(\n    --md-primary-tab-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-state-layer-opacity:var(\n    --md-primary-tab-focus-state-layer-opacity,0.12\n  );--_hover-state-layer-color:var(\n    --md-primary-tab-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-primary-tab-hover-state-layer-opacity,0.08\n  );--_pressed-state-layer-color:var(\n    --md-primary-tab-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-opacity:var(\n    --md-primary-tab-pressed-state-layer-opacity,0.12\n  );--_active-focus-icon-color:var(\n    --md-primary-tab-active-focus-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-hover-icon-color:var(\n    --md-primary-tab-active-hover-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-icon-color:var(\n    --md-primary-tab-active-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-pressed-icon-color:var(\n    --md-primary-tab-active-pressed-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_icon-size:var(--md-primary-tab-icon-size,24px);--_focus-icon-color:var(\n    --md-primary-tab-focus-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-icon-color:var(\n    --md-primary-tab-hover-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_icon-color:var(\n    --md-primary-tab-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-icon-color:var(\n    --md-primary-tab-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-focus-label-text-color:var(\n    --md-primary-tab-active-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-hover-label-text-color:var(\n    --md-primary-tab-active-hover-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-label-text-color:var(\n    --md-primary-tab-active-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-pressed-label-text-color:var(\n    --md-primary-tab-active-pressed-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-label-text-color:var(\n    --md-primary-tab-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-primary-tab-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_label-text-color:var(\n    --md-primary-tab-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-label-text-color:var(\n    --md-primary-tab-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);--md-focus-ring-shape:8px}.mdc-tab.secondary{--_active-indicator-color:var(\n    --md-secondary-tab-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-height:var(\n    --md-secondary-tab-active-indicator-height,2px\n  );--_active-label-text-color:var(\n    --md-secondary-tab-active-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_container-color:var(\n    --md-secondary-tab-container-color,var(--md-sys-color-surface,#fef7ff)\n  );--_container-elevation:var(--md-secondary-tab-container-elevation,0);--_container-height:var(--md-secondary-tab-container-height,48px);--_container-shape:var(--md-secondary-tab-container-shape,0px);--_focus-label-text-color:var(\n    --md-secondary-tab-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-state-layer-color:var(\n    --md-secondary-tab-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-state-layer-opacity:var(\n    --md-secondary-tab-focus-state-layer-opacity,0.12\n  );--_hover-label-text-color:var(\n    --md-secondary-tab-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-color:var(\n    --md-secondary-tab-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-secondary-tab-hover-state-layer-opacity,0.08\n  );--_label-text-type:var(\n    --md-secondary-tab-label-text-type,var(\n      --md-sys-typescale-title-small,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_pressed-label-text-color:var(\n    --md-secondary-tab-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_pressed-state-layer-color:var(\n    --md-secondary-tab-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_pressed-state-layer-opacity:var(\n    --md-secondary-tab-pressed-state-layer-opacity,0.12\n  );--_divider-color:var(\n    --md-secondary-tab-divider-color,var(--md-sys-color-outline-variant,#cac4d0)\n  );--_divider-thickness:var(--md-secondary-tab-divider-thickness,1px);--_active-focus-icon-color: ;--_active-focus-label-text-color:var(\n    --md-secondary-tab-active-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-focus-state-layer-color:var(\n    --md-secondary-tab-active-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-focus-state-layer-opacity:var(\n    --md-secondary-tab-active-focus-state-layer-opacity,0.12\n  );--_active-hover-icon-color: ;--_active-hover-label-text-color:var(\n    --md-secondary-tab-active-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-hover-state-layer-color:var(\n    --md-secondary-tab-active-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-hover-state-layer-opacity:var(\n    --md-secondary-tab-active-hover-state-layer-opacity,0.08\n  );--_active-icon-color:var(\n    --md-secondary-tab-active-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-indicator-shape:var(\n    --md-secondary-tab-active-indicator-shape,0\n  );--_active-pressed-icon-color: ;--_active-pressed-label-text-color:var(\n    --md-secondary-tab-active-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-pressed-state-layer-color:var(\n    --md-secondary-tab-active-pressed-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-pressed-state-layer-opacity:var(\n    --md-secondary-tab-active-pressed-state-layer-opacity,0.12\n  );--_label-text-color:var(\n    --md-secondary-tab-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-icon-color:var(\n    --md-secondary-tab-focus-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-icon-color:var(\n    --md-secondary-tab-hover-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_icon-size:var(--md-secondary-tab-icon-size,24px);--_icon-color:var(\n    --md-secondary-tab-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-icon-color:var(\n    --md-secondary-tab-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  )}.mdc-tab.indicator{--_active-indicator-color:var(\n    --md-primary-tab-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-height:var(\n    --md-primary-tab-active-indicator-height,3px\n  );--_active-indicator-shape:var(\n    --md-primary-tab-active-indicator-shape,3px 3px 0px 0px\n  );--_active-focus-state-layer-color:var(\n    --md-primary-tab-active-focus-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-focus-state-layer-opacity:var(\n    --md-primary-tab-active-focus-state-layer-opacity,0.12\n  );--_active-hover-state-layer-color:var(\n    --md-primary-tab-active-hover-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-hover-state-layer-opacity:var(\n    --md-primary-tab-active-hover-state-layer-opacity,0.08\n  );--_active-pressed-state-layer-color:var(\n    --md-primary-tab-active-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-pressed-state-layer-opacity:var(\n    --md-primary-tab-active-pressed-state-layer-opacity,0.12\n  );--_container-color:transparent;--_container-elevation:var(--md-primary-tab-container-elevation,0);--_container-height:var(--md-primary-tab-container-height,48px);--_container-shape:var(--md-primary-tab-container-shape,0px);--_divider-color:var(\n    --md-primary-tab-divider-color,var(--md-sys-color-outline-variant,#cac4d0)\n  );--_divider-thickness:var(--md-primary-tab-divider-thickness,1px);--_label-text-type:var(\n    --md-primary-tab-label-text-type,500 0.875rem/1.25rem var(--md-ref-typeface-plain,Roboto)\n  );--_focus-state-layer-color:var(\n    --md-primary-tab-focus-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-state-layer-opacity:var(\n    --md-primary-tab-focus-state-layer-opacity,0.12\n  );--_hover-state-layer-color:var(\n    --md-primary-tab-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-primary-tab-hover-state-layer-opacity,0.08\n  );--_pressed-state-layer-color:var(\n    --md-primary-tab-pressed-state-layer-color,var(--md-sys-color-primary,#6750a4)\n  );--_pressed-state-layer-opacity:var(\n    --md-primary-tab-pressed-state-layer-opacity,0.12\n  );--_active-focus-icon-color:var(\n    --md-primary-tab-active-focus-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-hover-icon-color:var(\n    --md-primary-tab-active-hover-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-icon-color:var(\n    --md-primary-tab-active-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-pressed-icon-color:var(\n    --md-primary-tab-active-pressed-icon-color,var(--md-sys-color-primary,#6750a4)\n  );--_icon-size:var(--md-primary-tab-icon-size,24px);--_focus-icon-color:var(\n    --md-primary-tab-focus-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-icon-color:var(\n    --md-primary-tab-hover-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_icon-color:var(\n    --md-primary-tab-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-icon-color:var(\n    --md-primary-tab-pressed-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_active-focus-label-text-color:var(\n    --md-primary-tab-active-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-hover-label-text-color:var(\n    --md-primary-tab-active-hover-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-label-text-color:var(\n    --md-primary-tab-active-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-pressed-label-text-color:var(\n    --md-primary-tab-active-pressed-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-label-text-color:var(\n    --md-primary-tab-focus-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-primary-tab-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_label-text-color:var(\n    --md-primary-tab-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_pressed-label-text-color:var(\n    --md-primary-tab-pressed-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--md-ripple-focus-color:var(--_focus-state-layer-color);--md-ripple-focus-opacity:var(--_focus-state-layer-opacity);--md-ripple-hover-color:var(--_hover-state-layer-color);--md-ripple-hover-opacity:var(--_hover-state-layer-opacity);--md-ripple-pressed-color:var(--_pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_pressed-state-layer-opacity);--md-focus-ring-shape:8px}.mdc-tab.selected .mdc-focus-ring{margin-bottom:calc(var(--_active-indicator-height) + 1px)}.mdc-tab button{align-items:center;-webkit-appearance:none;background:transparent;background-color:var(--_container-color);border:none;border-bottom:var(--_divider-thickness) solid var(--_divider-color);box-sizing:border-box;color:var(--_label-text-color);display:inline-flex;font:var(--_label-text-type);justify-content:center;margin:0;outline:none;padding:0;position:relative;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle;width:100%;z-index:0}.mdc-tab.indicator button{border:none}.mdc-tab button::-moz-focus-inner{border:0;padding:0}.mdc-tab .mdc-ripple,.mdc-tab button{border-radius:var(--_container-shape)}.mdc-tab .touch{height:48px;left:0;position:absolute;right:0;top:50%;transform:translateY(-50%)}.mdc-tab .content{align-items:center;box-sizing:border-box;display:inline-flex;flex-direction:column;gap:4px;justify-content:center;max-height:calc(var(--_container-height) + 16px);min-height:48px;padding:8px 16px;position:relative}.mdc-tab .content.inline-icon{flex-direction:row}.mdc-tab .line{background:var(--_active-indicator-color);border-radius:var(--_active-indicator-shape);box-sizing:border-box;height:var(--_active-indicator-height);inset:auto 0 0 0;opacity:0;position:absolute;transform-origin:bottom left;z-index:-1}.mdc-tab button ::slotted([slot=icon]){fill:currentColor;color:var(--_icon-color);display:inline-flex;font-size:var(--_icon-size);height:var(--_icon-size);position:relative;width:var(--_icon-size);writing-mode:horizontal-tb}.mdc-tab button:hover{color:var(--_hover-label-text-color);cursor:pointer}.mdc-tab button:hover ::slotted([slot=icon]){color:var(--_hover-icon-color)}.mdc-tab button:focus{color:var(--_focus-label-text-color)}.mdc-tab button:focus ::slotted([slot=icon]){color:var(--_focus-icon-color)}.mdc-tab button:active{color:var(--_pressed-label-text-color);outline:none}.mdc-tab button:active ::slotted([slot=icon]){color:var(--_pressed-icon-color)}.mdc-tab.selected .line{opacity:1}.mdc-tab.selected button{--md-elevation-level:var(--_container-elevation);--md-ripple-focus-color:var(--_active-focus-state-layer-color);--md-ripple-focus-opacity:var(--_active-focus-state-layer-opacity);--md-ripple-hover-color:var(--_active-hover-state-layer-color);--md-ripple-hover-opacity:var(--_active-hover-state-layer-opacity);--md-ripple-pressed-color:var(--_active-pressed-state-layer-color);--md-ripple-pressed-opacity:var(--_active-pressed-state-layer-opacity);color:var(--_active-label-text-color)}.mdc-tab.selected button ::slotted([slot=icon]){color:var(--_active-icon-color)}.mdc-tab.selected button:hover{color:var(--_active-hover-label-text-color)}.mdc-tab.selected button:hover ::slotted([slot=icon]){color:var(--_active-hover-icon-color)}.mdc-tab.selected button:focus{color:var(--_active-focus-label-text-color)}.mdc-tab.selected button:focus ::slotted([slot=icon]){color:var(--_active-focus-icon-color)}.mdc-tab.selected button:active{color:var(--_active-pressed-label-text-color)}.mdc-tab.selected button:active ::slotted([slot=icon]){color:var(--_active-pressed-icon-color)}.mdc-tab[disabled]{cursor:default;opacity:.38;pointer-events:none}.mdc-tab.secondary .content{width:100%}.mdc-tab.secondary .line{min-width:100%}.mdc-tab.vertical{flex:0}.mdc-tab.vertical button{border-bottom:none;border-right:var(--_divider-thickness) solid var(--_divider-color);flex-direction:row;width:100%}.mdc-tab.vertical .content{width:100%}.mdc-tab.vertical .line{height:100%;inset:0 0 0 auto;min-width:var(--_active-indicator-height)}.mdc-tab.vertical.primary{--_active-indicator-shape:9999px 0 0 9999px}.mdc-tab{white-space:nowrap}@media (forced-colors:active){.mdc-tab,.mdc-tab[variant]{--_active-indicator-color:CanvasText}}";
styleInject(css_248z$8);

var Tab = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var className = _ref.className,
    children = _ref.children,
    name = _ref.name;
  var _useContext = React.useContext(TabsContext),
    toggleActive = _useContext.toggleActive,
    active = _useContext.active,
    state = _useContext.state,
    variant = _useContext.variant,
    onChange = _useContext.onChange;
  var slots = useSlot(children);
  var $el = ref || React.useRef(null);
  var classNames = classnames('mdc-tab', className, (_classnames = {}, _defineProperty(_classnames, 'bar', variant === 'bar'), _defineProperty(_classnames, 'indicator', variant === 'indicator'), _defineProperty(_classnames, 'selected', active === name), _defineProperty(_classnames, 'primary', state === 'primary'), _defineProperty(_classnames, 'secondary', state === 'secondary'), _defineProperty(_classnames, 'vertical', state === 'vertical'), _classnames));
  function onActive() {
    toggleActive(name);
    onChange === null || onChange === void 0 ? void 0 : onChange(name);
  }
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    children: jsxRuntime.exports.jsxs("button", {
      onClick: onActive,
      children: [jsxRuntime.exports.jsx(Focus, {
        parent: $el
      }), jsxRuntime.exports.jsx(Elevation, {}), jsxRuntime.exports.jsx(Ripple, {
        parent: $el
      }), jsxRuntime.exports.jsx("span", {
        className: "touch"
      }), jsxRuntime.exports.jsxs("div", {
        className: "content",
        children: [slots.icon, jsxRuntime.exports.jsx("span", {
          className: "label",
          children: children
        }), jsxRuntime.exports.jsx("div", {
          className: "line"
        })]
      })]
    })
  });
});

var css_248z$7 = ".mdc-tabs{align-items:end;box-sizing:border-box;display:flex;justify-content:space-between;overflow:auto;position:relative;scroll-behavior:smooth;scrollbar-width:none}.mdc-tabs[hidden]{display:none}.mdc-tabs::-webkit-scrollbar{display:none}.mdc-tabs.vertical{align-items:stretch;display:inline-flex;flex-direction:column;gap:0}.mdc-tabs-content{padding:10px}";
styleInject(css_248z$7);

function Tabs(_ref) {
  var _classnames;
  var className = _ref.className,
    children = _ref.children,
    state = _ref.state,
    variant = _ref.variant,
    value = _ref.value,
    onChange = _ref.onChange;
  var classNames = classnames('mdc-tabs', className, (_classnames = {}, _defineProperty(_classnames, 'bar', variant === 'bar'), _defineProperty(_classnames, 'indicator', variant === 'indicator'), _defineProperty(_classnames, 'primary', state === 'primary'), _defineProperty(_classnames, 'secondary', state === 'secondary'), _defineProperty(_classnames, 'vertical', state === 'vertical'), _classnames));
  var slots = useSlot(children);
  var activeState = useActive(children, value);
  var hasContent = React.useMemo(function () {
    return Object.keys(slots).length > 1;
  }, [slots]);
  return jsxRuntime.exports.jsxs(TabsContext.Provider, {
    value: _objectSpread2(_objectSpread2({}, activeState), {}, {
      state: state,
      variant: variant,
      onChange: onChange
    }),
    children: [jsxRuntime.exports.jsx("div", {
      className: classNames,
      children: slots.children
    }), hasContent ? jsxRuntime.exports.jsx("div", {
      className: 'mdc-tabs-content',
      children: slots[activeState.active]
    }) : null]
  });
}
Tabs.Tab = Tab;

var css_248z$6 = ".mdc-card{background-color:#fff;background-color:var(--mdc-theme-surface,#fff);box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);display:flex;flex-direction:column;position:relative}.mdc-card,.mdc-card:after{border-radius:4px;border-radius:var(--mdc-shape-medium,4px);box-sizing:border-box}.mdc-card:after{border:1px solid transparent;border-radius:inherit;content:\"\";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}.mdc-card__primary-action{box-sizing:border-box;color:inherit;cursor:pointer;display:flex;flex-direction:column;outline:none;overflow:hidden;position:relative;text-decoration:none}.mdc-card__primary-action:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.mdc-card__primary-action:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.mdc-card__actions{align-items:center;box-sizing:border-box;display:flex;flex-direction:row;min-height:52px;padding:8px}.mdc-card__actions--full-bleed{padding:0}.mdc-card__action-buttons,.mdc-card__action-icons{align-items:center;box-sizing:border-box;display:flex;flex-direction:row}.mdc-card__action-icons{color:rgba(0,0,0,.6);flex-grow:1;justify-content:flex-end}.mdc-card__action-buttons+.mdc-card__action-icons{margin-left:16px;margin-right:0}.mdc-card__action-buttons+.mdc-card__action-icons[dir=rtl],[dir=rtl] .mdc-card__action-buttons+.mdc-card__action-icons{margin-left:0;margin-right:16px}.mdc-card__action{align-items:center;box-sizing:border-box;cursor:pointer;display:inline-flex;flex-direction:row;justify-content:center;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdc-card__action:focus{outline:none}.mdc-card__action--button{margin-left:0;margin-right:8px;padding:0 8px}.mdc-card__action--button[dir=rtl],[dir=rtl] .mdc-card__action--button{margin-left:8px;margin-right:0}.mdc-card__action--button:last-child,.mdc-card__action--button:last-child[dir=rtl],[dir=rtl] .mdc-card__action--button:last-child{margin-left:0;margin-right:0}.mdc-card__actions--full-bleed .mdc-card__action--button{height:auto;justify-content:space-between;margin:0;max-height:none;padding:8px 16px;text-align:left;width:100%}.mdc-card__actions--full-bleed .mdc-card__action--button[dir=rtl],[dir=rtl] .mdc-card__actions--full-bleed .mdc-card__action--button{text-align:right}.mdc-card__action--icon{margin:-6px 0;padding:12px}.mdc-card__action--icon:not(:disabled){color:rgba(0,0,0,.6)}";
styleInject(css_248z$6);

var Card = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
    children = _ref.children;
  var $el = ref || React.useRef(null);
  var slots = useSlot(children);
  var classNames = classnames('mdc-card', className, {});
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    ref: $el,
    children: jsxRuntime.exports.jsxs("div", {
      className: "mdc-card__primary-action",
      children: [slots.header, jsxRuntime.exports.jsx(Ripple, {
        parent: $el
      })]
    })
  });
});

var md5$1 = {exports: {}};

var crypt = {exports: {}};

(function () {
  var base64map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
    crypt$1 = {
      // Bit-wise rotation left
      rotl: function (n, b) {
        return n << b | n >>> 32 - b;
      },
      // Bit-wise rotation right
      rotr: function (n, b) {
        return n << 32 - b | n >>> b;
      },
      // Swap big-endian to little-endian and vice versa
      endian: function (n) {
        // If number given, swap endian
        if (n.constructor == Number) {
          return crypt$1.rotl(n, 8) & 0x00FF00FF | crypt$1.rotl(n, 24) & 0xFF00FF00;
        }

        // Else, assume array and swap all items
        for (var i = 0; i < n.length; i++) n[i] = crypt$1.endian(n[i]);
        return n;
      },
      // Generate an array of any length of random bytes
      randomBytes: function (n) {
        for (var bytes = []; n > 0; n--) bytes.push(Math.floor(Math.random() * 256));
        return bytes;
      },
      // Convert a byte array to big-endian 32-bit words
      bytesToWords: function (bytes) {
        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8) words[b >>> 5] |= bytes[i] << 24 - b % 32;
        return words;
      },
      // Convert big-endian 32-bit words to a byte array
      wordsToBytes: function (words) {
        for (var bytes = [], b = 0; b < words.length * 32; b += 8) bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);
        return bytes;
      },
      // Convert a byte array to a hex string
      bytesToHex: function (bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
        }
        return hex.join('');
      },
      // Convert a hex string to a byte array
      hexToBytes: function (hex) {
        for (var bytes = [], c = 0; c < hex.length; c += 2) bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
      },
      // Convert a byte array to a base-64 string
      bytesToBase64: function (bytes) {
        for (var base64 = [], i = 0; i < bytes.length; i += 3) {
          var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
          for (var j = 0; j < 4; j++) if (i * 8 + j * 6 <= bytes.length * 8) base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 0x3F));else base64.push('=');
        }
        return base64.join('');
      },
      // Convert a base-64 string to a byte array
      base64ToBytes: function (base64) {
        // Remove non-base-64 characters
        base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');
        for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
          if (imod4 == 0) continue;
          bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
        }
        return bytes;
      }
    };
  crypt.exports = crypt$1;
})();

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function (str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },
    // Convert a byte array to a string
    bytesToString: function (bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },
  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function (str) {
      for (var bytes = [], i = 0; i < str.length; i++) bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },
    // Convert a byte array to a string
    bytesToString: function (bytes) {
      for (var str = [], i = 0; i < bytes.length; i++) str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};
var charenc_1 = charenc;

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var isBuffer_1 = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};
function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

(function () {
  var crypt$1 = crypt.exports,
    utf8 = charenc_1.utf8,
    isBuffer = isBuffer_1,
    bin = charenc_1.bin,
    // The core
    md5 = function (message, options) {
      // Convert to byte array
      if (message.constructor == String) {
        if (options && options.encoding === 'binary') message = bin.stringToBytes(message);else message = utf8.stringToBytes(message);
      } else if (isBuffer(message)) message = Array.prototype.slice.call(message, 0);else if (!Array.isArray(message) && message.constructor !== Uint8Array) message = message.toString();
      // else, assume byte array already

      var m = crypt$1.bytesToWords(message),
        l = message.length * 8,
        a = 1732584193,
        b = -271733879,
        c = -1732584194,
        d = 271733878;

      // Swap endian
      for (var i = 0; i < m.length; i++) {
        m[i] = (m[i] << 8 | m[i] >>> 24) & 0x00FF00FF | (m[i] << 24 | m[i] >>> 8) & 0xFF00FF00;
      }

      // Padding
      m[l >>> 5] |= 0x80 << l % 32;
      m[(l + 64 >>> 9 << 4) + 14] = l;

      // Method shortcuts
      var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;
      for (var i = 0; i < m.length; i += 16) {
        var aa = a,
          bb = b,
          cc = c,
          dd = d;
        a = FF(a, b, c, d, m[i + 0], 7, -680876936);
        d = FF(d, a, b, c, m[i + 1], 12, -389564586);
        c = FF(c, d, a, b, m[i + 2], 17, 606105819);
        b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
        a = FF(a, b, c, d, m[i + 4], 7, -176418897);
        d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
        c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
        b = FF(b, c, d, a, m[i + 7], 22, -45705983);
        a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
        d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
        c = FF(c, d, a, b, m[i + 10], 17, -42063);
        b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
        a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
        d = FF(d, a, b, c, m[i + 13], 12, -40341101);
        c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
        b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
        a = GG(a, b, c, d, m[i + 1], 5, -165796510);
        d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
        c = GG(c, d, a, b, m[i + 11], 14, 643717713);
        b = GG(b, c, d, a, m[i + 0], 20, -373897302);
        a = GG(a, b, c, d, m[i + 5], 5, -701558691);
        d = GG(d, a, b, c, m[i + 10], 9, 38016083);
        c = GG(c, d, a, b, m[i + 15], 14, -660478335);
        b = GG(b, c, d, a, m[i + 4], 20, -405537848);
        a = GG(a, b, c, d, m[i + 9], 5, 568446438);
        d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
        c = GG(c, d, a, b, m[i + 3], 14, -187363961);
        b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
        a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
        d = GG(d, a, b, c, m[i + 2], 9, -51403784);
        c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
        b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
        a = HH(a, b, c, d, m[i + 5], 4, -378558);
        d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
        c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
        b = HH(b, c, d, a, m[i + 14], 23, -35309556);
        a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
        d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
        c = HH(c, d, a, b, m[i + 7], 16, -155497632);
        b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
        a = HH(a, b, c, d, m[i + 13], 4, 681279174);
        d = HH(d, a, b, c, m[i + 0], 11, -358537222);
        c = HH(c, d, a, b, m[i + 3], 16, -722521979);
        b = HH(b, c, d, a, m[i + 6], 23, 76029189);
        a = HH(a, b, c, d, m[i + 9], 4, -640364487);
        d = HH(d, a, b, c, m[i + 12], 11, -421815835);
        c = HH(c, d, a, b, m[i + 15], 16, 530742520);
        b = HH(b, c, d, a, m[i + 2], 23, -995338651);
        a = II(a, b, c, d, m[i + 0], 6, -198630844);
        d = II(d, a, b, c, m[i + 7], 10, 1126891415);
        c = II(c, d, a, b, m[i + 14], 15, -1416354905);
        b = II(b, c, d, a, m[i + 5], 21, -57434055);
        a = II(a, b, c, d, m[i + 12], 6, 1700485571);
        d = II(d, a, b, c, m[i + 3], 10, -1894986606);
        c = II(c, d, a, b, m[i + 10], 15, -1051523);
        b = II(b, c, d, a, m[i + 1], 21, -2054922799);
        a = II(a, b, c, d, m[i + 8], 6, 1873313359);
        d = II(d, a, b, c, m[i + 15], 10, -30611744);
        c = II(c, d, a, b, m[i + 6], 15, -1560198380);
        b = II(b, c, d, a, m[i + 13], 21, 1309151649);
        a = II(a, b, c, d, m[i + 4], 6, -145523070);
        d = II(d, a, b, c, m[i + 11], 10, -1120210379);
        c = II(c, d, a, b, m[i + 2], 15, 718787259);
        b = II(b, c, d, a, m[i + 9], 21, -343485551);
        a = a + aa >>> 0;
        b = b + bb >>> 0;
        c = c + cc >>> 0;
        d = d + dd >>> 0;
      }
      return crypt$1.endian([a, b, c, d]);
    };

  // Auxiliary functions
  md5._ff = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return (n << s | n >>> 32 - s) + b;
  };
  md5._gg = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return (n << s | n >>> 32 - s) + b;
  };
  md5._hh = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return (n << s | n >>> 32 - s) + b;
  };
  md5._ii = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return (n << s | n >>> 32 - s) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;
  md5$1.exports = function (message, options) {
    if (message === undefined || message === null) throw new Error('Illegal argument ' + message);
    var digestbytes = crypt$1.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt$1.bytesToHex(digestbytes);
  };
})();

var css_248z$5 = ".mdc-form{display:flex;flex-direction:column}.mdc-form .mdc-form-item{margin:10px 0}";
styleInject(css_248z$5);

var _excluded$3 = ["name", "label", "variant", "onSubmit", "children", "type", "disabled", "value"];
function Form(_ref) {
  var children = _ref.children,
    className = _ref.className;
  var classNames = classnames('mdc-form', className);
  var _useState = React.useState({}),
    _useState2 = _slicedToArray(_useState, 2),
    fileds = _useState2[0],
    setFileds = _useState2[1];
  var _useState3 = React.useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    requireds = _useState4[0],
    setRequired = _useState4[1];
  React.useEffect(function () {
    var list = [];
    var params = {};
    React__default["default"].Children.map(children, function (child) {
      if (child.props.required) {
        list.push(child.props.name);
      }
      if (child.props.value) {
        params[child.props.name] = child.props.value;
      }
    });
    setRequired(list);
    setFileds(params);
  }, []);
  return jsxRuntime.exports.jsx("form", {
    className: classNames,
    children: React__default["default"].Children.map(children, function (child) {
      var element = /*#__PURE__*/React__default["default"].cloneElement(child);
      var isField = element.type.displayName !== 'Button';
      var _element$props = element.props,
        name = _element$props.name,
        label = _element$props.label,
        variant = _element$props.variant,
        onSubmit = _element$props.onSubmit,
        children = _element$props.children,
        type = _element$props.type,
        disabled = _element$props.disabled,
        value = _element$props.value,
        props = _objectWithoutProperties(_element$props, _excluded$3);
      var isMd5 = element.props.type === 'password';
      var className = classnames('mdc-form-item', element.props.className);
      function restValue(v) {
        if (isMd5) {
          return md5$1.exports(v);
        } else {
          return v;
        }
      }
      function doChange(value) {
        var v = restValue(value);
        setFileds(function (res) {
          var result = _objectSpread2(_objectSpread2({}, res), {}, _defineProperty({}, name, v));
          return result;
        });
      }
      function doSubmit() {
        var list = requireds.filter(function (key) {
          return fileds[key];
        });
        if (requireds.length && requireds.length === list.length) {
          onSubmit(fileds);
        }
        if (!requireds.length) {
          onSubmit(fileds);
        }
      }
      var events = isField ? {
        onChange: doChange
      } : {
        onClick: doSubmit
      };
      return jsxRuntime.exports.jsx(element.type, _objectSpread2(_objectSpread2({}, props), {}, {
        className: className,
        name: name,
        label: label,
        children: children,
        variant: variant,
        type: type,
        value: value,
        disabled: disabled
      }, events));
    })
  });
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function parse(uuid) {
  if (!validate(uuid)) {
    throw TypeError('Invalid UUID');
  }
  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = parse(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`

    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  } // Function#name is not settable on some platforms (#270)

  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support

  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);
    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */

function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';
  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }
  return output;
}
/**
 * Calculate output length with padding and bit length
 */

function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */

function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */

function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }
  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */

function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */

function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */

function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

v35('v3', 0x30, md5);

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

v35('v5', 0x50, sha1);

var client = {};

var m = require$$0__default["default"];
if (process.env.NODE_ENV === 'production') {
  client.createRoot = m.createRoot;
  client.hydrateRoot = m.hydrateRoot;
} else {
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  client.createRoot = function (c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
  client.hydrateRoot = function (c, h, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.hydrateRoot(c, h, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}

var Notice = function Notice(_ref) {
  var children = _ref.children,
    onClose = _ref.onClose,
    id = _ref.id;
  var duration = 1.5;
  var closeTimer;
  function close() {
    clearCloseTimer();
    onClose(id);
  }
  function startCloseTimer() {
    closeTimer = window.setTimeout(function () {
      close();
    }, duration * 1000);
  }
  function clearCloseTimer() {
    if (closeTimer) {
      clearTimeout(closeTimer);
      closeTimer = null;
    }
  }
  function onMouseEnter() {
    clearCloseTimer();
  }
  function onMouseLeave() {
    startCloseTimer();
  }
  React.useEffect(function () {
    startCloseTimer();
  }, []);
  return jsxRuntime.exports.jsx("div", {
    className: 'container',
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    children: children
  });
};

var Message = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classnames;
  var className = _ref.className,
    type = _ref.type;
  var classNames = classnames('mdc-message', className, (_classnames = {}, _defineProperty(_classnames, 'info', type === 'info'), _defineProperty(_classnames, 'error', type === 'error'), _defineProperty(_classnames, 'warn', type === 'warn'), _defineProperty(_classnames, 'success', type === 'success'), _classnames));
  var _useState = React.useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    list = _useState2[0],
    setList = _useState2[1];
  function doRemove(key) {
    setList(function (res) {
      return res.filter(function (item) {
        return item.key !== key;
      });
    });
  }
  React.useImperativeHandle(ref, function () {
    return {
      add: function add(data) {
        setList(function (res) {
          return res.concat([data]);
        });
      },
      remove: function remove(key) {
        doRemove(key);
      }
    };
  }, []);
  return jsxRuntime.exports.jsx(Dialog, {
    className: classNames,
    ref: ref,
    visiable: true,
    isMessage: true,
    children: list.map(function (_ref2) {
      var text = _ref2.text,
        key = _ref2.key,
        type = _ref2.type;
      return jsxRuntime.exports.jsx(Notice, {
        id: key,
        onClose: doRemove,
        children: jsxRuntime.exports.jsx(Dialog.Container, {
          type: type,
          children: text
        })
      }, key);
    })
  });
});
Message.instance = function (type, cb) {
  var ref = function ref(Message) {
    cb({
      notice: function notice(message) {
        var _Message$add;
        Message === null || Message === void 0 ? void 0 : (_Message$add = Message.add) === null || _Message$add === void 0 ? void 0 : _Message$add.call(Message, message);
      },
      component: Message,
      removeNotice: function removeNotice(key) {
        var _Message$remove;
        Message === null || Message === void 0 ? void 0 : (_Message$remove = Message.remove) === null || _Message$remove === void 0 ? void 0 : _Message$remove.call(Message, key);
      }
    });
  };
  var div = document.createElement('div');
  div.setAttribute('id', 'message');
  document.body.appendChild(div);
  var root = client.createRoot(div);
  root.render(jsxRuntime.exports.jsx(Message, {
    ref: ref,
    type: type
  }));
};

var css_248z$4 = ":root{--md-sys-state-hover-state-layer-opacity:0.08;--md-sys-state-focus-state-layer-opacity:0.12;--md-sys-state-pressed-state-layer-opacity:0.12;--md-sys-state-drag-state-layer-opacity:0.16;--md-sys-shape-corner-full:9999px}.mdc-message{flex-direction:column;justify-content:flex-start}.mdc-message .container{-webkit-padding-after:0;-webkit-padding-before:0;background:#fff;border-radius:5px;box-shadow:0 1px 3px 0 rgba(0,0,0,.3),0 4px 8px 3px rgba(0,0,0,.15);margin:10px auto;min-block-size:40px;min-inline-size:100px;padding-block-end:0;padding-block-start:0;position:relative}.mdc-message .container .content{-webkit-margin-after:5px;-webkit-margin-before:5px;align-items:center;display:flex;flex-direction:row;justify-content:flex-start;line-height:30px;margin-block-end:5px;margin-block-start:5px;overflow-wrap:break-word;white-space:pre-wrap;word-break:break-all}.mdc-message .container .content .mdc-icon{flex:1;max-width:30px}.mdc-message .container .content span{display:inline-block;flex:2;padding-left:6px}.mdc-message.info .container{background-color:var(--md-sys-color-primary-container);color:var(--md-sys-color-on-primary-container)}.mdc-message.success .container{background-color:var(--md-sys-color-tertiary-container);color:var(--md-sys-color-on-tertiary-container)}.mdc-message.warn .container{background-color:var(--md-sys-color-secondary-container);color:var(--md-sys-color-on-secondary-container)}.mdc-message.error .container{background-color:var(--md-sys-color-error-container);color:var(--md-sys-color-on-error-container)}";
styleInject(css_248z$4);

var messageInstance;
function notice(args) {
  var target = args.key;
  var closePromise = new Promise(function (_resolve) {
    // const callback = () => {
    //   if (typeof args.onClose === 'function') {
    //     args.onClose();
    //   }
    //   return resolve(true);
    // };
    if (messageInstance) {
      messageInstance.notice(args);
    } else {
      Message.instance(args.type, function (instance) {
        messageInstance = instance;
        messageInstance.notice(args);
      });
    }
  });
  var result = function result() {
    if (messageInstance) {
      messageInstance.removeNotice(target);
    }
  };
  result.then = function (reselove, rejected) {
    closePromise.then(reselove, rejected);
  };
  result.promise = closePromise;
  return result;
}
function info(text) {
  notice({
    text: text,
    key: md5$1.exports(v4()),
    type: 'info'
  });
}
function error(text) {
  notice({
    text: text,
    key: md5$1.exports(v4()),
    type: 'error'
  });
}
function warn(text) {
  notice({
    text: text,
    key: md5$1.exports(v4()),
    type: 'warn'
  });
}
function success(text) {
  notice({
    text: text,
    key: md5$1.exports(v4()),
    type: 'success'
  });
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  info: info,
  error: error,
  warn: warn,
  success: success
});

var CSS_CLASSES$1 = {
  ROOT: 'mdc-layout-grid',
  ROW: 'mdc-layout-grid__inner',
  CELL: 'mdc-layout-grid__cell',
  FIX: 'mdc-layout-grid--fixed-column-width',
  left: 'mdc-layout-grid--align-left',
  right: 'mdc-layout-grid--align-right'
};

var css_248z$3 = "@media (min-width:840px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:24px;padding:var(--mdc-layout-grid-margin-expanded,24px)}}@media (min-width:600px) and (max-width:839px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:16px;padding:var(--mdc-layout-grid-margin-medium,16px)}}@media (max-width:599px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:16px;padding:var(--mdc-layout-grid-margin-compact,16px)}}@media (min-width:840px){.mdc-layout-grid--fixed-column-width{width:1176px;width:calc(var(--mdc-layout-grid-column-width-expanded, 72px)*12 + var(--mdc-layout-grid-gutter-expanded, 24px)*11 + var(--mdc-layout-grid-margin-expanded, 24px)*2)}}@media (min-width:600px) and (max-width:839px){.mdc-layout-grid--fixed-column-width{width:720px;width:calc(var(--mdc-layout-grid-column-width-medium, 72px)*8 + var(--mdc-layout-grid-gutter-medium, 16px)*7 + var(--mdc-layout-grid-margin-medium, 16px)*2)}}@media (max-width:599px){.mdc-layout-grid--fixed-column-width{width:368px;width:calc(var(--mdc-layout-grid-column-width-compact, 72px)*4 + var(--mdc-layout-grid-gutter-compact, 16px)*3 + var(--mdc-layout-grid-margin-compact, 16px)*2)}}.mdc-layout-grid--align-left{margin-left:0;margin-right:auto}.mdc-layout-grid--align-right{margin-left:auto;margin-right:0}@media (min-width:840px){.mdc-layout-grid__inner{align-items:stretch;display:flex;flex-flow:row wrap;margin:-12px;margin:calc(var(--mdc-layout-grid-gutter-expanded, 24px)/2*-1)}@supports (display:grid){.mdc-layout-grid__inner{grid-gap:24px;grid-gap:var(--mdc-layout-grid-gutter-expanded,24px);display:grid;grid-template-columns:repeat(12,minmax(0,1fr));margin:0;&.table{display:flex;flex-flow:row nowrap}}}}@media (min-width:600px) and (max-width:839px){.mdc-layout-grid__inner{align-items:stretch;display:flex;flex-flow:row wrap;margin:-8px;margin:calc(var(--mdc-layout-grid-gutter-medium, 16px)/2*-1)}@supports (display:grid){.mdc-layout-grid__inner{grid-gap:16px;grid-gap:var(--mdc-layout-grid-gutter-medium,16px);display:grid;grid-template-columns:repeat(8,minmax(0,1fr));margin:0}.table .mdc-layout-grid__inner{display:flex;flex-flow:row nowrap}}}@media (max-width:599px){.mdc-layout-grid__inner{align-items:stretch;display:flex;flex-flow:row wrap;margin:-8px;margin:calc(var(--mdc-layout-grid-gutter-compact, 16px)/2*-1)}@supports (display:grid){.mdc-layout-grid__inner{grid-gap:16px;grid-gap:var(--mdc-layout-grid-gutter-compact,16px);display:grid;grid-template-columns:repeat(4,minmax(0,1fr));margin:0}.table .mdc-layout-grid__inner{display:flex;flex-flow:row nowrap}}}@media (min-width:840px){.mdc-layout-grid__cell{box-sizing:border-box;margin:12px;margin:calc(var(--mdc-layout-grid-gutter-expanded, 24px)/2);width:calc(33.33333% - 24px);width:calc(33.33333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell{grid-column-end:span 4;margin:0;width:auto}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-expanded{width:calc(8.33333% - 24px);width:calc(8.33333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-desktop{grid-column-end:span 1;width:auto}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-desktop{width:calc(16.66667% - 24px);width:calc(16.66667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-desktop{grid-column-end:span 2;width:auto}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-desktop{width:calc(25% - 24px);width:calc(25% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-desktop{grid-column-end:span 3;width:auto}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-desktop{width:calc(33.33333% - 24px);width:calc(33.33333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-desktop{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-desktop{width:calc(41.66667% - 24px);width:calc(41.66667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-desktop{grid-column-end:span 5;width:auto}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-desktop{width:calc(50% - 24px);width:calc(50% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-desktop{grid-column-end:span 6;width:auto}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-desktop{width:calc(58.33333% - 24px);width:calc(58.33333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-desktop{grid-column-end:span 7;width:auto}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-desktop{width:calc(66.66667% - 24px);width:calc(66.66667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-desktop{grid-column-end:span 8;width:auto}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-desktop{width:calc(75% - 24px);width:calc(75% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-desktop{grid-column-end:span 9;width:auto}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-desktop{width:calc(83.33333% - 24px);width:calc(83.33333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-desktop{grid-column-end:span 10;width:auto}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-desktop{width:calc(91.66667% - 24px);width:calc(91.66667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-desktop{grid-column-end:span 11;width:auto}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-desktop{width:calc(100% - 24px);width:calc(100% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports (display:grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-desktop{grid-column-end:span 12;width:auto}}}@media (min-width:600px) and (max-width:839px){.mdc-layout-grid__cell{box-sizing:border-box;margin:8px;margin:calc(var(--mdc-layout-grid-gutter-medium, 16px)/2);width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell{grid-column-end:span 4;margin:0;width:auto}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-medium{width:calc(12.5% - 16px);width:calc(12.5% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-medium{grid-column-end:span 1;width:auto}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-medium{width:calc(25% - 16px);width:calc(25% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-medium{grid-column-end:span 2;width:auto}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-medium{width:calc(37.5% - 16px);width:calc(37.5% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-medium{grid-column-end:span 3;width:auto}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-medium{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-medium{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-medium{width:calc(62.5% - 16px);width:calc(62.5% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-medium{grid-column-end:span 5;width:auto}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-medium{width:calc(75% - 16px);width:calc(75% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-medium{grid-column-end:span 6;width:auto}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-medium{width:calc(87.5% - 16px);width:calc(87.5% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-medium{grid-column-end:span 7;width:auto}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-medium{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-medium{grid-column-end:span 8;width:auto}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-medium{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-medium{grid-column-end:span 8;width:auto}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-medium{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-medium{grid-column-end:span 8;width:auto}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-medium{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-medium{grid-column-end:span 8;width:auto}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-medium{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-medium, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-medium{grid-column-end:span 8;width:auto}}}@media (max-width:599px){.mdc-layout-grid__cell{box-sizing:border-box;margin:8px;margin:calc(var(--mdc-layout-grid-gutter-compact, 16px)/2);width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell{grid-column-end:span 4;margin:0;width:auto}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-compact{width:calc(25% - 16px);width:calc(25% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-compact{grid-column-end:span 1;width:auto}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-compact{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-compact{grid-column-end:span 2;width:auto}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-compact{width:calc(75% - 16px);width:calc(75% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-compact{grid-column-end:span 3;width:auto}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-compact{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-compact, 16px))}@supports (display:grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-compact{grid-column-end:span 4;width:auto}}.mdc-layout-grid__cell--order-1{order:1}.mdc-layout-grid__cell--order-2{order:2}.mdc-layout-grid__cell--order-3{order:3}.mdc-layout-grid__cell--order-4{order:4}.mdc-layout-grid__cell--order-5{order:5}.mdc-layout-grid__cell--order-6{order:6}.mdc-layout-grid__cell--order-7{order:7}.mdc-layout-grid__cell--order-8{order:8}.mdc-layout-grid__cell--order-9{order:9}.mdc-layout-grid__cell--order-10{order:10}.mdc-layout-grid__cell--order-11{order:11}.mdc-layout-grid__cell--order-12{order:12}.mdc-layout-grid__cell--align-top{align-self:flex-start}@supports (display:grid){.mdc-layout-grid__cell--align-top{align-self:start}}.mdc-layout-grid__cell--align-middle{align-self:center}.mdc-layout-grid__cell--align-bottom{align-self:flex-end}@supports (display:grid){.mdc-layout-grid__cell--align-bottom{align-self:end}}}.mdc-layout-grid{--mdc-layout-grid-margin-expanded:24px;--mdc-layout-grid-gutter-expanded:24px;--mdc-layout-grid-column-width-expanded:72px;--mdc-layout-grid-margin-medium:16px;--mdc-layout-grid-gutter-medium:16px;--mdc-layout-grid-column-width-medium:72px;--mdc-layout-grid-margin-compact:16px;--mdc-layout-grid-gutter-compact:16px;--mdc-layout-grid-column-width-compact:72px}";
styleInject(css_248z$3);

var Grid = function Grid(_ref) {
  var children = _ref.children,
    className = _ref.className;
  var classNames = classnames(CSS_CLASSES$1.ROOT, className, {});
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    children: children
  });
};
Grid.Row = function (_ref2) {
  var children = _ref2.children,
    className = _ref2.className;
  var classNames = classnames(CSS_CLASSES$1.ROW, className);
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    children: children
  });
};
Grid.Cell = function (_ref3) {
  var children = _ref3.children,
    className = _ref3.className;
  var classNames = classnames(CSS_CLASSES$1.CELL, className);
  return jsxRuntime.exports.jsx("div", {
    className: classNames,
    children: children
  });
};

var css_248z$2 = ".mdc-flex{display:flex;justify-content:space-around;width:100%}.mdc-flex.row{flex-direction:row}.mdc-flex.row>*{margin:0 5px}.mdc-flex.column{flex-direction:column}.mdc-flex.column>*{margin:5px 0}";
styleInject(css_248z$2);

var _excluded$2 = ["className", "children", "dir"];
function Flex(_ref) {
  var _classnames;
  var className = _ref.className,
    children = _ref.children,
    _ref$dir = _ref.dir,
    dir = _ref$dir === void 0 ? 'row' : _ref$dir,
    props = _objectWithoutProperties(_ref, _excluded$2);
  var classNames = classnames('mdc-flex', className, (_classnames = {}, _defineProperty(_classnames, 'row', dir === 'row'), _defineProperty(_classnames, 'column', dir === 'column'), _classnames));
  return jsxRuntime.exports.jsx("div", _objectSpread2(_objectSpread2({
    className: classNames
  }, props), {}, {
    children: children
  }));
}

var CSS_CLASSES = {
  ROOT: 'mdc-datePicker',
  FILLED: 'mdc-filled-datePicker',
  OUTLINED: 'mdc-outlined-datePicker',
  DISABLED: 'disabled',
  ERROR: 'error'
};

var css_248z$1 = ".mdc-datePicker{display:inline-flex;outline:none}@media (forced-colors:active){.mdc-datePicker input{background-color:Field}}.mdc-datePicker .text-field{display:inline-flex;flex:1}.mdc-datePicker .field{cursor:text;flex:1}.mdc-datePicker .disabled .field{cursor:default}.mdc-datePicker .counter{white-space:nowrap}.mdc-datePicker .icon{fill:currentColor;color:currentColor;display:flex}.mdc-datePicker .icon ::slotted(*){display:flex}.mdc-datePicker [hasstart] .icon.leading{font-size:var(--md-filled-text-field-leading-icon-size,24px);height:var(--md-filled-text-field-leading-icon-size,24px);width:var(--md-filled-text-field-leading-icon-size,24px)}.mdc-datePicker [hasend] .icon.trailing{font-size:var(--md-filled-text-field-trailing-icon-size,24px);height:var(--md-filled-text-field-trailing-icon-size,24px);width:var(--md-filled-text-field-trailing-icon-size,24px)}.mdc-datePicker input{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;caret-color:var(--md-sys-color-primary,#6750a4);color:currentColor;font:inherit;outline:none;padding:0;text-align:inherit;width:100%}.mdc-datePicker input::-moz-placeholder{color:currentColor;opacity:1}.mdc-datePicker input::placeholder{color:currentColor;opacity:1}.mdc-datePicker input::-webkit-calendar-picker-indicator{display:none}.mdc-datePicker :focus-within input{caret-color:var(--md-sys-color-primary,#6750a4)}.mdc-datePicker .error:focus-within input{caret-color:var(--md-sys-color-error,#b3261e)}.mdc-datePicker .text-field:not(.disabled) .prefix,.mdc-datePicker .text-field:not(.disabled) .suffix{color:var(--md-sys-color-on-surface-variant,#49454f)}.mdc-datePicker .text-field:not(.disabled) input::-moz-placeholder{color:var(--md-sys-color-on-surface-variant,#49454f)}.mdc-datePicker .text-field:not(.disabled) input::placeholder{color:var(--md-sys-color-on-surface-variant,#49454f)}.mdc-datePicker .prefix{-webkit-padding-end:var(--md-outlined-text-field-input-text-prefix-padding,2px);padding-inline-end:var(--md-outlined-text-field-input-text-prefix-padding,2px)}.mdc-datePicker .suffix{-webkit-padding-start:var(--md-outlined-text-field-input-text-suffix-padding,2px);padding-inline-start:var(--md-outlined-text-field-input-text-suffix-padding,2px)}@media (forced-colors:active){.mdc-filled-datePicker{--md-filled-text-field-disabled-active-indicator-opacity:1;--md-filled-text-field-disabled-input-text-opacity:1;--md-filled-text-field-disabled-label-text-opacity:1;--md-filled-text-field-disabled-leading-icon-opacity:1;--md-filled-text-field-disabled-supporting-text-opacity:1;--md-filled-text-field-disabled-trailing-icon-opacity:1}}.mdc-filled-datePicker{--_container-shape-start-start:var(\n    --md-filled-text-field-container-shape-start-start,var(--md-filled-text-field-container-shape,4px)\n  );--_container-shape-start-end:var(\n    --md-filled-text-field-container-shape-start-end,var(--md-filled-text-field-container-shape,4px)\n  );--_container-shape-end-end:var(\n    --md-filled-text-field-container-shape-end-end,var(--md-filled-text-field-container-shape,0px)\n  );--_container-shape-end-start:var(\n    --md-filled-text-field-container-shape-end-start,var(--md-filled-text-field-container-shape,0px)\n  );--_container-padding-horizontal:var(\n    --md-filled-text-field-container-padding-horizontal,16px\n  );--_container-padding-vertical:var(\n    --md-filled-text-field-container-padding-vertical,16px\n  );--_input-text-prefix-padding:var(\n    --md-filled-text-field-input-text-prefix-padding,2px\n  );--_input-text-suffix-padding:var(\n    --md-filled-text-field-input-text-suffix-padding,2px\n  );--_with-label-container-padding-vertical:var(\n    --md-filled-text-field-with-label-container-padding-vertical,8px\n  );--_focus-caret-color:var(\n    --md-filled-text-field-focus-caret-color,var(--md-sys-color-primary,#6750a4)\n  );--_active-indicator-color:var(\n    --md-filled-text-field-active-indicator-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_active-indicator-height:var(\n    --md-filled-text-field-active-indicator-height,1px\n  );--_caret-color:var(\n    --md-filled-text-field-caret-color,var(--md-sys-color-primary,#6750a4)\n  );--_container-color:var(\n    --md-filled-text-field-container-color,var(--md-sys-color-surface-container-highest,#e6e0e9)\n  );--_disabled-active-indicator-color:var(\n    --md-filled-text-field-disabled-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-active-indicator-height:var(\n    --md-filled-text-field-disabled-active-indicator-height,1px\n  );--_disabled-active-indicator-opacity:var(\n    --md-filled-text-field-disabled-active-indicator-opacity,0.38\n  );--_disabled-container-color:var(\n    --md-filled-text-field-disabled-container-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-container-opacity:var(\n    --md-filled-text-field-disabled-container-opacity,0.04\n  );--_disabled-input-text-color:var(\n    --md-filled-text-field-disabled-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-input-text-opacity:var(\n    --md-filled-text-field-disabled-input-text-opacity,0.38\n  );--_disabled-label-text-color:var(\n    --md-filled-text-field-disabled-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-label-text-opacity:var(\n    --md-filled-text-field-disabled-label-text-opacity,0.38\n  );--_disabled-leading-icon-color:var(\n    --md-filled-text-field-disabled-leading-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-leading-icon-opacity:var(\n    --md-filled-text-field-disabled-leading-icon-opacity,0.38\n  );--_disabled-supporting-text-color:var(\n    --md-filled-text-field-disabled-supporting-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-supporting-text-opacity:var(\n    --md-filled-text-field-disabled-supporting-text-opacity,0.38\n  );--_disabled-trailing-icon-color:var(\n    --md-filled-text-field-disabled-trailing-icon-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_disabled-trailing-icon-opacity:var(\n    --md-filled-text-field-disabled-trailing-icon-opacity,0.38\n  );--_error-active-indicator-color:var(\n    --md-filled-text-field-error-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-active-indicator-color:var(\n    --md-filled-text-field-error-focus-active-indicator-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-caret-color:var(\n    --md-filled-text-field-error-focus-caret-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-input-text-color:var(\n    --md-filled-text-field-error-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-focus-label-text-color:var(\n    --md-filled-text-field-error-focus-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-leading-icon-color:var(\n    --md-filled-text-field-error-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-focus-supporting-text-color:var(\n    --md-filled-text-field-error-focus-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-focus-trailing-icon-color:var(\n    --md-filled-text-field-error-focus-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-active-indicator-color:var(\n    --md-filled-text-field-error-hover-active-indicator-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-input-text-color:var(\n    --md-filled-text-field-error-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-label-text-color:var(\n    --md-filled-text-field-error-hover-label-text-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-hover-leading-icon-color:var(\n    --md-filled-text-field-error-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-hover-state-layer-color:var(\n    --md-filled-text-field-error-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-hover-state-layer-opacity:var(\n    --md-filled-text-field-error-hover-state-layer-opacity,0.08\n  );--_error-hover-supporting-text-color:var(\n    --md-filled-text-field-error-hover-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-hover-trailing-icon-color:var(\n    --md-filled-text-field-error-hover-trailing-icon-color,var(--md-sys-color-on-error-container,#410e0b)\n  );--_error-input-text-color:var(\n    --md-filled-text-field-error-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_error-label-text-color:var(\n    --md-filled-text-field-error-label-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-leading-icon-color:var(\n    --md-filled-text-field-error-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_error-supporting-text-color:var(\n    --md-filled-text-field-error-supporting-text-color,var(--md-sys-color-error,#b3261e)\n  );--_error-trailing-icon-color:var(\n    --md-filled-text-field-error-trailing-icon-color,var(--md-sys-color-error,#b3261e)\n  );--_focus-active-indicator-color:var(\n    --md-filled-text-field-focus-active-indicator-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-active-indicator-height:var(\n    --md-filled-text-field-focus-active-indicator-height,2px\n  );--_focus-input-text-color:var(\n    --md-filled-text-field-focus-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_focus-label-text-color:var(\n    --md-filled-text-field-focus-label-text-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-leading-icon-color:var(\n    --md-filled-text-field-focus-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-supporting-text-color:var(\n    --md-filled-text-field-focus-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_focus-trailing-icon-color:var(\n    --md-filled-text-field-focus-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-active-indicator-color:var(\n    --md-filled-text-field-hover-active-indicator-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-active-indicator-height:var(\n    --md-filled-text-field-hover-active-indicator-height,1px\n  );--_hover-input-text-color:var(\n    --md-filled-text-field-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-filled-text-field-hover-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-leading-icon-color:var(\n    --md-filled-text-field-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-state-layer-color:var(\n    --md-filled-text-field-hover-state-layer-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-state-layer-opacity:var(\n    --md-filled-text-field-hover-state-layer-opacity,0.08\n  );--_hover-supporting-text-color:var(\n    --md-filled-text-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-trailing-icon-color:var(\n    --md-filled-text-field-hover-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-color:var(\n    --md-filled-text-field-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_input-text-placeholder-color:var(\n    --md-filled-text-field-input-text-placeholder-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-prefix-color:var(\n    --md-filled-text-field-input-text-prefix-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-suffix-color:var(\n    --md-filled-text-field-input-text-suffix-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_input-text-type:var(\n    --md-filled-text-field-input-text-type,var(\n      --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_label-text-color:var(\n    --md-filled-text-field-label-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_label-text-populated-line-height:var(\n    --md-filled-text-field-label-text-populated-line-height,1rem\n  );--_label-text-populated-size:var(\n    --md-filled-text-field-label-text-populated-size,0.75rem\n  );--_label-text-type:var(\n    --md-filled-text-field-label-text-type,var(\n      --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_leading-icon-color:var(\n    --md-filled-text-field-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_leading-icon-size:var(--md-filled-text-field-leading-icon-size,24px);--_supporting-text-color:var(\n    --md-filled-text-field-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_supporting-text-type:var(\n    --md-filled-text-field-supporting-text-type,var(\n      --md-sys-typescale-body-small,400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto)\n    )\n  );--_trailing-icon-color:var(\n    --md-filled-text-field-trailing-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_trailing-icon-size:var(--md-filled-text-field-trailing-icon-size,24px);--md-filled-field-container-shape-start-start:var(\n    --md-filled-field-container-shape,var(--_container-shape-start-start)\n  );--md-filled-field-container-shape-start-end:var(\n    --md-filled-field-container-shape,var(--_container-shape-start-end)\n  );--md-filled-field-container-shape-end-end:var(\n    --md-filled-field-container-shape,var(--_container-shape-end-end)\n  );--md-filled-field-container-shape-end-start:var(\n    --md-filled-field-container-shape,var(--_container-shape-end-start)\n  );--md-filled-field-active-indicator-color:var(--_active-indicator-color);--md-filled-field-active-indicator-height:var(--_active-indicator-height);--md-filled-field-container-color:var(--_container-color);--md-filled-field-container-padding-horizontal:var(\n    --_container-padding-horizontal\n  );--md-filled-field-container-padding-vertical:var(\n    --_container-padding-vertical\n  );--md-filled-field-content-color:var(--_input-text-color);--md-filled-field-content-type:var(--_input-text-type);--md-filled-field-disabled-active-indicator-color:var(\n    --_disabled-active-indicator-color\n  );--md-filled-field-disabled-active-indicator-height:var(\n    --_disabled-active-indicator-height\n  );--md-filled-field-disabled-active-indicator-opacity:var(\n    --_disabled-active-indicator-opacity\n  );--md-filled-field-disabled-container-color:var(--_disabled-container-color);--md-filled-field-disabled-container-opacity:var(\n    --_disabled-container-opacity\n  );--md-filled-field-disabled-content-color:var(--_disabled-input-text-color);--md-filled-field-disabled-content-opacity:var(\n    --_disabled-input-text-opacity\n  );--md-filled-field-disabled-label-text-color:var(\n    --_disabled-label-text-color\n  );--md-filled-field-disabled-label-text-opacity:var(\n    --_disabled-label-text-opacity\n  );--md-filled-field-disabled-leading-content-color:var(\n    --_disabled-leading-icon-color\n  );--md-filled-field-disabled-leading-content-opacity:var(\n    --_disabled-leading-icon-opacity\n  );--md-filled-field-disabled-supporting-text-color:var(\n    --_disabled-supporting-text-color\n  );--md-filled-field-disabled-supporting-text-opacity:var(\n    --_disabled-supporting-text-opacity\n  );--md-filled-field-disabled-trailing-content-color:var(\n    --_disabled-trailing-icon-color\n  );--md-filled-field-disabled-trailing-content-opacity:var(\n    --_disabled-trailing-icon-opacity\n  );--md-filled-field-error-active-indicator-color:var(\n    --_error-active-indicator-color\n  );--md-filled-field-error-content-color:var(--_error-input-text-color);--md-filled-field-error-focus-active-indicator-color:var(\n    --_error-focus-active-indicator-color\n  );--md-filled-field-error-focus-content-color:var(\n    --_error-focus-input-text-color\n  );--md-filled-field-error-focus-label-text-color:var(\n    --_error-focus-label-text-color\n  );--md-filled-field-error-focus-leading-content-color:var(\n    --_error-focus-leading-icon-color\n  );--md-filled-field-error-focus-supporting-text-color:var(\n    --_error-focus-supporting-text-color\n  );--md-filled-field-error-focus-trailing-content-color:var(\n    --_error-focus-trailing-icon-color\n  );--md-filled-field-error-hover-active-indicator-color:var(\n    --_error-hover-active-indicator-color\n  );--md-filled-field-error-hover-content-color:var(\n    --_error-hover-input-text-color\n  );--md-filled-field-error-hover-label-text-color:var(\n    --_error-hover-label-text-color\n  );--md-filled-field-error-hover-leading-content-color:var(\n    --_error-hover-leading-icon-color\n  );--md-filled-field-error-hover-state-layer-color:var(\n    --_error-hover-state-layer-color\n  );--md-filled-field-error-hover-state-layer-opacity:var(\n    --_error-hover-state-layer-opacity\n  );--md-filled-field-error-hover-supporting-text-color:var(\n    --_error-hover-supporting-text-color\n  );--md-filled-field-error-hover-trailing-content-color:var(\n    --_error-hover-trailing-icon-color\n  );--md-filled-field-error-label-text-color:var(--_error-label-text-color);--md-filled-field-error-leading-content-color:var(\n    --_error-leading-icon-color\n  );--md-filled-field-error-supporting-text-color:var(\n    --_error-supporting-text-color\n  );--md-filled-field-error-trailing-content-color:var(\n    --_error-trailing-icon-color\n  );--md-filled-field-focus-active-indicator-color:var(\n    --_focus-active-indicator-color\n  );--md-filled-field-focus-active-indicator-height:var(\n    --_focus-active-indicator-height\n  );--md-filled-field-focus-content-color:var(--_focus-input-text-color);--md-filled-field-focus-label-text-color:var(--_focus-label-text-color);--md-filled-field-focus-leading-content-color:var(\n    --_focus-leading-icon-color\n  );--md-filled-field-focus-supporting-text-color:var(\n    --_focus-supporting-text-color\n  );--md-filled-field-focus-trailing-content-color:var(\n    --_focus-trailing-icon-color\n  );--md-filled-field-hover-active-indicator-color:var(\n    --_hover-active-indicator-color\n  );--md-filled-field-hover-active-indicator-height:var(\n    --_hover-active-indicator-height\n  );--md-filled-field-hover-content-color:var(--_hover-input-text-color);--md-filled-field-hover-label-text-color:var(--_hover-label-text-color);--md-filled-field-hover-leading-content-color:var(\n    --_hover-leading-icon-color\n  );--md-filled-field-hover-state-layer-color:var(--_hover-state-layer-color);--md-filled-field-hover-state-layer-opacity:var(\n    --_hover-state-layer-opacity\n  );--md-filled-field-hover-supporting-text-color:var(\n    --_hover-supporting-text-color\n  );--md-filled-field-hover-trailing-content-color:var(\n    --_hover-trailing-icon-color\n  );--md-filled-field-label-text-color:var(--_label-text-color);--md-filled-field-label-text-populated-line-height:var(\n    --_label-text-populated-line-height\n  );--md-filled-field-label-text-populated-size:var(\n    --_label-text-populated-size\n  );--md-filled-field-label-text-type:var(--_label-text-type);--md-filled-field-leading-content-color:var(--_leading-icon-color);--md-filled-field-supporting-text-color:var(--_supporting-text-color);--md-filled-field-supporting-text-type:var(--_supporting-text-type);--md-filled-field-trailing-content-color:var(--_trailing-icon-color);--md-filled-field-with-label-container-padding-vertical:var(\n    --_with-label-container-padding-vertical\n  )}@media (forced-colors:active){.mdc-outlined-datePicker{--md-outlined-text-field-disabled-input-text-opacity:1;--md-outlined-text-field-disabled-label-text-opacity:1;--md-outlined-text-field-disabled-leading-icon-opacity:1;--md-outlined-text-field-disabled-outline-opacity:1;--md-outlined-text-field-disabled-supporting-text-opacity:1;--md-outlined-text-field-disabled-trailing-icon-opacity:1;--md-outlined-text-field-container-padding-horizontal:16px;--md-outlined-text-field-container-padding-vertical:16px;--md-outlined-text-field-input-text-prefix-padding:2px;--md-outlined-text-field-input-text-suffix-padding:2px;--md-outlined-text-field-outline-width:1px;--md-outlined-text-field-leading-icon-size:24px;--md-outlined-text-field-label-text-populated-size:0.75rem;--md-outlined-text-field-label-text-populated-line-height:1rem;--md-outlined-text-field-focus-outline-width:2px}}.mdc-outlined-datePicker{--_focus-outline-color:var(\n    --md-outlined-text-field-focus-outline-color,var(--md-sys-color-primary,#6750a4)\n  );--_focus-outline-width:var(\n    --md-outlined-text-field-focus-outline-width,2px\n  );--_hover-input-text-color:var(\n    --md-outlined-text-field-hover-input-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-label-text-color:var(\n    --md-outlined-text-field-hover-label-text-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-leading-icon-color:var(\n    --md-outlined-text-field-hover-leading-icon-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_hover-outline-color:var(\n    --md-outlined-text-field-hover-outline-color,var(--md-sys-color-on-surface,#1d1b20)\n  );--_hover-outline-width:var(\n    --md-outlined-text-field-hover-outline-width,1px\n  );--_hover-supporting-text-color:var(\n    --md-outlined-text-field-hover-supporting-text-color,var(--md-sys-color-on-surface-variant,#49454f)\n  );--_trailing-icon-size:var(--md-outlined-text-field-trailing-icon-size,24px);--md-outlined-field-container-shape-start-start:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-shape-start-end:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-shape-end-end:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-shape-end-start:var(--md-sys-shape-corner-extra-small,4px);--md-outlined-field-container-padding-horizontal:var(\n    --md-outlined-text-field-container-padding-horizontal,16px\n  );--md-outlined-field-container-padding-vertical:var(\n    --md-outlined-text-field-container-padding-vertical,16px\n  );--md-outlined-field-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-content-type:var(\n    --md-sys-typescale-body-large,400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto)\n  );--md-outlined-field-disabled-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-content-opacity:var(\n    --md-outlined-text-field-disabled-input-text-opacity,0.38\n  );--md-outlined-field-disabled-label-text-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-label-text-opacity:var(\n    --md-outlined-text-field-disabled-label-text-opacity,0.38\n  );--md-outlined-field-disabled-leading-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-leading-content-opacity:var(\n    --md-outlined-text-field-disabled-leading-icon-opacity,0.38\n  );--md-outlined-field-disabled-outline-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-outline-opacity:var(\n    --md-outlined-text-field-disabled-outline-opacity,0.12\n  );--md-outlined-field-disabled-outline-width:var(\n    --md-outlined-text-field-disabled-outline-width,1px\n  );--md-outlined-field-disabled-supporting-text-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-supporting-text-opacity:var(\n    --md-outlined-text-field-disabled-supporting-text-opacity,0.38\n  );--md-outlined-field-disabled-trailing-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-disabled-trailing-content-opacity:var(\n    --md-outlined-text-field-disabled-trailing-icon-opacity,0.38\n  );--md-outlined-field-error-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-error-focus-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-error-focus-label-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-focus-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-error-focus-outline-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-focus-supporting-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-focus-trailing-content-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-hover-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-error-hover-label-text-color:var(--md-sys-color-on-error-container,#410e0b);--md-outlined-field-error-hover-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-error-hover-outline-color:var(--md-sys-color-on-error-container,#410e0b);--md-outlined-field-error-hover-supporting-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-hover-trailing-content-color:var(--md-sys-color-on-error-container,#410e0b);--md-outlined-field-error-label-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-error-outline-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-supporting-text-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-error-trailing-content-color:var(--md-sys-color-error,#b3261e);--md-outlined-field-focus-content-color:var(--md-sys-color-on-surface,#1d1b20);--md-outlined-field-focus-label-text-color:var(--md-sys-color-primary,#6750a4);--md-outlined-field-focus-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-focus-outline-color:var(--md-sys-color-primary,#6750a4);--md-outlined-field-focus-outline-width:var(--_focus-outline-width);--md-outlined-field-focus-supporting-text-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-focus-trailing-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-hover-content-color:var(--_hover-input-text-color);--md-outlined-field-hover-label-text-color:var(--_hover-label-text-color);--md-outlined-field-hover-leading-content-color:var(\n    --_hover-leading-icon-color\n  );--md-outlined-field-hover-outline-color:var(--_hover-outline-color);--md-outlined-field-hover-outline-width:var(--_hover-outline-width);--md-outlined-field-hover-supporting-text-color:var(\n    --_hover-supporting-text-color\n  );--md-outlined-field-hover-trailing-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-label-text-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-label-text-populated-line-height:var(\n    --md-outlined-text-field-label-text-populated-line-height,1rem\n  );--md-outlined-field-label-text-populated-size:var(\n    --md-outlined-text-field-label-text-populated-size,0.75rem\n  );--md-outlined-field-label-text-type:400 1rem/1.5rem var(--md-ref-typeface-plain,Roboto);--md-outlined-field-leading-content-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-outline-color:var(--md-sys-color-outline,#79747e);--md-outlined-field-outline-width:var(--md-outlined-text-field-outline-width,1px);--md-outlined-field-supporting-text-color:var(--md-sys-color-on-surface-variant,#49454f);--md-outlined-field-supporting-text-type:400 0.75rem/1rem var(--md-ref-typeface-plain,Roboto);--md-outlined-field-trailing-content-color:var(--md-sys-color-on-surface-variant,#49454f)}";
styleInject(css_248z$1);

var _excluded$1 = ["name", "variant", "value", "type", "className", "label", "disabled", "error", "errorText", "prefixText", "suffixText", "required", "placeholder", "pattern", "step", "rulers", "children", "onChange"];
var DatePicker = function DatePicker(_ref) {
  var _classnames;
  var name = _ref.name,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    value = _ref.value,
    type = _ref.type,
    className = _ref.className,
    label = _ref.label,
    disabled = _ref.disabled,
    error = _ref.error,
    errorText = _ref.errorText,
    prefixText = _ref.prefixText,
    suffixText = _ref.suffixText,
    required = _ref.required,
    placeholder = _ref.placeholder,
    pattern = _ref.pattern,
    step = _ref.step,
    rulers = _ref.rulers,
    children = _ref.children,
    onChange = _ref.onChange,
    props = _objectWithoutProperties(_ref, _excluded$1);
  var _useState = React.useState(value || ''),
    _useState2 = _slicedToArray(_useState, 2),
    currentValue = _useState2[0],
    setCurrentValue = _useState2[1];
  var slots = useSlot(children);
  var isFilled = variant === 'filled';
  var isOutlined = variant === 'outlined';
  var classNames = classnames(CSS_CLASSES.ROOT, className, (_classnames = {}, _defineProperty(_classnames, CSS_CLASSES.FILLED, isFilled), _defineProperty(_classnames, CSS_CLASSES.OUTLINED, isOutlined), _defineProperty(_classnames, CSS_CLASSES.DISABLED, disabled), _defineProperty(_classnames, CSS_CLASSES.ERROR, error), _classnames));
  var _useState3 = React.useState(errorText),
    _useState4 = _slicedToArray(_useState3, 2),
    errorMessage = _useState4[0],
    setErrorMessage = _useState4[1];
  var doChange = function doChange(e) {
    var v = e.target.value;
    onChange === null || onChange === void 0 ? void 0 : onChange(v);
    setCurrentValue(v);
  };
  var doBlur = function doBlur(e) {
    var v = e.target.value;
    if (required && !rulers && !v) {
      setErrorMessage('必填！');
    } else if (required && !rulers && pattern && !new RegExp(pattern).test(String(v))) {
      setErrorMessage('输入格式不正确～');
    } else if (rulers !== null && rulers !== void 0 && rulers.length) {
      for (var i = 0; i < rulers.length; i++) {
        var rule = rulers[i];
        if (rule.required && !v || rule.pattern && !new RegExp(rule.pattern).test(String(v))) {
          setErrorMessage(rule.message);
          break;
        } else if (rule.validator) {
          var _rule$validator;
          var res = (_rule$validator = rule.validator) === null || _rule$validator === void 0 ? void 0 : _rule$validator.call(rule, v);
          if (res) {
            setErrorMessage(res);
          } else {
            setErrorMessage('');
          }
        }
      }
    }
  };
  React.useEffect(function () {
    setCurrentValue(value);
  }, [value]);
  return jsxRuntime.exports.jsx("div", _objectSpread2(_objectSpread2({
    className: classNames
  }, props), {}, {
    children: jsxRuntime.exports.jsxs("div", {
      className: "text-field",
      children: [jsxRuntime.exports.jsxs(Field, {
        label: label,
        disabled: disabled,
        error: !!errorMessage,
        required: required,
        populated: !!currentValue,
        onBlur: doBlur,
        variant: variant,
        children: [jsxRuntime.exports.jsx(_Slot, {
          name: "start",
          children: jsxRuntime.exports.jsx("span", {
            className: "icon leading",
            children: slots['leadingicon']
          })
        }), jsxRuntime.exports.jsx(_Slot, {
          name: "end",
          children: jsxRuntime.exports.jsx(Icon, {
            children: "calendar_month"
          })
        }), jsxRuntime.exports.jsx(_Slot, {
          name: "supporting-text",
          children: jsxRuntime.exports.jsx("span", {
            children: !!errorMessage ? errorMessage : prefixText
          })
        }), jsxRuntime.exports.jsx("span", {
          className: "prefix",
          children: prefixText
        }), jsxRuntime.exports.jsx("input", {
          type: type,
          placeholder: placeholder,
          disabled: disabled,
          required: required,
          step: step,
          onChange: doChange,
          name: name,
          value: currentValue
        }), jsxRuntime.exports.jsx("span", {
          className: "suffix",
          children: suffixText
        })]
      }), jsxRuntime.exports.jsx("div", {
        className: 'picker-panel-container'
      })]
    })
  }));
};

var _excluded = ["onClick"];
function withTd(children, data) {
  if ( /*#__PURE__*/React__default["default"].isValidElement(children)) {
    var doCLick = function doCLick() {
      console.log('doCLick', data);
      onClick(data);
    };
    var _children$props = children.props,
      onClick = _children$props.onClick,
      props = _objectWithoutProperties(_children$props, _excluded);
    return jsxRuntime.exports.jsx(children.type, _objectSpread2(_objectSpread2({}, props), {}, {
      onClick: doCLick
    }));
  } else {
    return data[children];
  }
}

var css_248z = ".mdc-table .th{font-weight:700}.mdc-table .tr{border-bottom:1px solid var(--md-sys-color-outline);display:flex;flex-flow:row nowrap;padding:10px 0}.mdc-table .td,.mdc-table .th{word-wrap:break-word;color:var(--md-sys-color-on-surface);flex:1;white-space:normal;word-break:break-all}.mdc-pagination{display:flex;flex-direction:row;justify-content:center}.mdc-pagination .md-standard-icon-button{color:var(--md-sys-color-on-surface);max-width:24px;text-align:center}.mdc-pagination .mdc-icon{line-height:24px;width:100%}.mdc-pagination .mdc-pagination-page{-webkit-padding-end:0;-webkit-padding-start:0;color:var(--md-sys-color-on-surface);line-height:24px;width:24px!important;block-size:24px;margin:0 5px;min-inline-size:10px;padding-inline-end:0;padding-inline-start:0}.mdc-pagination .mdc-pagination-page,.mdc-pagination .mdc-pagination-page .md3-button__outline,.mdc-pagination .mdc-pagination-page .md3-button__ripple,.mdc-pagination .mdc-pagination-page .mdc-focus{border-end-end-radius:5px;border-end-start-radius:5px;border-start-end-radius:5px;border-start-start-radius:5px}.mdc-pagination .mdc-pagination-page .md3-button__outline{border-color:transparent}.mdc-pagination .mdc-pagination-page.active .md3-button__outline,.mdc-pagination .mdc-pagination-page:hover .md3-button__outline{border-color:var(--md-sys-color-on-surface)}";
styleInject(css_248z);

var Pagination = function Pagination(_ref) {
  var className = _ref.className,
    total = _ref.total,
    page = _ref.page,
    onChange = _ref.onChange;
  var _useState = React.useState(1),
    _useState2 = _slicedToArray(_useState, 2),
    current = _useState2[0],
    setCurrent = _useState2[1];
  var classNames = classnames('mdc-pagination', className);
  var list = React.useMemo(function () {
    var res = [];
    for (var i = 0; i < total; i++) {
      res.push({
        text: i + 1,
        cls: classnames('mdc-pagination-page', _defineProperty({}, 'active', current === i + 1))
      });
    }
    return res;
  }, [current]);
  function doPage(n) {
    setCurrent(n);
    onChange === null || onChange === void 0 ? void 0 : onChange(n);
  }
  function doPrev() {
    var now = current - 1 > 0 ? current - 1 : 1;
    setCurrent(now);
    onChange === null || onChange === void 0 ? void 0 : onChange(now);
  }
  function doNext() {
    var now = current + 1 > total ? current - 1 : 1;
    setCurrent(now);
    onChange === null || onChange === void 0 ? void 0 : onChange(now);
  }
  React.useEffect(function () {
    setCurrent(page);
  }, [page]);
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    children: [jsxRuntime.exports.jsx(Button, {
      type: "icon",
      className: "mdc-pagination-page",
      onClick: doPrev,
      children: "arrow_back_ios"
    }), list.map(function (_ref2) {
      var text = _ref2.text,
        cls = _ref2.cls;
      return jsxRuntime.exports.jsx(Button, {
        className: cls,
        variant: "outlined",
        onClick: function onClick() {
          return doPage(text);
        },
        children: text
      }, v4());
    }), jsxRuntime.exports.jsx(Button, {
      type: "icon",
      className: "mdc-pagination-page",
      onClick: doNext,
      children: "arrow_forward_ios"
    })]
  });
};

var Table = function Table(_ref) {
  var className = _ref.className,
    children = _ref.children,
    dataSource = _ref.dataSource,
    primary = _ref.primary,
    onSort = _ref.onSort,
    onPage = _ref.onPage,
    pageSize = _ref.pageSize;
  var classNames = classnames('mdc-table', className);
  var _useState = React.useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    columns = _useState2[0],
    setColumns = _useState2[1];
  React.useEffect(function () {
    var ths = [];
    React__default["default"].Children.map(children, function (child) {
      ths.push({
        title: child.props.title,
        render: function render(item) {
          return withTd(child.props.children, item);
        },
        name: child.props.name || child.props.children,
        sort: child.props.sort
      });
    });
    setColumns(ths);
  }, []);
  return jsxRuntime.exports.jsxs("div", {
    className: classNames,
    children: [jsxRuntime.exports.jsxs(Grid, {
      variant: "table",
      children: [jsxRuntime.exports.jsx(Grid.Row, {
        className: "tr",
        children: columns.map(function (_ref2) {
          var title = _ref2.title,
            name = _ref2.name,
            sort = _ref2.sort;
          return jsxRuntime.exports.jsxs(Grid.Cell, {
            className: 'th',
            children: [title, sort ? jsxRuntime.exports.jsx(SortButton, {
              name: sort,
              onChange: onSort
            }) : null]
          }, name);
        })
      }), dataSource.map(function (data) {
        return jsxRuntime.exports.jsx(Grid.Row, {
          className: "tr",
          children: columns.map(function (_ref3) {
            var render = _ref3.render,
              name = _ref3.name;
            return jsxRuntime.exports.jsx(Grid.Cell, {
              className: 'td',
              children: render(data)
            }, name);
          })
        }, data[primary]);
      })]
    }), pageSize ? jsxRuntime.exports.jsx(Pagination, {
      total: 10,
      onChange: onPage
    }) : null]
  });
};
Table.Cell = function (_ref4) {
  var children = _ref4.children,
    title = _ref4.title,
    key = _ref4.key;
  return {
    title: title,
    render: function render(item) {
      return item[children];
    },
    key: key || children
  };
};

exports.AppBar = AppBar;
exports.Badge = Badge;
exports.Button = Button;
exports.Card = Card;
exports.Checkbox = Checkbox;
exports.Chip = Chip;
exports.DatePicker = DatePicker;
exports.Dialog = Dialog;
exports.Divider = Divider;
exports.FAB = FAB;
exports.Flex = Flex;
exports.Focus = Focus;
exports.Form = Form;
exports.Grid = Grid;
exports.Icon = Icon;
exports.Label = Label;
exports.Layout = Layout;
exports.List = List;
exports.Menu = Menu;
exports.Nav = Nav;
exports.NavRail = NavRail;
exports.Progress = Progress;
exports.Radio = Radio;
exports.Select = Select;
exports.Sider = Sider;
exports.Slider = Slider;
exports.Slot = _Slot;
exports.SortButton = SortButton;
exports.Switch = Switch;
exports.Table = Table;
exports.Tabs = Tabs;
exports.TextField = TextField;
exports.applyTheme = applyTheme;
exports.argbFromHex = argbFromHex;
exports.message = index;
exports.themeFromSourceColor = themeFromSourceColor;
exports.useSlot = useSlot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
