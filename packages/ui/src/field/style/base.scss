.mdc-field {
  display: inline-flex;
  width: 100%;
  .field {
    display: flex;
    flex: 1;
    flex-direction: column;
    max-width: 100%;
    writing-mode: horizontal-tb;
  }
  .container-overflow {
    border-end-end-radius: var(--_container-shape-end-end);
    border-end-start-radius: var(--_container-shape-end-start);
    border-start-end-radius: var(--_container-shape-start-end);
    border-start-start-radius: var(--_container-shape-start-start);
    display: flex;
    position: relative;
  }
  .container {
    align-items: center;
    border-radius: inherit;
    display: flex;
    overflow: hidden;
    padding-bottom: var(--_container-padding-vertical);
    padding-top: var(--_container-padding-vertical);
    position: relative;
    width: 100%;
  }
  .resizable .container {
    resize: both;
  }
  .disabled {
    pointer-events: none;
  }
  .end,
  .middle,
  .start {
    box-sizing: border-box;
    display: flex;
    height: 100%;
    position: relative;
  }
  .start {
    color: var(--_leading-content-color);
  }
  .end {
    color: var(--_trailing-content-color);
  }
  .end,
  .start {
    align-items: center;
    justify-content: center;
  }
  .start {
    -webkit-padding-start: max(
      var(--_container-padding-horizontal),
      max(var(--_container-shape-start-start), var(--_container-shape-end-start)) +
        var(--_outline-label-padding)
    );
    padding-inline-start: max(
      var(--_container-padding-horizontal),
      max(var(--_container-shape-start-start), var(--_container-shape-end-start)) +
        var(--_outline-label-padding)
    );
  }
  .end {
    -webkit-padding-end: max(
      var(--_container-padding-horizontal),
      max(var(--_container-shape-start-end), var(--_container-shape-end-end))
    );
    padding-inline-end: max(
      var(--_container-padding-horizontal),
      max(var(--_container-shape-start-end), var(--_container-shape-end-end))
    );
  }
  .with-start .start {
    -webkit-margin-end: 4px;
    margin-inline-end: 4px;
  }
  .with-end .end {
    -webkit-margin-start: 4px;
    margin-inline-start: 4px;
  }
  .middle {
    align-items: stretch;
    align-self: baseline;
    flex: 1;

  }
  .content {
    color: var(--_content-color);
    display: flex;
    flex: 1;
    font: var(--_content-type);
    opacity: 0;
    transition: opacity 83ms cubic-bezier(0.2, 0, 0, 1);
    .label {
      display: flex;
      align-items: center;
    }
  }
  .focused .content,
  .no-label .content,
  .populated .content {
    opacity: 1;
    transition-delay: 67ms;
  }
  &:hover {
    cursor: pointer;
  }
  &:hover .content {
    color: var(--_hover-content-color);
  }
  &:hover .start {
    color: var(--_hover-leading-content-color);
  }
  &:hover .end {
    color: var(--_hover-trailing-content-color);
  }
  .focused .content {
    color: var(--_focus-content-color);
  }
  .focused .start {
    color: var(--_focus-leading-content-color);
  }
  .focused .end {
    color: var(--_focus-trailing-content-color);
  }
  .disabled .content {
    color: var(--_disabled-content-color);
  }
  .disabled.focused .content,
  .disabled.no-label .content,
  .disabled.populated .content {
    opacity: var(--_disabled-content-opacity);
  }
  .disabled .start {
    color: var(--_disabled-leading-content-color);
    opacity: var(--_disabled-leading-content-opacity);
  }
  .disabled .end {
    color: var(--_disabled-trailing-content-color);
    opacity: var(--_disabled-trailing-content-opacity);
  }
  .error .content {
    color: var(--_error-content-color);
  }
  .error .start {
    color: var(--_error-leading-content-color);
  }
  .error .end {
    color: var(--_error-trailing-content-color);
  }
  .error:hover .content {
    color: var(--_error-hover-content-color);
  }
  .error:hover .start {
    color: var(--_error-hover-leading-content-color);
  }
  .error:hover .end {
    color: var(--_error-hover-trailing-content-color);
  }
  .error.focused .content {
    color: var(--_error-focus-content-color);
  }
  .error.focused .start {
    color: var(--_error-focus-leading-content-color);
  }
  .error.focused .end {
    color: var(--_error-focus-trailing-content-color);
  }
  .label {
    color: var(--_label-text-color);
    font: var(--_label-text-type);
    max-width: 100%;
    overflow: hidden;
    pointer-events: none;
    text-overflow: ellipsis;
    white-space: nowrap;
    z-index: 1;
  }
  .label.resting {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }
  .label.floating {
    font-size: var(--_label-text-populated-size);
    line-height: var(--_label-text-populated-line-height);
    transform-origin: top left;
  }
  .label.hidden {
    opacity: 0;
  }
  .no-label .label {
    display: none;
  }
  :hover .label {
    color: var(--_hover-label-text-color);
  }
  .focused .label {
    color: var(--_focus-label-text-color);
  }
  .disabled .label {
    color: var(--_disabled-label-text-color);
  }
  .disabled .label:not(.hidden) {
    opacity: var(--_disabled-label-text-opacity);
  }
  .error .label {
    color: var(--_error-label-text-color);
  }
  .error:hover .label {
    color: var(--_error-hover-label-text-color);
  }
  .error.focused .label {
    color: var(--_error-focus-label-text-color);
  }
  .supporting-text {
    color: var(--_supporting-text-color);
    display: flex;
    font: var(--_supporting-text-type);
    justify-content: space-between;
    padding: 0 var(--_supporting-text-padding);
  }
  .supporting-text-end,
  .supporting-text-start {
    display: flex;
  }
  .supporting-text-end ::slotted(:not(:empty)),
  .supporting-text-start ::slotted(:not(:empty)) {
    padding-top: var(--_supporting-text-padding-top);
  }
  .supporting-text-end ::slotted(:not(:empty)) {
    -webkit-padding-start: var(--_supporting-text-padding);
    padding-inline-start: var(--_supporting-text-padding);
  }
  :hover .supporting-text {
    color: var(--_hover-supporting-text-color);
  }
  .focus .supporting-text {
    color: var(--_focus-supporting-text-color);
  }
  .disabled .supporting-text {
    color: var(--_disabled-supporting-text-color);
    opacity: var(--_disabled-supporting-text-opacity);
  }
  .error .supporting-text {
    color: var(--_error-supporting-text-color);
  }
  .error:hover .supporting-text {
    color: var(--_error-hover-supporting-text-color);
  }
  .error.focus .supporting-text {
    color: var(--_error-focus-supporting-text-color);
  }
}
