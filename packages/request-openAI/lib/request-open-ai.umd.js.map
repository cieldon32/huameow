{"version":3,"file":"request-open-ai.umd.js","sources":["../src/http.ts","../src/request.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport function serializeDataIfNeeded(data: any, needsSerialization?: boolean) {\n  if (!data) return;\n\n  return needsSerialization && typeof data === 'object'\n    ? JSON.stringify(data)\n    : data || '';\n}\n\nexport function convertToFormDataIfNeeded(\n  data: any,\n  needsConversion?: boolean\n) {\n  if (!data) return;\n\n  if (typeof data === 'object' && needsConversion) {\n    const formData = new FormData();\n\n    for (const key in data) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (data.hasOwnProperty(key)) {\n        const value = data[key];\n        if (value in File) {\n          formData.append(key, value, value.name);\n        } else if (Array.isArray(value)) {\n          value.forEach((item) => {\n            formData.append(key, item);\n          });\n        } else {\n          formData.append(key, value[key]);\n        }\n      }\n    }\n\n    return formData;\n  }\n\n  return data;\n}\n\nexport function mergeHeaders(headers: Headers, init?: HeadersInit) {\n  const mergedHeaders = new Headers(init);\n\n  headers.forEach((value, key) => {\n    mergedHeaders.append(key, value);\n  });\n\n  return mergedHeaders;\n}\n\nexport function removeLeadingSlash(path: string) {\n  return path.startsWith('/') ? path.slice(1) : path;\n}\n\nexport function removeTrailingSlash(path: string) {\n  return path.endsWith('/') ? path.slice(0, -1) : path;\n}\n","import {\n  mergeHeaders,\n  serializeDataIfNeeded,\n  convertToFormDataIfNeeded,\n  removeLeadingSlash,\n  removeTrailingSlash,\n} from './http';\n\nimport type {\n  ClientConfiguration,\n  CreateChatCompletionRequest,\n  CreateCompletionRequest,\n  CreateEditRequest,\n  CreateEmbeddingRequest,\n  CreateImageRequest,\n  CreateModerationRequest,\n  CreateImageEditRequest,\n  CreateImageVariationRequest,\n  CreateTranscriptionRequest,\n  CreateTranslationRequest,\n  CreateRequestInfo,\n} from './interface';\n\nconst BASE_PATH = 'https://api.openai.com';\n\nfunction buildURL(path: string, base?: string): URL {\n  return new URL(path, base || BASE_PATH);\n}\n\nexport class OpenAIApiBuilder {\n  constructor(public configuration: ClientConfiguration) {}\n\n  configure(configuration: ClientConfiguration) {\n    this.configuration = { ...this.configuration, ...configuration };\n  }\n\n  async createRequest(info: CreateRequestInfo): Promise<Response> {\n    const { baseURL, apiVersion = 'v1', headersInit } = this.configuration;\n\n    // 防止外部存在多余的斜杠\n    const path = removeTrailingSlash(removeLeadingSlash(apiVersion));\n\n    return fetch(buildURL(`/${path}/${info.url}`, baseURL), {\n      method: info.method,\n      headers: mergeHeaders(new Headers(info.headers), headersInit),\n      body: info.body,\n    });\n  }\n\n  createChatCompletion(\n    createChatCompletionRequest: BodyInit | CreateChatCompletionRequest,\n    needsSerialization?: boolean\n  ) {\n    return this.createRequest({\n      url: 'chat/completions',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(\n        createChatCompletionRequest,\n        needsSerialization\n      ),\n    });\n  }\n\n  createCompletion(\n    createCompletionRequest: BodyInit | CreateCompletionRequest,\n    needsSerialization?: boolean\n  ) {\n    return this.createRequest({\n      url: 'completions',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(createCompletionRequest, needsSerialization),\n    });\n  }\n\n  createEdit(\n    createEditRequest: BodyInit | CreateEditRequest,\n    needsSerialization?: boolean\n  ) {\n    return {\n      url: 'edits',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(createEditRequest, needsSerialization),\n    };\n  }\n\n  createEmbedding(\n    createEmbeddingRequest: BodyInit | CreateEmbeddingRequest,\n    needsSerialization?: boolean\n  ) {\n    return {\n      url: 'embeddings',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(createEmbeddingRequest, needsSerialization),\n    };\n  }\n\n  createImage(\n    createImageRequest: BodyInit | CreateImageRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: 'images/generations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(createImageRequest, needsConversion),\n    };\n  }\n\n  createImageEdit(\n    createImageEditRequest: BodyInit | CreateImageEditRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: ' /images/edits',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(createImageEditRequest, needsConversion),\n    };\n  }\n\n  createImageVariation(\n    createImageVariationRequest: BodyInit | CreateImageVariationRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: ' /images/variations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(\n        createImageVariationRequest,\n        needsConversion\n      ),\n    };\n  }\n\n  createModeration(\n    createModerationRequest: BodyInit | CreateModerationRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: ' /moderations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(createModerationRequest, needsConversion),\n    };\n  }\n\n  createTranscription(\n    createTranscriptionRequest: BodyInit | CreateTranscriptionRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: 'audio/transcriptions',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(\n        createTranscriptionRequest,\n        needsConversion\n      ),\n    };\n  }\n\n  createTranslation(\n    createTranslationRequest: BodyInit | CreateTranslationRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: 'audio/translations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(\n        createTranslationRequest,\n        needsConversion\n      ),\n    };\n  }\n\n  static build(configuration: ClientConfiguration) {\n    return new OpenAIApiBuilder(configuration);\n  }\n}\n","import { OpenAIApiBuilder } from './request';\nimport {\n  ClientConfiguration,\n  CreateCompletionRequest,\n  CreateCompletionResponse,\n  CreateChatCompletionResponse,\n  CreateChatCompletionRequest,\n} from './interface';\n\nasync function transformResponse(response: Response) {\n  if (response.ok) {\n    const res = await response.json();\n    const ex = res.error;\n\n    return ex ? Promise.reject(new Error(ex.message || '请求失败')) : res;\n  }\n\n  return Promise.reject(new Error(response.statusText));\n}\n\nexport class OpenAIApiClient {\n  api: OpenAIApiBuilder;\n\n  constructor(config: ClientConfiguration) {\n    this.api = OpenAIApiBuilder.build(config);\n  }\n\n  async createCompletion(\n    body: CreateCompletionRequest\n  ): Promise<CreateCompletionResponse> {\n    return transformResponse(await this.api.createCompletion(body, true));\n  }\n\n  async createChatCompletion(\n    body: CreateChatCompletionRequest\n  ): Promise<CreateChatCompletionResponse> {\n    return transformResponse(await this.api.createChatCompletion(body, true));\n  }\n\n  static builder(configuration?: ClientConfiguration) {\n    return new OpenAIApiClient({\n      baseURL: window.location.origin,\n      ...configuration,\n    });\n  }\n}\n","import {OpenAIApiClient} from './client';\nimport {Configuration} from './interface';\nclass OpenAI {\n  constructor(config: Configuration) {\n    const openai: OpenAIApiClient = OpenAIApiClient.builder({\n      baseURL: config.baseURL,\n      headersInit: {\n        Authorization: `Bearer ${config.apiKey}`,\n        'OpenAI-Organization': config.apiOrg || '',\n      },\n    });\n    return openai;\n  }\n}\n\nexport default OpenAI;\n"],"names":["serializeDataIfNeeded","data","needsSerialization","JSON","stringify","convertToFormDataIfNeeded","needsConversion","formData","FormData","key","hasOwnProperty","value","File","append","name","Array","isArray","forEach","item","mergeHeaders","headers","init","mergedHeaders","Headers","OpenAIApiBuilder","constructor","configuration","this","configure","Object","assign","async","info","baseURL","apiVersion","headersInit","path","endsWith","slice","removeTrailingSlash","startsWith","removeLeadingSlash","fetch","base","URL","buildURL","url","method","body","createChatCompletion","createChatCompletionRequest","createRequest","createCompletion","createCompletionRequest","createEdit","createEditRequest","createEmbedding","createEmbeddingRequest","createImage","createImageRequest","createImageEdit","createImageEditRequest","createImageVariation","createImageVariationRequest","createModeration","createModerationRequest","createTranscription","createTranscriptionRequest","createTranslation","createTranslationRequest","static","transformResponse","response","ok","res","json","ex","error","Promise","reject","Error","message","statusText","OpenAIApiClient","config","api","build","window","location","origin","builder","Authorization","apiKey","apiOrg"],"mappings":"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"}