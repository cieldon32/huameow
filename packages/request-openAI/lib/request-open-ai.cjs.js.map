{"version":3,"file":"request-open-ai.cjs.js","sources":["../src/http.ts","../src/request.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport function serializeDataIfNeeded(data: any, needsSerialization?: boolean) {\n  if (!data) return;\n\n  return needsSerialization && typeof data === 'object'\n    ? JSON.stringify(data)\n    : data || '';\n}\n\nexport function convertToFormDataIfNeeded(\n  data: any,\n  needsConversion?: boolean\n) {\n  if (!data) return;\n\n  if (typeof data === 'object' && needsConversion) {\n    const formData = new FormData();\n\n    for (const key in data) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (data.hasOwnProperty(key)) {\n        const value = data[key];\n        if (value in File) {\n          formData.append(key, value, value.name);\n        } else if (Array.isArray(value)) {\n          value.forEach((item) => {\n            formData.append(key, item);\n          });\n        } else {\n          formData.append(key, value[key]);\n        }\n      }\n    }\n\n    return formData;\n  }\n\n  return data;\n}\n\nexport function mergeHeaders(headers: Headers, init?: HeadersInit) {\n  const mergedHeaders = new Headers(init);\n\n  headers.forEach((value, key) => {\n    mergedHeaders.append(key, value);\n  });\n\n  return mergedHeaders;\n}\n\nexport function removeLeadingSlash(path: string) {\n  return path.startsWith('/') ? path.slice(1) : path;\n}\n\nexport function removeTrailingSlash(path: string) {\n  return path.endsWith('/') ? path.slice(0, -1) : path;\n}\n","import {\n  mergeHeaders,\n  serializeDataIfNeeded,\n  convertToFormDataIfNeeded,\n  removeLeadingSlash,\n  removeTrailingSlash,\n} from './http';\n\nimport type {\n  ClientConfiguration,\n  CreateChatCompletionRequest,\n  CreateCompletionRequest,\n  CreateEditRequest,\n  CreateEmbeddingRequest,\n  CreateImageRequest,\n  CreateModerationRequest,\n  CreateImageEditRequest,\n  CreateImageVariationRequest,\n  CreateTranscriptionRequest,\n  CreateTranslationRequest,\n  CreateRequestInfo,\n} from './interface';\n\nconst BASE_PATH = 'https://api.openai.com';\n\nfunction buildURL(path: string, base?: string): URL {\n  return new URL(path, base || BASE_PATH);\n}\n\nexport class OpenAIApiBuilder {\n  constructor(public configuration: ClientConfiguration) {}\n\n  configure(configuration: ClientConfiguration) {\n    this.configuration = { ...this.configuration, ...configuration };\n  }\n\n  async createRequest(info: CreateRequestInfo): Promise<Response> {\n    const { baseURL, apiVersion = 'v1', headersInit } = this.configuration;\n\n    // 防止外部存在多余的斜杠\n    const path = removeTrailingSlash(removeLeadingSlash(apiVersion));\n\n    return fetch(buildURL(`/${path}/${info.url}`, baseURL), {\n      method: info.method,\n      headers: mergeHeaders(new Headers(info.headers), headersInit),\n      body: info.body,\n    });\n  }\n\n  createChatCompletion(\n    createChatCompletionRequest: BodyInit | CreateChatCompletionRequest,\n    needsSerialization?: boolean\n  ) {\n    return this.createRequest({\n      url: 'chat/completions',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(\n        createChatCompletionRequest,\n        needsSerialization\n      ),\n    });\n  }\n\n  createCompletion(\n    createCompletionRequest: BodyInit | CreateCompletionRequest,\n    needsSerialization?: boolean\n  ) {\n    return this.createRequest({\n      url: 'completions',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(createCompletionRequest, needsSerialization),\n    });\n  }\n\n  createEdit(\n    createEditRequest: BodyInit | CreateEditRequest,\n    needsSerialization?: boolean\n  ) {\n    return {\n      url: 'edits',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(createEditRequest, needsSerialization),\n    };\n  }\n\n  createEmbedding(\n    createEmbeddingRequest: BodyInit | CreateEmbeddingRequest,\n    needsSerialization?: boolean\n  ) {\n    return {\n      url: 'embeddings',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: serializeDataIfNeeded(createEmbeddingRequest, needsSerialization),\n    };\n  }\n\n  createImage(\n    createImageRequest: BodyInit | CreateImageRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: 'images/generations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(createImageRequest, needsConversion),\n    };\n  }\n\n  createImageEdit(\n    createImageEditRequest: BodyInit | CreateImageEditRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: ' /images/edits',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(createImageEditRequest, needsConversion),\n    };\n  }\n\n  createImageVariation(\n    createImageVariationRequest: BodyInit | CreateImageVariationRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: ' /images/variations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(\n        createImageVariationRequest,\n        needsConversion\n      ),\n    };\n  }\n\n  createModeration(\n    createModerationRequest: BodyInit | CreateModerationRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: ' /moderations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(createModerationRequest, needsConversion),\n    };\n  }\n\n  createTranscription(\n    createTranscriptionRequest: BodyInit | CreateTranscriptionRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: 'audio/transcriptions',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(\n        createTranscriptionRequest,\n        needsConversion\n      ),\n    };\n  }\n\n  createTranslation(\n    createTranslationRequest: BodyInit | CreateTranslationRequest,\n    needsConversion?: boolean\n  ) {\n    return {\n      url: 'audio/translations',\n      method: 'POST',\n      headers: { 'Content-Type': 'multipart/form-data' },\n      body: convertToFormDataIfNeeded(\n        createTranslationRequest,\n        needsConversion\n      ),\n    };\n  }\n\n  static build(configuration: ClientConfiguration) {\n    return new OpenAIApiBuilder(configuration);\n  }\n}\n","import { OpenAIApiBuilder } from './request';\nimport {\n  ClientConfiguration,\n  CreateCompletionRequest,\n  CreateCompletionResponse,\n  CreateChatCompletionResponse,\n  CreateChatCompletionRequest,\n} from './interface';\n\nasync function transformResponse(response: Response) {\n  if (response.ok) {\n    const res = await response.json();\n    const ex = res.error;\n\n    return ex ? Promise.reject(new Error(ex.message || '请求失败')) : res;\n  }\n\n  return Promise.reject(new Error(response.statusText));\n}\n\nexport class OpenAIApiClient {\n  api: OpenAIApiBuilder;\n\n  constructor(config: ClientConfiguration) {\n    this.api = OpenAIApiBuilder.build(config);\n  }\n\n  async createCompletion(\n    body: CreateCompletionRequest\n  ): Promise<CreateCompletionResponse> {\n    return transformResponse(await this.api.createCompletion(body, true));\n  }\n\n  async createChatCompletion(\n    body: CreateChatCompletionRequest\n  ): Promise<CreateChatCompletionResponse> {\n    return transformResponse(await this.api.createChatCompletion(body, true));\n  }\n\n  static builder(configuration?: ClientConfiguration) {\n    return new OpenAIApiClient({\n      baseURL: window.location.origin,\n      ...configuration,\n    });\n  }\n}\n","import {OpenAIApiClient} from './client';\nimport {Configuration} from './interface';\nclass OpenAI {\n  constructor(config: Configuration) {\n    const openai = OpenAIApiClient.builder({\n      baseURL: config.baseURL,\n      headersInit: {\n        Authorization: `Bearer ${config.apiKey}`,\n        'OpenAI-Organization': config.apiOrg || '',\n      },\n    });\n    return openai;\n  }\n}\n\nexport default OpenAI;\n"],"names":[],"mappings":"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"}